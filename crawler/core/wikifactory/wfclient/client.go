// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package wfclient

import (
	"context"
	"losh/internal/lib/net/request"
	"time"
)

type WikifactoryGraphQLClient interface {
	QueryProjects(ctx context.Context, batchSize int64, cursor string) (*QueryProjects, error)
	GetProjectFullByID(ctx context.Context, id string) (*GetProjectFullByID, error)
	GetProjectFullBySlug(ctx context.Context, space string, slug string) (*GetProjectFullBySlug, error)
	GetProjectMandatoryByID(ctx context.Context, id string) (*GetProjectMandatoryByID, error)
	GetProjectMandatoryBySlug(ctx context.Context, space string, slug string) (*GetProjectMandatoryBySlug, error)
	GetGroup(ctx context.Context, slug string) (*GetGroup, error)
}

type Client struct {
	Requester *request.GraphQLRequester
}

func NewClient(requester *request.GraphQLRequester) WikifactoryGraphQLClient {
	return &Client{
		Requester: requester,
	}
}

type Query struct {
	Node                  Node                                      "json:\"node,omitempty\" graphql:\"node\""
	UserByID              *User                                     "json:\"userById,omitempty\" graphql:\"userById\""
	User                  *User                                     "json:\"user,omitempty\" graphql:\"user\""
	Slug                  *SlugUnique                               "json:\"slug,omitempty\" graphql:\"slug\""
	Channel               *ChannelErrorHandler                      "json:\"channel,omitempty\" graphql:\"channel\""
	Channels              *ChannelConnectionErrorHandler            "json:\"channels,omitempty\" graphql:\"channels\""
	Initiative            *InitiativeErrorHandler                   "json:\"initiative,omitempty\" graphql:\"initiative\""
	Initiatives           *InitiativeConnectionErrorHandler         "json:\"initiatives,omitempty\" graphql:\"initiatives\""
	OrganizationTypes     []*OrganizationType                       "json:\"organizationTypes,omitempty\" graphql:\"organizationTypes\""
	Profile               *ProfileErrorHandler                      "json:\"profile,omitempty\" graphql:\"profile\""
	ProfileUserTypes      []*ProfileUserType                        "json:\"profileUserTypes,omitempty\" graphql:\"profileUserTypes\""
	ProfileIntents        []*ProfileIntent                          "json:\"profileIntents,omitempty\" graphql:\"profileIntents\""
	Profiles              *ProfileConnectionErrorHandler            "json:\"profiles,omitempty\" graphql:\"profiles\""
	ProfilesComplete      []*Profile                                "json:\"profilesComplete,omitempty\" graphql:\"profilesComplete\""
	ChannelComplete       []*Channel                                "json:\"channelComplete,omitempty\" graphql:\"channelComplete\""
	SkillComplete         []*Skill                                  "json:\"skillComplete,omitempty\" graphql:\"skillComplete\""
	CanCreateInSpaces     []*Space                                  "json:\"canCreateInSpaces,omitempty\" graphql:\"canCreateInSpaces\""
	Licenses              []*License                                "json:\"licenses,omitempty\" graphql:\"licenses\""
	Post                  *PostErrorHandler                         "json:\"post,omitempty\" graphql:\"post\""
	Posts                 *PostConnection                           "json:\"posts,omitempty\" graphql:\"posts\""
	Comments              *CommentConnection                        "json:\"comments,omitempty\" graphql:\"comments\""
	Story                 *StoryErrorHandler                        "json:\"story,omitempty\" graphql:\"story\""
	Stories               *StoryConnectionErrorHandler              "json:\"stories,omitempty\" graphql:\"stories\""
	Project               *ProjectErrorHandler                      "json:\"project,omitempty\" graphql:\"project\""
	Projects              *ProjectConnectionErrorHandler            "json:\"projects,omitempty\" graphql:\"projects\""
	SuggestedProjects     *SuggestedProjectConnectionErrorHandler   "json:\"suggestedProjects,omitempty\" graphql:\"suggestedProjects\""
	ProjectPhases         []*ProjectPhase                           "json:\"projectPhases,omitempty\" graphql:\"projectPhases\""
	SharedFile            *SharedFileErrorHandler                   "json:\"sharedFile,omitempty\" graphql:\"sharedFile\""
	ContributionFile      *ContributionFileErrorHandler             "json:\"contributionFile,omitempty\" graphql:\"contributionFile\""
	Collection            *CollectionErrorHandler                   "json:\"collection,omitempty\" graphql:\"collection\""
	Collections           *CollectionConnectionErrorHandler         "json:\"collections,omitempty\" graphql:\"collections\""
	File                  *FileErrorHandler                         "json:\"file,omitempty\" graphql:\"file\""
	Search                *SearchResult                             "json:\"search,omitempty\" graphql:\"search\""
	Activity              *ActivityConnection                       "json:\"activity,omitempty\" graphql:\"activity\""
	GlobalActivity        *ActivityConnection                       "json:\"globalActivity,omitempty\" graphql:\"globalActivity\""
	Issues                *IssueConnectionErrorHandler              "json:\"issues,omitempty\" graphql:\"issues\""
	ViralresponseIssues   *ViralResponseIssueConnectionErrorHandler "json:\"viralresponseIssues,omitempty\" graphql:\"viralresponseIssues\""
	Group                 *GroupErrorHandler                        "json:\"group,omitempty\" graphql:\"group\""
	SignupInvites         []*GroupInvite                            "json:\"signupInvites,omitempty\" graphql:\"signupInvites\""
	InviteLink            *InviteLinkErrorHandler                   "json:\"inviteLink,omitempty\" graphql:\"inviteLink\""
	Groups                []*Group                                  "json:\"groups,omitempty\" graphql:\"groups\""
	Forum                 *ForumErrorHandler                        "json:\"forum,omitempty\" graphql:\"forum\""
	Forums                *ForumConnectionErrorHandler              "json:\"forums,omitempty\" graphql:\"forums\""
	Thread                *ThreadErrorHandler                       "json:\"thread,omitempty\" graphql:\"thread\""
	Threads               *ThreadConnectionErrorHandler             "json:\"threads,omitempty\" graphql:\"threads\""
	ForumCategory         *ForumCategoryErrorHandler                "json:\"forumCategory,omitempty\" graphql:\"forumCategory\""
	LoggedInUser          *LoggedInUser                             "json:\"loggedInUser,omitempty\" graphql:\"loggedInUser\""
	Annotations           []*Annotation                             "json:\"annotations\" graphql:\"annotations\""
	CadConversions        []*CadConversion                          "json:\"cadConversions,omitempty\" graphql:\"cadConversions\""
	ExtractedParts        []*Part                                   "json:\"extractedParts,omitempty\" graphql:\"extractedParts\""
	ProductBuilds         []*ProductBuild                           "json:\"productBuilds,omitempty\" graphql:\"productBuilds\""
	Address               Address                                   "json:\"address\" graphql:\"address\""
	Addresses             []*Address                                "json:\"addresses\" graphql:\"addresses\""
	Manufacturer          *Manufacturer                             "json:\"manufacturer,omitempty\" graphql:\"manufacturer\""
	Manufacturers         ManufacturerPage                          "json:\"manufacturers\" graphql:\"manufacturers\""
	Materials             []*Material                               "json:\"materials\" graphql:\"materials\""
	Processes             []*Process                                "json:\"processes\" graphql:\"processes\""
	Service               Service                                   "json:\"service\" graphql:\"service\""
	Services              ServicePage                               "json:\"services\" graphql:\"services\""
	Option                Option                                    "json:\"option\" graphql:\"option\""
	Options               []Option                                  "json:\"options\" graphql:\"options\""
	OptionInstances       []*OptionInstance                         "json:\"optionInstances\" graphql:\"optionInstances\""
	FileRequirements      []*FileRequirement                        "json:\"fileRequirements\" graphql:\"fileRequirements\""
	TooltipTags           []*TooltipTag                             "json:\"tooltipTags\" graphql:\"tooltipTags\""
	Messages              MessagePage                               "json:\"messages\" graphql:\"messages\""
	Conversations         ConversationPage                          "json:\"conversations\" graphql:\"conversations\""
	ConversationByContext *Conversation                             "json:\"conversationByContext,omitempty\" graphql:\"conversationByContext\""
	Order                 Order                                     "json:\"order\" graphql:\"order\""
	Orders                OrderPage                                 "json:\"orders\" graphql:\"orders\""
	RequestForQuote       *RequestForQuote                          "json:\"requestForQuote,omitempty\" graphql:\"requestForQuote\""
	RequestForQuotes      RequestForQuotePage                       "json:\"requestForQuotes\" graphql:\"requestForQuotes\""
}
type Mutation struct {
	SignupResult                        *EmailSignup                           "json:\"signupResult,omitempty\" graphql:\"signupResult\""
	SignInResult                        *EmailLogin                            "json:\"signInResult,omitempty\" graphql:\"signInResult\""
	Profile                             *UpdateProfile                         "json:\"profile,omitempty\" graphql:\"profile\""
	ConfirmProfile                      *ConfirmProfile                        "json:\"confirmProfile,omitempty\" graphql:\"confirmProfile\""
	BanProfile                          *BanProfile                            "json:\"banProfile,omitempty\" graphql:\"banProfile\""
	Initiative                          *InitiativeMutation                    "json:\"initiative,omitempty\" graphql:\"initiative\""
	InitiativeAndProfile                *InitiativeProfileMutation             "json:\"initiativeAndProfile,omitempty\" graphql:\"initiativeAndProfile\""
	ManufacturerAndInitiativeAndProfile *ManufacturerInitiativeProfileMutation "json:\"manufacturerAndInitiativeAndProfile,omitempty\" graphql:\"manufacturerAndInitiativeAndProfile\""
	Post                                *PostMutation                          "json:\"post,omitempty\" graphql:\"post\""
	Comment                             *CommentMutation                       "json:\"comment,omitempty\" graphql:\"comment\""
	Story                               *StoryMutation                         "json:\"story,omitempty\" graphql:\"story\""
	Project                             *ProjectMutation                       "json:\"project,omitempty\" graphql:\"project\""
	ProjectVisibility                   *ProjectVisibilityMutation             "json:\"projectVisibility,omitempty\" graphql:\"projectVisibility\""
	TransferProject                     *TransferProjectMutation               "json:\"transferProject,omitempty\" graphql:\"transferProject\""
	ImportProject                       *ImportProjectMutation                 "json:\"importProject,omitempty\" graphql:\"importProject\""
	CancelImportProject                 *CancelImportProjectMutation           "json:\"cancelImportProject,omitempty\" graphql:\"cancelImportProject\""
	UpdateImportProject                 *UpdateImportProjectMutation           "json:\"updateImportProject,omitempty\" graphql:\"updateImportProject\""
	ForkProject                         *ForkProjectMutation                   "json:\"forkProject,omitempty\" graphql:\"forkProject\""
	CreateSharedFile                    *CreateSharedFileMutation              "json:\"createSharedFile,omitempty\" graphql:\"createSharedFile\""
	DeleteSharedFile                    *DeleteSharedFileMutation              "json:\"deleteSharedFile,omitempty\" graphql:\"deleteSharedFile\""
	UpdateSharedFile                    *UpdateSharedFileMutation              "json:\"updateSharedFile,omitempty\" graphql:\"updateSharedFile\""
	Collection                          *CollectionMutation                    "json:\"collection,omitempty\" graphql:\"collection\""
	Like                                *LikeMutation                          "json:\"like,omitempty\" graphql:\"like\""
	Follow                              *FollowMutation                        "json:\"follow,omitempty\" graphql:\"follow\""
	Label                               *LabelMutation                         "json:\"label,omitempty\" graphql:\"label\""
	Issue                               *IssueMutation                         "json:\"issue,omitempty\" graphql:\"issue\""
	File                                *FileMutation                          "json:\"file,omitempty\" graphql:\"file\""
	Conversion                          *ConversionMutation                    "json:\"conversion,omitempty\" graphql:\"conversion\""
	Commit                              *CommitMutation                        "json:\"commit,omitempty\" graphql:\"commit\""
	ResetContribution                   *ResetContributionMutation             "json:\"resetContribution,omitempty\" graphql:\"resetContribution\""
	Operation                           *OperationMutation                     "json:\"operation,omitempty\" graphql:\"operation\""
	RequestResetPassword                *RequestResetPassword                  "json:\"requestResetPassword,omitempty\" graphql:\"requestResetPassword\""
	NewPassword                         *NewPassword                           "json:\"newPassword,omitempty\" graphql:\"newPassword\""
	ChangePassword                      *ChangePassword                        "json:\"changePassword,omitempty\" graphql:\"changePassword\""
	ChangeEmailPreferences              *ChangeEmailPreferences                "json:\"changeEmailPreferences,omitempty\" graphql:\"changeEmailPreferences\""
	ChangeLanguagePreferences           *ChangeLanguagePreferences             "json:\"changeLanguagePreferences,omitempty\" graphql:\"changeLanguagePreferences\""
	InviteUsersToGroup                  *InviteUsersToGroup                    "json:\"inviteUsersToGroup,omitempty\" graphql:\"inviteUsersToGroup\""
	InviteUsersToSignup                 *InviteUsersToSignup                   "json:\"inviteUsersToSignup,omitempty\" graphql:\"inviteUsersToSignup\""
	ResendInvite                        *ResendInvite                          "json:\"resendInvite,omitempty\" graphql:\"resendInvite\""
	RemoveUserFromGroup                 *RemoveUserFromGroup                   "json:\"removeUserFromGroup,omitempty\" graphql:\"removeUserFromGroup\""
	MoveGroupMember                     *MoveGroupMember                       "json:\"moveGroupMember,omitempty\" graphql:\"moveGroupMember\""
	MoveGroupInvite                     *MoveGroupInvite                       "json:\"moveGroupInvite,omitempty\" graphql:\"moveGroupInvite\""
	RequestMoreInvites                  *InvitesRequest                        "json:\"requestMoreInvites,omitempty\" graphql:\"requestMoreInvites\""
	RequestInvite                       *SignupRequest                         "json:\"requestInvite,omitempty\" graphql:\"requestInvite\""
	DeleteInvite                        *DeleteInvite                          "json:\"deleteInvite,omitempty\" graphql:\"deleteInvite\""
	AcceptInvite                        *AcceptInvite                          "json:\"acceptInvite,omitempty\" graphql:\"acceptInvite\""
	RejectInvite                        *RejectInvite                          "json:\"rejectInvite,omitempty\" graphql:\"rejectInvite\""
	CreateInviteLink                    *CreateInviteLink                      "json:\"createInviteLink,omitempty\" graphql:\"createInviteLink\""
	DeleteInviteLink                    *DeleteInviteLink                      "json:\"deleteInviteLink,omitempty\" graphql:\"deleteInviteLink\""
	Forum                               *ForumMutation                         "json:\"forum,omitempty\" graphql:\"forum\""
	Thread                              *ThreadMutation                        "json:\"thread,omitempty\" graphql:\"thread\""
	Category                            *CategoryMutation                      "json:\"category,omitempty\" graphql:\"category\""
	Pin                                 *PinMutation                           "json:\"pin,omitempty\" graphql:\"pin\""
	BillingSubscribe                    *BillingSubscribeMutation              "json:\"billingSubscribe,omitempty\" graphql:\"billingSubscribe\""
	BillingCancel                       *BillingCancelSubscriptionMutation     "json:\"billingCancel,omitempty\" graphql:\"billingCancel\""
	BillingAddSeats                     *BillingAddSeatsMutation               "json:\"billingAddSeats,omitempty\" graphql:\"billingAddSeats\""
	BillingRemoveSeats                  *BillingRemoveSeatsMutation            "json:\"billingRemoveSeats,omitempty\" graphql:\"billingRemoveSeats\""
	AddPaymentMethod                    *AddPaymentMutation                    "json:\"addPaymentMethod,omitempty\" graphql:\"addPaymentMethod\""
	DeletePaymentMethod                 *DeletePaymentMutation                 "json:\"deletePaymentMethod,omitempty\" graphql:\"deletePaymentMethod\""
	MakeDefaultPaymentMethod            *MakeDefaultPaymentMethodMutation      "json:\"makeDefaultPaymentMethod,omitempty\" graphql:\"makeDefaultPaymentMethod\""
	MarkAllAsRead                       *MarkAllAsReadMutation                 "json:\"markAllAsRead,omitempty\" graphql:\"markAllAsRead\""
	CreateAnnotation                    Annotation                             "json:\"createAnnotation\" graphql:\"createAnnotation\""
	DeleteAnnotation                    string                                 "json:\"deleteAnnotation\" graphql:\"deleteAnnotation\""
	ExtractParts                        []*RequestForQuote                     "json:\"extractParts,omitempty\" graphql:\"extractParts\""
	CadConvert                          []*CadConversion                       "json:\"cadConvert\" graphql:\"cadConvert\""
	CreateProductBuild                  ProductBuild                           "json:\"createProductBuild\" graphql:\"createProductBuild\""
	CreateRelease                       Release                                "json:\"createRelease\" graphql:\"createRelease\""
	CreateAddress                       Address                                "json:\"createAddress\" graphql:\"createAddress\""
	UpdateAddress                       Address                                "json:\"updateAddress\" graphql:\"updateAddress\""
	DeleteAddress                       Address                                "json:\"deleteAddress\" graphql:\"deleteAddress\""
	CreateIntermediator                 Intermediator                          "json:\"createIntermediator\" graphql:\"createIntermediator\""
	CreateManufacturer                  Manufacturer                           "json:\"createManufacturer\" graphql:\"createManufacturer\""
	CreateManufacturerProfile           Manufacturer                           "json:\"createManufacturerProfile\" graphql:\"createManufacturerProfile\""
	UpdateManufacturer                  Manufacturer                           "json:\"updateManufacturer\" graphql:\"updateManufacturer\""
	UpdateService                       Service                                "json:\"updateService\" graphql:\"updateService\""
	CreateServiceInstances              []*ServiceInstance                     "json:\"createServiceInstances\" graphql:\"createServiceInstances\""
	UpdateServiceInstance               ServiceInstance                        "json:\"updateServiceInstance\" graphql:\"updateServiceInstance\""
	CreateOptionInstances               []*OptionInstance                      "json:\"createOptionInstances\" graphql:\"createOptionInstances\""
	DeleteOptionInstance                OptionInstance                         "json:\"deleteOptionInstance\" graphql:\"deleteOptionInstance\""
	CreateMaterials                     []*Material                            "json:\"createMaterials\" graphql:\"createMaterials\""
	CreateMaterial                      Material                               "json:\"createMaterial\" graphql:\"createMaterial\""
	UpdateMaterial                      Material                               "json:\"updateMaterial\" graphql:\"updateMaterial\""
	DeleteMaterial                      Material                               "json:\"deleteMaterial\" graphql:\"deleteMaterial\""
	CreateProcesses                     []*Process                             "json:\"createProcesses\" graphql:\"createProcesses\""
	CreateProcess                       Process                                "json:\"createProcess\" graphql:\"createProcess\""
	UpdateProcess                       Process                                "json:\"updateProcess\" graphql:\"updateProcess\""
	DeleteProcess                       Process                                "json:\"deleteProcess\" graphql:\"deleteProcess\""
	CreateMinMaxOption                  MinMaxOption                           "json:\"createMinMaxOption\" graphql:\"createMinMaxOption\""
	CreateSelectionOption               SelectionOption                        "json:\"createSelectionOption\" graphql:\"createSelectionOption\""
	UpdateOption                        Option                                 "json:\"updateOption\" graphql:\"updateOption\""
	DeleteOption                        Option                                 "json:\"deleteOption\" graphql:\"deleteOption\""
	CreateFileRequirement               FileRequirement                        "json:\"createFileRequirement\" graphql:\"createFileRequirement\""
	DeleteFileRequirement               FileRequirement                        "json:\"deleteFileRequirement\" graphql:\"deleteFileRequirement\""
	CreateTooltipTag                    TooltipTag                             "json:\"createTooltipTag\" graphql:\"createTooltipTag\""
	UpdateTooltipTag                    TooltipTag                             "json:\"updateTooltipTag\" graphql:\"updateTooltipTag\""
	CreateMessage                       Message                                "json:\"createMessage\" graphql:\"createMessage\""
	UpdateMessage                       Message                                "json:\"updateMessage\" graphql:\"updateMessage\""
	DeleteMessage                       Message                                "json:\"deleteMessage\" graphql:\"deleteMessage\""
	ReadMessage                         Message                                "json:\"readMessage\" graphql:\"readMessage\""
	CreateCheckout                      string                                 "json:\"createCheckout\" graphql:\"createCheckout\""
	CreateRequestForQuote               RequestForQuote                        "json:\"createRequestForQuote\" graphql:\"createRequestForQuote\""
	UpdateRequestForQuote               RequestForQuote                        "json:\"updateRequestForQuote\" graphql:\"updateRequestForQuote\""
	AddQuotingPriority                  RequestForQuote                        "json:\"addQuotingPriority\" graphql:\"addQuotingPriority\""
	CreateQuote                         Quote                                  "json:\"createQuote\" graphql:\"createQuote\""
	DeleteQuote                         Quote                                  "json:\"deleteQuote\" graphql:\"deleteQuote\""
}
type FileFragment struct {
	Filename    string     "json:\"filename\" graphql:\"filename\""
	Path        *string    "json:\"path\" graphql:\"path\""
	MimeType    string     "json:\"mimeType\" graphql:\"mimeType\""
	URL         *string    "json:\"url\" graphql:\"url\""
	Permalink   *string    "json:\"permalink\" graphql:\"permalink\""
	DateCreated *time.Time "json:\"dateCreated\" graphql:\"dateCreated\""
	LastUpdated *time.Time "json:\"lastUpdated\" graphql:\"lastUpdated\""
	License     *string    "json:\"license\" graphql:\"license\""
}
type ContributionFragment struct {
	Title       *string                       "json:\"title\" graphql:\"title\""
	DateCreated *time.Time                    "json:\"dateCreated\" graphql:\"dateCreated\""
	Version     *string                       "json:\"version\" graphql:\"version\""
	Files       []*ContributionFragment_Files "json:\"files\" graphql:\"files\""
}
type ProjectMandatoryFragment struct {
	ID           string                                 "json:\"id\" graphql:\"id\""
	ParentSlug   *string                                "json:\"parentSlug\" graphql:\"parentSlug\""
	Slug         *string                                "json:\"slug\" graphql:\"slug\""
	Name         *string                                "json:\"name\" graphql:\"name\""
	Description  *string                                "json:\"description\" graphql:\"description\""
	Creator      *ProjectMandatoryFragment_Creator      "json:\"creator\" graphql:\"creator\""
	License      *ProjectMandatoryFragment_License      "json:\"license\" graphql:\"license\""
	Contribution *ProjectMandatoryFragment_Contribution "json:\"contribution\" graphql:\"contribution\""
}
type ProjectFullFragment struct {
	ID             string                             "json:\"id\" graphql:\"id\""
	Name           *string                            "json:\"name\" graphql:\"name\""
	Description    *string                            "json:\"description\" graphql:\"description\""
	Tags           []*ProjectFullFragment_Tags        "json:\"tags\" graphql:\"tags\""
	LastUpdated    *time.Time                         "json:\"lastUpdated\" graphql:\"lastUpdated\""
	FollowersCount *int64                             "json:\"followersCount\" graphql:\"followersCount\""
	StarCount      *int64                             "json:\"starCount\" graphql:\"starCount\""
	ForkCount      *int64                             "json:\"forkCount\" graphql:\"forkCount\""
	Creator        *ProjectFullFragment_Creator       "json:\"creator\" graphql:\"creator\""
	Image          *FileFragment                      "json:\"image\" graphql:\"image\""
	License        *ProjectFullFragment_License       "json:\"license\" graphql:\"license\""
	Contributions  *ProjectFullFragment_Contributions "json:\"contributions\" graphql:\"contributions\""
	Contributors   *ProjectFullFragment_Contributors  "json:\"contributors\" graphql:\"contributors\""
	ForkedFrom     *ProjectFullFragment_ForkedFrom    "json:\"forkedFrom\" graphql:\"forkedFrom\""
	Slug           *string                            "json:\"slug\" graphql:\"slug\""
	ParentSlug     *string                            "json:\"parentSlug\" graphql:\"parentSlug\""
	ParentContent  *ProjectFullFragment_ParentContent "json:\"parentContent\" graphql:\"parentContent\""
}
type PageInfoFragment struct {
	HasNextPage     bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool    "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	StartCursor     *string "json:\"startCursor\" graphql:\"startCursor\""
	EndCursor       *string "json:\"endCursor\" graphql:\"endCursor\""
}
type ContributionFragment_Files struct {
	Dirname *string       "json:\"dirname\" graphql:\"dirname\""
	File    *FileFragment "json:\"file\" graphql:\"file\""
}
type ProjectMandatoryFragment_Creator_Profile struct {
	Username *string "json:\"username\" graphql:\"username\""
}
type ProjectMandatoryFragment_Creator struct {
	Profile *ProjectMandatoryFragment_Creator_Profile "json:\"profile\" graphql:\"profile\""
}
type ProjectMandatoryFragment_License struct {
	Abreviation *string "json:\"abreviation\" graphql:\"abreviation\""
}
type ProjectMandatoryFragment_Contribution_Files_File struct {
	Filename string "json:\"filename\" graphql:\"filename\""
}
type ProjectMandatoryFragment_Contribution_Files struct {
	Dirname *string                                           "json:\"dirname\" graphql:\"dirname\""
	File    *ProjectMandatoryFragment_Contribution_Files_File "json:\"file\" graphql:\"file\""
}
type ProjectMandatoryFragment_Contribution struct {
	Version *string                                        "json:\"version\" graphql:\"version\""
	Files   []*ProjectMandatoryFragment_Contribution_Files "json:\"files\" graphql:\"files\""
}
type ProjectFullFragment_Tags struct {
	Name *string "json:\"name\" graphql:\"name\""
}
type ProjectFullFragment_Creator_Profile struct {
	FullName    *string       "json:\"fullName\" graphql:\"fullName\""
	Username    *string       "json:\"username\" graphql:\"username\""
	Email       *string       "json:\"email\" graphql:\"email\""
	Description *string       "json:\"description\" graphql:\"description\""
	Locale      *string       "json:\"locale\" graphql:\"locale\""
	Avatar      *FileFragment "json:\"avatar\" graphql:\"avatar\""
}
type ProjectFullFragment_Creator struct {
	ID      string                               "json:\"id\" graphql:\"id\""
	Profile *ProjectFullFragment_Creator_Profile "json:\"profile\" graphql:\"profile\""
}
type ProjectFullFragment_License struct {
	Abreviation *string "json:\"abreviation\" graphql:\"abreviation\""
}
type ProjectFullFragment_Contributions_Edges_Node_ContributionFragment_Files struct {
	Dirname *string       "json:\"dirname\" graphql:\"dirname\""
	File    *FileFragment "json:\"file\" graphql:\"file\""
}
type ProjectFullFragment_Contributions_Edges struct {
	Node *ContributionFragment "json:\"node\" graphql:\"node\""
}
type ProjectFullFragment_Contributions struct {
	Edges []*ProjectFullFragment_Contributions_Edges "json:\"edges\" graphql:\"edges\""
}
type ProjectFullFragment_Contributors_Edges_Node struct {
	FullName *string "json:\"fullName\" graphql:\"fullName\""
	Username *string "json:\"username\" graphql:\"username\""
	Email    *string "json:\"email\" graphql:\"email\""
}
type ProjectFullFragment_Contributors_Edges struct {
	Node *ProjectFullFragment_Contributors_Edges_Node "json:\"node\" graphql:\"node\""
}
type ProjectFullFragment_Contributors struct {
	Edges []*ProjectFullFragment_Contributors_Edges "json:\"edges\" graphql:\"edges\""
}
type ProjectFullFragment_ForkedFrom_Project struct {
	ParentSlug *string "json:\"parentSlug\" graphql:\"parentSlug\""
	Slug       *string "json:\"slug\" graphql:\"slug\""
}
type ProjectFullFragment_ForkedFrom struct {
	Project *ProjectFullFragment_ForkedFrom_Project "json:\"project\" graphql:\"project\""
}
type ProjectFullFragment_ParentContent struct {
	Type *string "json:\"type\" graphql:\"type\""
	Slug *string "json:\"slug\" graphql:\"slug\""
}
type QueryProjects_Projects_Result_Edges_Node_ProjectMandatoryFragment_Creator_Profile struct {
	Username *string "json:\"username\" graphql:\"username\""
}
type QueryProjects_Projects_Result_Edges_Node_ProjectMandatoryFragment_Creator struct {
	Profile *QueryProjects_Projects_Result_Edges_Node_ProjectMandatoryFragment_Creator_Profile "json:\"profile\" graphql:\"profile\""
}
type QueryProjects_Projects_Result_Edges_Node_ProjectMandatoryFragment_License struct {
	Abreviation *string "json:\"abreviation\" graphql:\"abreviation\""
}
type QueryProjects_Projects_Result_Edges_Node_ProjectMandatoryFragment_Contribution_Files_File struct {
	Filename string "json:\"filename\" graphql:\"filename\""
}
type QueryProjects_Projects_Result_Edges_Node_ProjectMandatoryFragment_Contribution_Files struct {
	Dirname *string                                                                                    "json:\"dirname\" graphql:\"dirname\""
	File    *QueryProjects_Projects_Result_Edges_Node_ProjectMandatoryFragment_Contribution_Files_File "json:\"file\" graphql:\"file\""
}
type QueryProjects_Projects_Result_Edges_Node_ProjectMandatoryFragment_Contribution struct {
	Version *string                                                                                 "json:\"version\" graphql:\"version\""
	Files   []*QueryProjects_Projects_Result_Edges_Node_ProjectMandatoryFragment_Contribution_Files "json:\"files\" graphql:\"files\""
}
type QueryProjects_Projects_Result_Edges struct {
	Node *ProjectMandatoryFragment "json:\"node\" graphql:\"node\""
}
type QueryProjects_Projects_Result struct {
	PageInfo *PageInfoFragment                      "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*QueryProjects_Projects_Result_Edges "json:\"edges\" graphql:\"edges\""
}
type QueryProjects_Projects struct {
	Result *QueryProjects_Projects_Result "json:\"result\" graphql:\"result\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_Tags struct {
	Name *string "json:\"name\" graphql:\"name\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_Creator_Profile struct {
	FullName    *string       "json:\"fullName\" graphql:\"fullName\""
	Username    *string       "json:\"username\" graphql:\"username\""
	Email       *string       "json:\"email\" graphql:\"email\""
	Description *string       "json:\"description\" graphql:\"description\""
	Locale      *string       "json:\"locale\" graphql:\"locale\""
	Avatar      *FileFragment "json:\"avatar\" graphql:\"avatar\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_Creator struct {
	ID      string                                                                 "json:\"id\" graphql:\"id\""
	Profile *GetProjectFullByID_Project_Result_ProjectFullFragment_Creator_Profile "json:\"profile\" graphql:\"profile\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_License struct {
	Abreviation *string "json:\"abreviation\" graphql:\"abreviation\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_Contributions_Edges_Node_ContributionFragment_Files struct {
	Dirname *string       "json:\"dirname\" graphql:\"dirname\""
	File    *FileFragment "json:\"file\" graphql:\"file\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_Contributions_Edges struct {
	Node *ContributionFragment "json:\"node\" graphql:\"node\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_Contributions struct {
	Edges []*GetProjectFullByID_Project_Result_ProjectFullFragment_Contributions_Edges "json:\"edges\" graphql:\"edges\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_Contributors_Edges_Node struct {
	FullName *string "json:\"fullName\" graphql:\"fullName\""
	Username *string "json:\"username\" graphql:\"username\""
	Email    *string "json:\"email\" graphql:\"email\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_Contributors_Edges struct {
	Node *GetProjectFullByID_Project_Result_ProjectFullFragment_Contributors_Edges_Node "json:\"node\" graphql:\"node\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_Contributors struct {
	Edges []*GetProjectFullByID_Project_Result_ProjectFullFragment_Contributors_Edges "json:\"edges\" graphql:\"edges\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_ForkedFrom_Project struct {
	ParentSlug *string "json:\"parentSlug\" graphql:\"parentSlug\""
	Slug       *string "json:\"slug\" graphql:\"slug\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_ForkedFrom struct {
	Project *GetProjectFullByID_Project_Result_ProjectFullFragment_ForkedFrom_Project "json:\"project\" graphql:\"project\""
}
type GetProjectFullByID_Project_Result_ProjectFullFragment_ParentContent struct {
	Type *string "json:\"type\" graphql:\"type\""
	Slug *string "json:\"slug\" graphql:\"slug\""
}
type GetProjectFullByID_Project struct {
	Result *ProjectFullFragment "json:\"result\" graphql:\"result\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_Tags struct {
	Name *string "json:\"name\" graphql:\"name\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_Creator_Profile struct {
	FullName    *string       "json:\"fullName\" graphql:\"fullName\""
	Username    *string       "json:\"username\" graphql:\"username\""
	Email       *string       "json:\"email\" graphql:\"email\""
	Description *string       "json:\"description\" graphql:\"description\""
	Locale      *string       "json:\"locale\" graphql:\"locale\""
	Avatar      *FileFragment "json:\"avatar\" graphql:\"avatar\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_Creator struct {
	ID      string                                                                   "json:\"id\" graphql:\"id\""
	Profile *GetProjectFullBySlug_Project_Result_ProjectFullFragment_Creator_Profile "json:\"profile\" graphql:\"profile\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_License struct {
	Abreviation *string "json:\"abreviation\" graphql:\"abreviation\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_Contributions_Edges_Node_ContributionFragment_Files struct {
	Dirname *string       "json:\"dirname\" graphql:\"dirname\""
	File    *FileFragment "json:\"file\" graphql:\"file\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_Contributions_Edges struct {
	Node *ContributionFragment "json:\"node\" graphql:\"node\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_Contributions struct {
	Edges []*GetProjectFullBySlug_Project_Result_ProjectFullFragment_Contributions_Edges "json:\"edges\" graphql:\"edges\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_Contributors_Edges_Node struct {
	FullName *string "json:\"fullName\" graphql:\"fullName\""
	Username *string "json:\"username\" graphql:\"username\""
	Email    *string "json:\"email\" graphql:\"email\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_Contributors_Edges struct {
	Node *GetProjectFullBySlug_Project_Result_ProjectFullFragment_Contributors_Edges_Node "json:\"node\" graphql:\"node\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_Contributors struct {
	Edges []*GetProjectFullBySlug_Project_Result_ProjectFullFragment_Contributors_Edges "json:\"edges\" graphql:\"edges\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_ForkedFrom_Project struct {
	ParentSlug *string "json:\"parentSlug\" graphql:\"parentSlug\""
	Slug       *string "json:\"slug\" graphql:\"slug\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_ForkedFrom struct {
	Project *GetProjectFullBySlug_Project_Result_ProjectFullFragment_ForkedFrom_Project "json:\"project\" graphql:\"project\""
}
type GetProjectFullBySlug_Project_Result_ProjectFullFragment_ParentContent struct {
	Type *string "json:\"type\" graphql:\"type\""
	Slug *string "json:\"slug\" graphql:\"slug\""
}
type GetProjectFullBySlug_Project struct {
	Result *ProjectFullFragment "json:\"result\" graphql:\"result\""
}
type GetProjectMandatoryByID_Project_Result_ProjectMandatoryFragment_Creator_Profile struct {
	Username *string "json:\"username\" graphql:\"username\""
}
type GetProjectMandatoryByID_Project_Result_ProjectMandatoryFragment_Creator struct {
	Profile *GetProjectMandatoryByID_Project_Result_ProjectMandatoryFragment_Creator_Profile "json:\"profile\" graphql:\"profile\""
}
type GetProjectMandatoryByID_Project_Result_ProjectMandatoryFragment_License struct {
	Abreviation *string "json:\"abreviation\" graphql:\"abreviation\""
}
type GetProjectMandatoryByID_Project_Result_ProjectMandatoryFragment_Contribution_Files_File struct {
	Filename string "json:\"filename\" graphql:\"filename\""
}
type GetProjectMandatoryByID_Project_Result_ProjectMandatoryFragment_Contribution_Files struct {
	Dirname *string                                                                                  "json:\"dirname\" graphql:\"dirname\""
	File    *GetProjectMandatoryByID_Project_Result_ProjectMandatoryFragment_Contribution_Files_File "json:\"file\" graphql:\"file\""
}
type GetProjectMandatoryByID_Project_Result_ProjectMandatoryFragment_Contribution struct {
	Version *string                                                                               "json:\"version\" graphql:\"version\""
	Files   []*GetProjectMandatoryByID_Project_Result_ProjectMandatoryFragment_Contribution_Files "json:\"files\" graphql:\"files\""
}
type GetProjectMandatoryByID_Project struct {
	Result *ProjectMandatoryFragment "json:\"result\" graphql:\"result\""
}
type GetProjectMandatoryBySlug_Project_Result_ProjectMandatoryFragment_Creator_Profile struct {
	Username *string "json:\"username\" graphql:\"username\""
}
type GetProjectMandatoryBySlug_Project_Result_ProjectMandatoryFragment_Creator struct {
	Profile *GetProjectMandatoryBySlug_Project_Result_ProjectMandatoryFragment_Creator_Profile "json:\"profile\" graphql:\"profile\""
}
type GetProjectMandatoryBySlug_Project_Result_ProjectMandatoryFragment_License struct {
	Abreviation *string "json:\"abreviation\" graphql:\"abreviation\""
}
type GetProjectMandatoryBySlug_Project_Result_ProjectMandatoryFragment_Contribution_Files_File struct {
	Filename string "json:\"filename\" graphql:\"filename\""
}
type GetProjectMandatoryBySlug_Project_Result_ProjectMandatoryFragment_Contribution_Files struct {
	Dirname *string                                                                                    "json:\"dirname\" graphql:\"dirname\""
	File    *GetProjectMandatoryBySlug_Project_Result_ProjectMandatoryFragment_Contribution_Files_File "json:\"file\" graphql:\"file\""
}
type GetProjectMandatoryBySlug_Project_Result_ProjectMandatoryFragment_Contribution struct {
	Version *string                                                                                 "json:\"version\" graphql:\"version\""
	Files   []*GetProjectMandatoryBySlug_Project_Result_ProjectMandatoryFragment_Contribution_Files "json:\"files\" graphql:\"files\""
}
type GetProjectMandatoryBySlug_Project struct {
	Result *ProjectMandatoryFragment "json:\"result\" graphql:\"result\""
}
type GetGroup_Initiative_Result_Members_Edges_Node struct {
	Username *string "json:\"username\" graphql:\"username\""
}
type GetGroup_Initiative_Result_Members_Edges struct {
	Node *GetGroup_Initiative_Result_Members_Edges_Node "json:\"node\" graphql:\"node\""
}
type GetGroup_Initiative_Result_Members struct {
	Edges []*GetGroup_Initiative_Result_Members_Edges "json:\"edges\" graphql:\"edges\""
}
type GetGroup_Initiative_Result struct {
	Slug        *string                             "json:\"slug\" graphql:\"slug\""
	Title       *string                             "json:\"title\" graphql:\"title\""
	Description *string                             "json:\"description\" graphql:\"description\""
	Avatar      *FileFragment                       "json:\"avatar\" graphql:\"avatar\""
	Members     *GetGroup_Initiative_Result_Members "json:\"members\" graphql:\"members\""
}
type GetGroup_Initiative struct {
	Result *GetGroup_Initiative_Result "json:\"result\" graphql:\"result\""
}
type QueryProjects struct {
	Projects *QueryProjects_Projects "json:\"projects\" graphql:\"projects\""
}
type GetProjectFullByID struct {
	Project *GetProjectFullByID_Project "json:\"project\" graphql:\"project\""
}
type GetProjectFullBySlug struct {
	Project *GetProjectFullBySlug_Project "json:\"project\" graphql:\"project\""
}
type GetProjectMandatoryByID struct {
	Project *GetProjectMandatoryByID_Project "json:\"project\" graphql:\"project\""
}
type GetProjectMandatoryBySlug struct {
	Project *GetProjectMandatoryBySlug_Project "json:\"project\" graphql:\"project\""
}
type GetGroup struct {
	Initiative *GetGroup_Initiative "json:\"initiative\" graphql:\"initiative\""
}

const QueryProjectsDocument = `query QueryProjects ($batchSize: Int!, $cursor: String!) {
	projects(first: $batchSize, after: $cursor) {
		result {
			pageInfo {
				... PageInfoFragment
			}
			edges {
				node {
					... ProjectMandatoryFragment
				}
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
	startCursor
	endCursor
}
fragment ProjectMandatoryFragment on Project {
	id
	parentSlug
	slug
	name
	description
	creator {
		profile {
			username
		}
	}
	license {
		abreviation
	}
	contribution {
		version
		files {
			dirname
			file {
				filename
			}
		}
	}
}
`

func (c *Client) QueryProjects(ctx context.Context, batchSize int64, cursor string) (*QueryProjects, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "QueryProjects",
		Query:         QueryProjectsDocument,
		Variables: map[string]interface{}{
			"batchSize": batchSize,
			"cursor":    cursor,
		},
	}

	var resp QueryProjects
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) QueryProjectsWithResponse(ctx context.Context, batchSize int64, cursor string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "QueryProjects",
		Query:         QueryProjectsDocument,
		Variables: map[string]interface{}{
			"batchSize": batchSize,
			"cursor":    cursor,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetProjectFullByIDDocument = `query GetProjectFullByID ($id: ID!) {
	project(id: $id) {
		result {
			... ProjectFullFragment
		}
	}
}
fragment ProjectFullFragment on Project {
	id
	name
	description
	tags {
		name
	}
	lastUpdated
	followersCount
	starCount
	forkCount
	creator {
		id
		profile {
			fullName
			username
			email
			description
			locale
			avatar {
				... FileFragment
			}
		}
	}
	image {
		... FileFragment
	}
	license {
		abreviation
	}
	contributions {
		edges {
			node {
				... ContributionFragment
			}
		}
	}
	contributors {
		edges {
			node {
				fullName
				username
				email
			}
		}
	}
	forkedFrom {
		project {
			parentSlug
			slug
		}
	}
	slug
	parentSlug
	parentContent {
		type
		slug
	}
}
fragment FileFragment on File {
	filename
	path
	mimeType
	url
	permalink
	dateCreated
	lastUpdated
	license
}
fragment ContributionFragment on Contribution {
	title
	dateCreated
	version
	files {
		dirname
		file {
			... FileFragment
		}
	}
}
`

func (c *Client) GetProjectFullByID(ctx context.Context, id string) (*GetProjectFullByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProjectFullByID",
		Query:         GetProjectFullByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetProjectFullByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetProjectFullByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProjectFullByID",
		Query:         GetProjectFullByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetProjectFullBySlugDocument = `query GetProjectFullBySlug ($space: String!, $slug: String!) {
	project(space: $space, slug: $slug) {
		result {
			... ProjectFullFragment
		}
	}
}
fragment ProjectFullFragment on Project {
	id
	name
	description
	tags {
		name
	}
	lastUpdated
	followersCount
	starCount
	forkCount
	creator {
		id
		profile {
			fullName
			username
			email
			description
			locale
			avatar {
				... FileFragment
			}
		}
	}
	image {
		... FileFragment
	}
	license {
		abreviation
	}
	contributions {
		edges {
			node {
				... ContributionFragment
			}
		}
	}
	contributors {
		edges {
			node {
				fullName
				username
				email
			}
		}
	}
	forkedFrom {
		project {
			parentSlug
			slug
		}
	}
	slug
	parentSlug
	parentContent {
		type
		slug
	}
}
fragment FileFragment on File {
	filename
	path
	mimeType
	url
	permalink
	dateCreated
	lastUpdated
	license
}
fragment ContributionFragment on Contribution {
	title
	dateCreated
	version
	files {
		dirname
		file {
			... FileFragment
		}
	}
}
`

func (c *Client) GetProjectFullBySlug(ctx context.Context, space string, slug string) (*GetProjectFullBySlug, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProjectFullBySlug",
		Query:         GetProjectFullBySlugDocument,
		Variables: map[string]interface{}{
			"space": space,
			"slug":  slug,
		},
	}

	var resp GetProjectFullBySlug
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetProjectFullBySlugWithResponse(ctx context.Context, space string, slug string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProjectFullBySlug",
		Query:         GetProjectFullBySlugDocument,
		Variables: map[string]interface{}{
			"space": space,
			"slug":  slug,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetProjectMandatoryByIDDocument = `query GetProjectMandatoryByID ($id: ID!) {
	project(id: $id) {
		result {
			... ProjectMandatoryFragment
		}
	}
}
fragment ProjectMandatoryFragment on Project {
	id
	parentSlug
	slug
	name
	description
	creator {
		profile {
			username
		}
	}
	license {
		abreviation
	}
	contribution {
		version
		files {
			dirname
			file {
				filename
			}
		}
	}
}
`

func (c *Client) GetProjectMandatoryByID(ctx context.Context, id string) (*GetProjectMandatoryByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProjectMandatoryByID",
		Query:         GetProjectMandatoryByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetProjectMandatoryByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetProjectMandatoryByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProjectMandatoryByID",
		Query:         GetProjectMandatoryByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetProjectMandatoryBySlugDocument = `query GetProjectMandatoryBySlug ($space: String!, $slug: String!) {
	project(space: $space, slug: $slug) {
		result {
			... ProjectMandatoryFragment
		}
	}
}
fragment ProjectMandatoryFragment on Project {
	id
	parentSlug
	slug
	name
	description
	creator {
		profile {
			username
		}
	}
	license {
		abreviation
	}
	contribution {
		version
		files {
			dirname
			file {
				filename
			}
		}
	}
}
`

func (c *Client) GetProjectMandatoryBySlug(ctx context.Context, space string, slug string) (*GetProjectMandatoryBySlug, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProjectMandatoryBySlug",
		Query:         GetProjectMandatoryBySlugDocument,
		Variables: map[string]interface{}{
			"space": space,
			"slug":  slug,
		},
	}

	var resp GetProjectMandatoryBySlug
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetProjectMandatoryBySlugWithResponse(ctx context.Context, space string, slug string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProjectMandatoryBySlug",
		Query:         GetProjectMandatoryBySlugDocument,
		Variables: map[string]interface{}{
			"space": space,
			"slug":  slug,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetGroupDocument = `query GetGroup ($slug: String!) {
	initiative(slug: $slug) {
		result {
			slug
			title
			description
			avatar {
				... FileFragment
			}
			members {
				edges {
					node {
						username
					}
				}
			}
		}
	}
}
fragment FileFragment on File {
	filename
	path
	mimeType
	url
	permalink
	dateCreated
	lastUpdated
	license
}
`

func (c *Client) GetGroup(ctx context.Context, slug string) (*GetGroup, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroup",
		Query:         GetGroupDocument,
		Variables: map[string]interface{}{
			"slug": slug,
		},
	}

	var resp GetGroup
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetGroupWithResponse(ctx context.Context, slug string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroup",
		Query:         GetGroupDocument,
		Variables: map[string]interface{}{
			"slug": slug,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

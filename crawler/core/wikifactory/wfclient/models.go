// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package wfclient

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ContentInterface interface {
	IsContentInterface()
}

type Node interface {
	IsNode()
}

type NotificationTarget interface {
	IsNotificationTarget()
}

type Option interface {
	IsOption()
}

type Optionable interface {
	IsOptionable()
}

type Page interface {
	IsPage()
}

type ProductNode interface {
	IsProductNode()
}

type Requirable interface {
	IsRequirable()
}

type Supplier interface {
	IsSupplier()
}

type AcceptInvite struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type AcceptInviteInput struct {
	InviteID       string  `json:"inviteId"`
	ReferrerUserID *string `json:"referrerUserId,omitempty"`
	Token          *string `json:"token,omitempty"`
}

type ActivityConnection struct {
	PageInfo   *PageInfo       `json:"pageInfo,omitempty"`
	Edges      []*ActivityEdge `json:"edges,omitempty"`
	TotalCount *int64          `json:"totalCount,omitempty"`
}

type ActivityContent struct {
	// The ID of the object.
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         int64              `json:"commentsCount"`
	LikesCount            int64              `json:"likesCount"`
	FollowersCount        int64              `json:"followersCount"`
	Score                 float64            `json:"score"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Description           *string            `json:"description,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Title                 *string            `json:"title,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
	Version               *string            `json:"version,omitempty"`
	Origin                *Content           `json:"origin,omitempty"`
}

func (ActivityContent) IsNode() {}

type ActivityEdge struct {
	// The item at the end of the edge
	Node *ActivityFeedLine `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type ActivityFeedLine struct {
	ID      *string          `json:"id,omitempty"`
	Action  *string          `json:"action,omitempty"`
	Date    *time.Time       `json:"date,omitempty"`
	Origin  *ActivityOrigin  `json:"origin,omitempty"`
	Content *ActivityContent `json:"content,omitempty"`
}

type ActivityOrigin struct {
	// The ID of the object.
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         int64              `json:"commentsCount"`
	LikesCount            int64              `json:"likesCount"`
	FollowersCount        int64              `json:"followersCount"`
	Score                 float64            `json:"score"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Description           *string            `json:"description,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Title                 *string            `json:"title,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
}

func (ActivityOrigin) IsNode() {}

type AddPaymentMethodInput struct {
	SpaceSlug   string `json:"spaceSlug"`
	StripeToken string `json:"stripeToken"`
}

type AddPaymentMutation struct {
	UserErrors    []*UserError `json:"userErrors,omitempty"`
	PaymentMethod *CreditCard  `json:"paymentMethod,omitempty"`
}

type AddQuotingPriorityInput struct {
	RequestForQuoteID   string `json:"requestForQuoteId"`
	QuotingPriorityData string `json:"quotingPriorityData"`
}

type Address struct {
	ID       string  `json:"id"`
	Name     string  `json:"name"`
	Address1 string  `json:"address1"`
	Address2 *string `json:"address2,omitempty"`
	City     string  `json:"city"`
	Province string  `json:"province"`
	Country  string  `json:"country"`
	Zip      string  `json:"zip"`
	Phone    *string `json:"phone,omitempty"`
	Company  *string `json:"company,omitempty"`
	Default  bool    `json:"default"`
}

func (Address) IsNode() {}

type Annotation struct {
	ID           string       `json:"id"`
	ContextID    string       `json:"contextId"`
	ResourceID   string       `json:"resourceId"`
	ReferenceID  *string      `json:"referenceId,omitempty"`
	Body         string       `json:"body"`
	CreatedBy    string       `json:"createdBy"`
	Target       *Target      `json:"target,omitempty"`
	Timestamp    string       `json:"timestamp"`
	Camera       *Camera      `json:"camera,omitempty"`
	HoopsVersion *string      `json:"hoopsVersion,omitempty"`
	ImportConfig *string      `json:"importConfig,omitempty"`
	TempKey      *string      `json:"tempKey,omitempty"`
	ViewerState  *ViewerState `json:"viewerState,omitempty"`
}

type ApproveSessionInput struct {
	SessionID string `json:"sessionId"`
}

type AssignRequestForQuoteInput struct {
	RequestForQuoteID string   `json:"requestForQuoteId"`
	SupplierIds       []string `json:"supplierIds,omitempty"`
}

type AutoBillingInvoiceConnection struct {
	PageInfo *PageInfo                 `json:"pageInfo,omitempty"`
	Edges    []*AutoBillingInvoiceEdge `json:"edges,omitempty"`
}

type AutoBillingInvoiceEdge struct {
	// The item at the end of the edge
	Node *BillingInvoice `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type AutoGroupConnection struct {
	PageInfo *PageInfo        `json:"pageInfo,omitempty"`
	Edges    []*AutoGroupEdge `json:"edges,omitempty"`
}

type AutoGroupEdge struct {
	// The item at the end of the edge
	Node *Group `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type AutoGroupInviteConnection struct {
	PageInfo *PageInfo              `json:"pageInfo,omitempty"`
	Edges    []*AutoGroupInviteEdge `json:"edges,omitempty"`
}

type AutoGroupInviteEdge struct {
	// The item at the end of the edge
	Node *GroupInvite `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type AutoInviteLinkConnection struct {
	PageInfo *PageInfo             `json:"pageInfo,omitempty"`
	Edges    []*AutoInviteLinkEdge `json:"edges,omitempty"`
}

type AutoInviteLinkEdge struct {
	// The item at the end of the edge
	Node *InviteLink `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type BanProfile struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
	Management *string      `json:"management,omitempty"`
}

type BanProfileInput struct {
	Username string `json:"username"`
	Banned   bool   `json:"banned"`
}

type BillingAddSeatsInput struct {
	SubscriptionID string `json:"subscriptionId"`
	AddNSeats      int64  `json:"addNSeats"`
}

type BillingAddSeatsMutation struct {
	UserErrors   []*UserError         `json:"userErrors,omitempty"`
	Subscription *BillingSubscription `json:"subscription,omitempty"`
}

type BillingAddress struct {
	Name       *string `json:"name,omitempty"`
	Email      *string `json:"email,omitempty"`
	Phone      *string `json:"phone,omitempty"`
	City       *string `json:"city,omitempty"`
	Country    *string `json:"country,omitempty"`
	Line1      *string `json:"line1,omitempty"`
	Line2      *string `json:"line2,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
	State      *string `json:"state,omitempty"`
}

type BillingCancelSubscriptionInput struct {
	SubscriptionID string `json:"subscriptionId"`
}

type BillingCancelSubscriptionMutation struct {
	UserErrors   []*UserError         `json:"userErrors,omitempty"`
	Subscription *BillingSubscription `json:"subscription,omitempty"`
}

type BillingInvoice struct {
	// The ID of the object.
	ID             string               `json:"id"`
	SubscriptionID *int64               `json:"subscriptionId,omitempty"`
	Status         *string              `json:"status,omitempty"`
	PeriodStart    *time.Time           `json:"periodStart,omitempty"`
	PeriodEnd      *time.Time           `json:"periodEnd,omitempty"`
	Number         string               `json:"number"`
	Amount         int64                `json:"amount"`
	DownloadURL    *string              `json:"downloadUrl,omitempty"`
	PaymentMethod  *string              `json:"paymentMethod,omitempty"`
	Subscription   *BillingSubscription `json:"subscription,omitempty"`
}

func (BillingInvoice) IsNode() {}

type BillingPlan struct {
	// The ID of the object.
	ID            string   `json:"id"`
	ProductID     *int64   `json:"productId,omitempty"`
	Name          string   `json:"name"`
	Type          Plantype `json:"type"`
	Currency      string   `json:"currency"`
	PerSeatAmount *int64   `json:"perSeatAmount,omitempty"`
	InitialAmount *int64   `json:"initialAmount,omitempty"`
}

func (BillingPlan) IsNode() {}

type BillingRemoveSeatsInput struct {
	SubscriptionID string `json:"subscriptionId"`
	RemoveNSeats   int64  `json:"removeNSeats"`
}

type BillingRemoveSeatsMutation struct {
	UserErrors   []*UserError         `json:"userErrors,omitempty"`
	Subscription *BillingSubscription `json:"subscription,omitempty"`
}

type BillingSubscribeInput struct {
	SpaceSlug      string  `json:"spaceSlug"`
	CardID         *string `json:"cardId,omitempty"`
	CountryCode    string  `json:"countryCode"`
	Coupon         *string `json:"coupon,omitempty"`
	TaxID          *string `json:"taxId,omitempty"`
	ExtraSeats     *int64  `json:"extraSeats,omitempty"`
	StartFreeTrial *bool   `json:"startFreeTrial,omitempty"`
}

type BillingSubscribeMutation struct {
	UserErrors   []*UserError         `json:"userErrors,omitempty"`
	Subscription *BillingSubscription `json:"subscription,omitempty"`
}

type BillingSubscription struct {
	// The ID of the object.
	ID                 string                        `json:"id"`
	PlanID             *int64                        `json:"planId,omitempty"`
	SpaceID            int64                         `json:"spaceId"`
	Status             Subscriptionstatus            `json:"status"`
	CancelAtPeriodEnd  bool                          `json:"cancelAtPeriodEnd"`
	CurrentPeriodStart *time.Time                    `json:"currentPeriodStart,omitempty"`
	CurrentPeriodEnd   *time.Time                    `json:"currentPeriodEnd,omitempty"`
	NextAmount         *int64                        `json:"nextAmount,omitempty"`
	TrialEnd           *time.Time                    `json:"trialEnd,omitempty"`
	PurchasedSeats     int64                         `json:"purchasedSeats"`
	SeatsIncluded      *int64                        `json:"SeatsIncluded,omitempty"`
	Plan               *BillingPlan                  `json:"plan,omitempty"`
	Invoices           *AutoBillingInvoiceConnection `json:"invoices,omitempty"`
	LastInvoice        *BillingInvoice               `json:"lastInvoice,omitempty"`
	Seats              *SeatsUsage                   `json:"seats,omitempty"`
	AddSeatsPreview    *SubscriptionPreview          `json:"addSeatsPreview,omitempty"`
	RemoveSeatsPreview *SubscriptionPreview          `json:"removeSeatsPreview,omitempty"`
	ScaSecret          *string                       `json:"scaSecret,omitempty"`
}

func (BillingSubscription) IsNode() {}

type Body struct {
	ID      string         `json:"id"`
	CadID   string         `json:"cadId"`
	SrcFile *FederatedFile `json:"srcFile,omitempty"`
	Status  string         `json:"status"`
	Error   *string        `json:"error,omitempty"`
}

func (Body) IsNode() {}

type Build struct {
	ID              string           `json:"id"`
	Material        *Material        `json:"material,omitempty"`
	Process         *Process         `json:"process,omitempty"`
	Previous        *Build           `json:"previous,omitempty"`
	Values          []*BuildValue    `json:"values,omitempty"`
	SupportingFiles []*FederatedFile `json:"supportingFiles,omitempty"`
	File            *FederatedFile   `json:"file,omitempty"`
	Body            *Body            `json:"body,omitempty"`
}

type BuildValue struct {
	Of          Option   `json:"of,omitempty"`
	ValueFloat  *float64 `json:"valueFloat,omitempty"`
	ValueInt    *int64   `json:"valueInt,omitempty"`
	ValueString *string  `json:"valueString,omitempty"`
	ValueBool   *bool    `json:"valueBool,omitempty"`
}

type BuildWithQuantity struct {
	Quantity int64  `json:"quantity"`
	BuildID  string `json:"buildId"`
}

type CadConversion struct {
	ID        string         `json:"id"`
	SrcFileID string         `json:"srcFileId"`
	CadID     *string        `json:"cadId,omitempty"`
	Status    string         `json:"status"`
	Error     *string        `json:"error,omitempty"`
	Format    string         `json:"format"`
	URL       *string        `json:"url,omitempty"`
	File      *FederatedFile `json:"file,omitempty"`
}

func (CadConversion) IsNode() {}

type CadConvertInput struct {
	FileID string `json:"fileId"`
	Format string `json:"format"`
	Retry  *bool  `json:"retry,omitempty"`
}

type Camera struct {
	Up         *Vector `json:"up,omitempty"`
	Right      *Vector `json:"right,omitempty"`
	Position   *Vector `json:"position,omitempty"`
	Lookat     *Vector `json:"lookat,omitempty"`
	TargetType *int64  `json:"targetType,omitempty"`
	CadID      *string `json:"cadID,omitempty"`
}

type CameraInput struct {
	Up         *VectorInput `json:"up,omitempty"`
	Right      *VectorInput `json:"right,omitempty"`
	Position   *VectorInput `json:"position,omitempty"`
	Lookat     *VectorInput `json:"lookat,omitempty"`
	TargetType *int64       `json:"targetType,omitempty"`
	CadID      *string      `json:"cadId,omitempty"`
}

type CancelImportProjectInput struct {
	ProjectID string `json:"projectId"`
}

type CancelImportProjectMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type CancelOrderInput struct {
	OrderID string `json:"orderId"`
}

type CardInformation struct {
	Name     *string `json:"name,omitempty"`
	Brand    *string `json:"brand,omitempty"`
	Last4    *string `json:"last4,omitempty"`
	ExpMonth *int64  `json:"expMonth,omitempty"`
	ExpYear  *int64  `json:"expYear,omitempty"`
	Country  *string `json:"country,omitempty"`
}

type Category struct {
	// The ID of the object.
	ID                  string            `json:"id"`
	Title               string            `json:"title"`
	Description         string            `json:"description"`
	Color               *string           `json:"color,omitempty"`
	ForumID             float64           `json:"forumId"`
	ThreadsCount        *int64            `json:"threadsCount,omitempty"`
	ThreadsCountPublic  int64             `json:"threadsCountPublic"`
	Forum               *Forum            `json:"forum,omitempty"`
	Pinned              []*Thread         `json:"pinned,omitempty"`
	Threads             *ThreadConnection `json:"threads,omitempty"`
	URLID               *string           `json:"urlId,omitempty"`
	CanUpdate           *bool             `json:"canUpdate,omitempty"`
	CanDelete           *bool             `json:"canDelete,omitempty"`
	PrivateThreadsCount *int64            `json:"privateThreadsCount,omitempty"`
	LastActiveThread    *Thread           `json:"lastActiveThread,omitempty"`
}

func (Category) IsNode() {}

type CategoryInput struct {
	ForumID     string  `json:"forumId"`
	Title       string  `json:"title"`
	Description string  `json:"description"`
	Color       *string `json:"color,omitempty"`
}

type CategoryMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Category   *Category    `json:"category,omitempty"`
}

type Certificate struct {
	ID   string         `json:"id"`
	Name Certification  `json:"name"`
	File *FederatedFile `json:"file,omitempty"`
}

func (Certificate) IsNode() {}

type CertificateInput struct {
	Name   Certification `json:"name"`
	FileID *string       `json:"fileId,omitempty"`
}

type ChangeEmailPreferences struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
	Msg        *string      `json:"msg,omitempty"`
}

type ChangeEmailPreferencesInput struct {
	ID      string `json:"id"`
	Enabled bool   `json:"enabled"`
}

type ChangeLanguagePreferences struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
	Msg        *string      `json:"msg,omitempty"`
}

type ChangeLanguagePreferencesInput struct {
	Locale *string `json:"locale,omitempty"`
}

type ChangePassword struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
	Msg        *string      `json:"msg,omitempty"`
}

type ChangePasswordInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewPassword     *string `json:"newPassword,omitempty"`
}

type Channel struct {
	// The ID of the object.
	ID                    string                `json:"id"`
	Type                  *string               `json:"type,omitempty"`
	Slug                  *string               `json:"slug,omitempty"`
	CreatedInRegion       *string               `json:"createdInRegion,omitempty"`
	DateCreated           *time.Time            `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time            `json:"lastUpdated,omitempty"`
	Whitelabel            *string               `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool                 `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time            `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time             `json:"lastActivityAt"`
	CommentsCount         int64                 `json:"commentsCount"`
	LikesCount            int64                 `json:"likesCount"`
	FollowersCount        int64                 `json:"followersCount"`
	Score                 float64               `json:"score"`
	PageviewsCount        int64                 `json:"pageviewsCount"`
	PublicRead            bool                  `json:"publicRead"`
	RegisteredRead        bool                  `json:"registeredRead"`
	Name                  string                `json:"name"`
	Description           *string               `json:"description,omitempty"`
	Ctas                  *string               `json:"ctas,omitempty"`
	Configuration         *string               `json:"configuration,omitempty"`
	TaggedCount           *int64                `json:"taggedCount,omitempty"`
	FeaturedIn            *string               `json:"featuredIn,omitempty"`
	Avatar                *File                 `json:"avatar,omitempty"`
	Story                 *Story                `json:"story,omitempty"`
	Creator               *User                 `json:"creator,omitempty"`
	Followers             *ProfileConnection    `json:"followers,omitempty"`
	Tags                  []*Tag                `json:"tags,omitempty"`
	Comments              *CommentConnection    `json:"comments,omitempty"`
	SocialAccounts        []*Social             `json:"socialAccounts,omitempty"`
	Forum                 *Forum                `json:"forum,omitempty"`
	FollowingCount        *int64                `json:"followingCount,omitempty"`
	CanUpdate             *bool                 `json:"canUpdate,omitempty"`
	CanDelete             *bool                 `json:"canDelete,omitempty"`
	ParentSlug            *string               `json:"parentSlug,omitempty"`
	IsPrivate             *bool                 `json:"isPrivate,omitempty"`
	Content               *Content              `json:"content,omitempty"`
	ParentContent         *Content              `json:"parentContent,omitempty"`
	InSpace               *Space                `json:"inSpace,omitempty"`
	ImageFallbackChar     *string               `json:"imageFallbackChar,omitempty"`
	Title                 *string               `json:"title,omitempty"`
	Commenters            []*Profile            `json:"commenters,omitempty"`
	PageViews             *int64                `json:"pageViews,omitempty"`
	Moderators            []*Profile            `json:"moderators,omitempty"`
	Posts                 *PostConnection       `json:"posts,omitempty"`
	Projects              *ProjectConnection    `json:"projects,omitempty"`
	Stories               *StoryConnection      `json:"stories,omitempty"`
	Threads               *ThreadConnection     `json:"threads,omitempty"`
	Collections           *CollectionConnection `json:"collections,omitempty"`
	HasModerators         *bool                 `json:"hasModerators,omitempty"`
}

func (Channel) IsNode() {}

type ChannelConnection struct {
	PageInfo   *PageInfo      `json:"pageInfo,omitempty"`
	Edges      []*ChannelEdge `json:"edges,omitempty"`
	TotalCount *int64         `json:"totalCount,omitempty"`
}

type ChannelConnectionErrorHandler struct {
	UserErrors []*UserError       `json:"userErrors,omitempty"`
	Result     *ChannelConnection `json:"result,omitempty"`
}

type ChannelEdge struct {
	// The item at the end of the edge
	Node *Channel `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type CloseRequestForQuoteInput struct {
	RequestForQuoteID string   `json:"requestForQuoteId"`
	KeepSessionIds    []string `json:"keepSessionIds,omitempty"`
}

type CloseSessionInput struct {
	SessionID string `json:"sessionId"`
}

type Collection struct {
	// The ID of the object.
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         int64              `json:"commentsCount"`
	LikesCount            int64              `json:"likesCount"`
	FollowersCount        int64              `json:"followersCount"`
	Score                 float64            `json:"score"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	ContentPtrID          string             `json:"contentPtrId"`
	Name                  *string            `json:"name,omitempty"`
	Description           *string            `json:"description,omitempty"`
	ProjectsCount         *int64             `json:"projectsCount,omitempty"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Space                 *Space             `json:"space,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Projects              *ProjectConnection `json:"projects,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Title                 *string            `json:"title,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
	Images                []*File            `json:"images,omitempty"`
	CreatorProfile        *Profile           `json:"creatorProfile,omitempty"`
}

func (Collection) IsNode() {}

type CollectionConnection struct {
	PageInfo   *PageInfo         `json:"pageInfo,omitempty"`
	Edges      []*CollectionEdge `json:"edges,omitempty"`
	TotalCount *int64            `json:"totalCount,omitempty"`
}

type CollectionConnectionErrorHandler struct {
	UserErrors []*UserError          `json:"userErrors,omitempty"`
	Result     *CollectionConnection `json:"result,omitempty"`
}

type CollectionEdge struct {
	// The item at the end of the edge
	Node *Collection `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type CollectionInput struct {
	ID          *string                   `json:"id,omitempty"`
	Deleted     *bool                     `json:"deleted,omitempty"`
	Name        *string                   `json:"name,omitempty"`
	Description *string                   `json:"description,omitempty"`
	Tags        []*TagInput               `json:"tags,omitempty"`
	Projects    []*CollectionProjectInput `json:"projects,omitempty"`
}

type CollectionMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Collection *Collection  `json:"collection,omitempty"`
	Project    *Project     `json:"project,omitempty"`
}

type CollectionProjectInput struct {
	ID        *string `json:"id,omitempty"`
	Deleted   *bool   `json:"deleted,omitempty"`
	ProjectID string  `json:"projectId"`
}

type Comment struct {
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         *int64             `json:"commentsCount,omitempty"`
	LikesCount            *int64             `json:"likesCount,omitempty"`
	FollowersCount        *int64             `json:"followersCount,omitempty"`
	Score                 float64            `json:"score"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	ContentPtrID          string             `json:"contentPtrId"`
	Body                  string             `json:"body"`
	OriginID              int64              `json:"originId"`
	ReplytoID             *int64             `json:"replytoId,omitempty"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Origin                ContentInterface   `json:"origin,omitempty"`
	Replyto               *Comment           `json:"replyto,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Space                 *Space             `json:"space,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	ContentType           *string            `json:"contentType,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Description           *string            `json:"description,omitempty"`
	Snippet               *string            `json:"snippet,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Title                 *string            `json:"title,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
	CreatorProfile        *Profile           `json:"creatorProfile,omitempty"`
}

func (Comment) IsNode()               {}
func (Comment) IsContentInterface()   {}
func (Comment) IsNotificationTarget() {}

type CommentConnection struct {
	PageInfo   *PageInfo      `json:"pageInfo,omitempty"`
	Edges      []*CommentEdge `json:"edges,omitempty"`
	TotalCount *int64         `json:"totalCount,omitempty"`
}

type CommentEdge struct {
	// The item at the end of the edge
	Node *Comment `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type CommentInput struct {
	ID      *string `json:"id,omitempty"`
	Deleted *bool   `json:"deleted,omitempty"`
	Body    *string `json:"body,omitempty"`
	Origin  *string `json:"origin,omitempty"`
	Replyto *string `json:"replyto,omitempty"`
}

type CommentMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Comment    *Comment     `json:"comment,omitempty"`
}

type CommitInput struct {
	ProjectID           *string                    `json:"projectId,omitempty"`
	Title               *string                    `json:"title,omitempty"`
	Description         *string                    `json:"description,omitempty"`
	ConflictsResolution []*ConflictResolutionInput `json:"conflictsResolution,omitempty"`
	ConflictsParent     *string                    `json:"conflictsParent,omitempty"`
}

type CommitMutation struct {
	UserErrors      []*UserError `json:"userErrors,omitempty"`
	Project         *Project     `json:"project,omitempty"`
	Conflicts       []*Conflict  `json:"conflicts,omitempty"`
	ConflictsParent *string      `json:"conflictsParent,omitempty"`
}

type ConfirmOrderInput struct {
	OrderID string `json:"orderId"`
}

type ConfirmProfile struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Profile    *Profile     `json:"profile,omitempty"`
}

type ConfirmProfileInput struct {
	Username   *string `json:"username,omitempty"`
	FullName   *string `json:"fullName,omitempty"`
	Bio        *string `json:"bio,omitempty"`
	Avatar     *string `json:"avatar,omitempty"`
	IntentID   *string `json:"intentId,omitempty"`
	UserTypeID *string `json:"userTypeId,omitempty"`
	Email      *string `json:"email,omitempty"`
}

type Confirmation struct {
	ID        string     `json:"id"`
	Customer  *string    `json:"customer,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

type Conflict struct {
	ID                 *string       `json:"id,omitempty"`
	Path               *string       `json:"path,omitempty"`
	Local              *File         `json:"local,omitempty"`
	LocalStatus        *Status       `json:"localStatus,omitempty"`
	Remote             *File         `json:"remote,omitempty"`
	RemoteContribution *Contribution `json:"remoteContribution,omitempty"`
	RemoteStatus       *Status       `json:"remoteStatus,omitempty"`
}

type ConflictResolutionInput struct {
	Path         *string `json:"path,omitempty"`
	PickedFileID *string `json:"pickedFileId,omitempty"`
}

type Content struct {
	// The ID of the object.
	ID                string             `json:"id"`
	CanUpdate         *bool              `json:"canUpdate,omitempty"`
	CanDelete         *bool              `json:"canDelete,omitempty"`
	Type              *string            `json:"type,omitempty"`
	Slug              *string            `json:"slug,omitempty"`
	ParentSlug        *string            `json:"parentSlug,omitempty"`
	IsPrivate         *bool              `json:"isPrivate,omitempty"`
	Description       *string            `json:"description,omitempty"`
	Creator           *User              `json:"creator,omitempty"`
	DateCreated       *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated       *time.Time         `json:"lastUpdated,omitempty"`
	Content           *Content           `json:"content,omitempty"`
	ParentContent     *Content           `json:"parentContent,omitempty"`
	InSpace           *Space             `json:"inSpace,omitempty"`
	Avatar            *File              `json:"avatar,omitempty"`
	ImageFallbackChar *string            `json:"imageFallbackChar,omitempty"`
	Title             *string            `json:"title,omitempty"`
	Tags              []*Tag             `json:"tags,omitempty"`
	Comments          *CommentConnection `json:"comments,omitempty"`
	Commenters        []*Profile         `json:"commenters,omitempty"`
	PageViews         *int64             `json:"pageViews,omitempty"`
	Followers         *ProfileConnection `json:"followers,omitempty"`
	LikesCount        *int64             `json:"likesCount,omitempty"`
	FollowersCount    *int64             `json:"followersCount,omitempty"`
	CommentsCount     *int64             `json:"commentsCount,omitempty"`
	IsLiked           *bool              `json:"isLiked,omitempty"`
	Version           *string            `json:"version,omitempty"`
	Whitelabel        *string            `json:"whitelabel,omitempty"`
	IsFollowed        *bool              `json:"isFollowed,omitempty"`
}

func (Content) IsNode() {}

type Context struct {
	// The ID of the object.
	ID        string   `json:"id"`
	Parent    *Project `json:"parent,omitempty"`
	ParentObj *Project `json:"parentObj,omitempty"`
}

func (Context) IsNode() {}

type ContribFile struct {
	// The ID of the object.
	ID           string        `json:"id"`
	File         *File         `json:"file,omitempty"`
	Dirname      *string       `json:"dirname,omitempty"`
	Filename     *string       `json:"filename,omitempty"`
	IsFolder     *bool         `json:"isFolder,omitempty"`
	Contribution *Contribution `json:"contribution,omitempty"`
	Origin       *Contribution `json:"origin,omitempty"`
	LastUpdated  *string       `json:"lastUpdated,omitempty"`
}

func (ContribFile) IsNode() {}

type ContribOp struct {
	// The ID of the object.
	ID      string        `json:"id"`
	File    *File         `json:"file,omitempty"`
	OldFile *File         `json:"oldFile,omitempty"`
	Path    *string       `json:"path,omitempty"`
	OldPath *string       `json:"oldPath,omitempty"`
	OpType  *string       `json:"opType,omitempty"`
	Origin  *Contribution `json:"origin,omitempty"`
}

func (ContribOp) IsNode() {}

type Contribution struct {
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         *int64             `json:"commentsCount,omitempty"`
	LikesCount            *int64             `json:"likesCount,omitempty"`
	FollowersCount        *int64             `json:"followersCount,omitempty"`
	Score                 float64            `json:"score"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	ContentPtrID          string             `json:"contentPtrId"`
	ProjectID             int64              `json:"projectId"`
	ParentID              *int64             `json:"parentId,omitempty"`
	Status                *string            `json:"status,omitempty"`
	Title                 *string            `json:"title,omitempty"`
	Description           *string            `json:"description,omitempty"`
	Version               *string            `json:"version,omitempty"`
	OldVersion            *int64             `json:"oldVersion,omitempty"`
	ZipArchiveGeneratedID *int64             `json:"zipArchiveGeneratedId,omitempty"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Project               *Project           `json:"project,omitempty"`
	Children              []*Contribution    `json:"children,omitempty"`
	Parent                *Contribution      `json:"parent,omitempty"`
	ZipArchiveGenerated   *bool              `json:"zipArchiveGenerated,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Space                 *Space             `json:"space,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	ContentType           *string            `json:"contentType,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Snippet               *string            `json:"snippet,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
	Operations            []*ContribOp       `json:"operations,omitempty"`
	ZipArchiveURL         *string            `json:"zipArchiveUrl,omitempty"`
	CreatorProfile        *Profile           `json:"creatorProfile,omitempty"`
	FilesCount            *int64             `json:"filesCount,omitempty"`
	Files                 []*ContribFile     `json:"files,omitempty"`
	ContribFile           *ContribFile       `json:"contribFile,omitempty"`
}

func (Contribution) IsNode()               {}
func (Contribution) IsContentInterface()   {}
func (Contribution) IsNotificationTarget() {}

type ContributionConnection struct {
	PageInfo   *PageInfo           `json:"pageInfo,omitempty"`
	Edges      []*ContributionEdge `json:"edges,omitempty"`
	TotalCount *int64              `json:"totalCount,omitempty"`
}

type ContributionEdge struct {
	// The item at the end of the edge
	Node *Contribution `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type Conversation struct {
	ID              string           `json:"id"`
	Type            ConversationType `json:"type"`
	ContextID       string           `json:"contextId"`
	ResourceID      *string          `json:"resourceId,omitempty"`
	Reference       Node             `json:"reference,omitempty"`
	ContextContent  Node             `json:"contextContent,omitempty"`
	URI             string           `json:"uri"`
	Messages        *MessagePage     `json:"messages,omitempty"`
	UnreadCount     int64            `json:"unreadCount"`
	Space           *Space           `json:"space,omitempty"`
	LastMessage     *Message         `json:"lastMessage,omitempty"`
	LastReadMessage *Message         `json:"lastReadMessage,omitempty"`
	LastUpdatedAt   *time.Time       `json:"lastUpdatedAt,omitempty"`
}

func (Conversation) IsNode() {}

type ConversationPage struct {
	Nodes       []*Conversation `json:"nodes,omitempty"`
	Total       int64           `json:"total"`
	TotalUnread int64           `json:"totalUnread"`
}

func (ConversationPage) IsPage() {}

type ConversionInput struct {
	OriginalFileID  string  `json:"originalFileId"`
	ConversionType  string  `json:"conversionType"`
	JSONInfo        *string `json:"jsonInfo,omitempty"`
	ConvertedFileID *string `json:"convertedFileId,omitempty"`
	ViewerSemver    string  `json:"viewerSemver"`
}

type ConversionMutation struct {
	UserErrors []*UserError    `json:"userErrors,omitempty"`
	Conversion *FileConversion `json:"conversion,omitempty"`
}

type CreateAddressInput struct {
	Name     string  `json:"name"`
	Address1 string  `json:"address1"`
	Address2 *string `json:"address2,omitempty"`
	City     string  `json:"city"`
	Province string  `json:"province"`
	Country  string  `json:"country"`
	Zip      string  `json:"zip"`
	Company  *string `json:"company,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	SpaceID  *string `json:"spaceId,omitempty"`
	Default  *bool   `json:"default,omitempty"`
}

type CreateAnnotationInput struct {
	ContextID    string                 `json:"contextId"`
	ResourceID   string                 `json:"resourceId"`
	ReferenceID  *string                `json:"referenceId,omitempty"`
	Body         string                 `json:"body"`
	Target       *TargetInput           `json:"target,omitempty"`
	Camera       *CameraInput           `json:"camera,omitempty"`
	HoopsVersion *string                `json:"hoopsVersion,omitempty"`
	ImportConfig *string                `json:"importConfig,omitempty"`
	TempKey      *string                `json:"tempKey,omitempty"`
	ViewerState  map[string]interface{} `json:"viewerState,omitempty"`
}

type CreateBuildInput struct {
	FileID            string                   `json:"fileId"`
	MaterialID        string                   `json:"materialId"`
	ProcessID         string                   `json:"processId"`
	BuildValueInputs  []*CreateBuildValueInput `json:"buildValueInputs,omitempty"`
	SupportingFileIds []string                 `json:"supportingFileIds,omitempty"`
}

type CreateBuildValueInput struct {
	OptionID    string   `json:"optionId"`
	ValueFloat  *float64 `json:"valueFloat,omitempty"`
	ValueInt    *int64   `json:"valueInt,omitempty"`
	ValueString *string  `json:"valueString,omitempty"`
	ValueBool   *bool    `json:"valueBool,omitempty"`
}

type CreateCheckoutInput struct {
	QuoteID string `json:"quoteId"`
}

type CreateFileRequirementInput struct {
	ForID       string          `json:"forId"`
	Type        RequirementType `json:"type"`
	Formats     []string        `json:"formats,omitempty"`
	Operator    *Operator       `json:"operator,omitempty"`
	ValueInt    *int64          `json:"valueInt,omitempty"`
	ValueFloat  *float64        `json:"valueFloat,omitempty"`
	ValueString *string         `json:"valueString,omitempty"`
	ValueBool   *bool           `json:"valueBool,omitempty"`
}

type CreateIntermediatorInput struct {
	EnquiryEmail string              `json:"enquiryEmail"`
	InitiativeID *string             `json:"initiativeId,omitempty"`
	SpaceID      *string             `json:"spaceId,omitempty"`
	Address      *CreateAddressInput `json:"address,omitempty"`
}

type CreateInviteLink struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	InviteLink *InviteLink  `json:"inviteLink,omitempty"`
}

type CreateInviteLinkInput struct {
	SpaceSlug     string  `json:"spaceSlug"`
	Slug          *string `json:"slug,omitempty"`
	ExpiresInDays *int64  `json:"expiresInDays,omitempty"`
}

type CreateJobSpecInput struct {
	Build           *CreateBuildInput `json:"build,omitempty"`
	Quantity        int64             `json:"quantity"`
	ShippingAddress string            `json:"shippingAddress"`
	LeadTime        int64             `json:"leadTime"`
}

type CreateManufacturerInput struct {
	EnquiryEmail string              `json:"enquiryEmail"`
	InitiativeID *string             `json:"initiativeId,omitempty"`
	SpaceID      *string             `json:"spaceId,omitempty"`
	Address      *CreateAddressInput `json:"address,omitempty"`
	ShipsTo      []string            `json:"shipsTo,omitempty"`
	Telephone    string              `json:"telephone"`
	FoundingYear int64               `json:"foundingYear"`
	Industries   []string            `json:"industries,omitempty"`
	NumEmployees *int64              `json:"numEmployees,omitempty"`
	NumMachines  *int64              `json:"numMachines,omitempty"`
	LeadTime     *string             `json:"leadTime,omitempty"`
	FileFormats  []string            `json:"fileFormats,omitempty"`
	CaseStudies  []string            `json:"caseStudies,omitempty"`
	CompanyType  []string            `json:"companyType,omitempty"`
}

type CreateManufacturerProfileInput struct {
	EnquiryEmail string `json:"enquiryEmail"`
	CompanyName  string `json:"companyName"`
}

type CreateMaterialInput struct {
	Name         string  `json:"name"`
	ParentID     *string `json:"parentId,omitempty"`
	IsSelectable *bool   `json:"isSelectable,omitempty"`
}

type CreateMaterialsInput struct {
	MaterialInputs []*MaterialInput `json:"materialInputs,omitempty"`
}

type CreateMessageInput struct {
	Body        string  `json:"body"`
	ContextID   string  `json:"contextId"`
	ReferenceID *string `json:"referenceId,omitempty"`
	ResourceID  *string `json:"resourceId,omitempty"`
	TempKey     *string `json:"tempKey,omitempty"`
}

type CreateMinMaxOptionInput struct {
	Name      string          `json:"name"`
	Type      MinMaxType      `json:"type"`
	ForID     string          `json:"forId"`
	ValueType OptionValueType `json:"valueType"`
	Step      float64         `json:"step"`
	Required  *bool           `json:"required,omitempty"`
	Unit      *string         `json:"unit,omitempty"`
	NilLabel  *string         `json:"nilLabel,omitempty"`
	Prefix    *string         `json:"prefix,omitempty"`
}

type CreateOptionInstancesInput struct {
	ManufacturerID string    `json:"manufacturerId"`
	OptionID       string    `json:"optionId"`
	ProcessID      *string   `json:"processId,omitempty"`
	MaterialIds    []string  `json:"materialIds,omitempty"`
	ValueInts      []int64   `json:"valueInts,omitempty"`
	ValueFloats    []float64 `json:"valueFloats,omitempty"`
	ValueStrings   []string  `json:"valueStrings,omitempty"`
	ValueBools     []bool    `json:"valueBools,omitempty"`
}

type CreateProcessInput struct {
	Name         string  `json:"name"`
	ParentID     *string `json:"parentId,omitempty"`
	IsSelectable *bool   `json:"isSelectable,omitempty"`
}

type CreateProcessesInput struct {
	ProcessInputs []*ProcessInput `json:"processInputs,omitempty"`
}

type CreateProductBuildInput struct {
	AssemblyTree *CreateProductItemInput `json:"assemblyTree,omitempty"`
	SpaceID      string                  `json:"spaceId"`
	Name         string                  `json:"name"`
	Tag          *string                 `json:"tag,omitempty"`
}

type CreateProductItemInput struct {
	Quantity    int64                     `json:"quantity"`
	BuildID     *string                   `json:"buildId,omitempty"`
	CreateBuild *CreateBuildInput         `json:"createBuild,omitempty"`
	FileID      *string                   `json:"fileId,omitempty"`
	CadID       *string                   `json:"cadId,omitempty"`
	Children    []*CreateProductItemInput `json:"children,omitempty"`
	Transform   []float64                 `json:"transform,omitempty"`
}

type CreateQuoteInput struct {
	FromID      string                    `json:"fromId"`
	Cost        int64                     `json:"cost"`
	Currency    string                    `json:"currency"`
	Shipping    *CreateShippingQuoteInput `json:"shipping,omitempty"`
	NewJobSpec  *UpdateJobSpecInput       `json:"newJobSpec,omitempty"`
	SupplierID  *string                   `json:"supplierId,omitempty"`
	ValidUntil  *time.Time                `json:"validUntil,omitempty"`
	IsEstimated *bool                     `json:"isEstimated,omitempty"`
	Notes       *string                   `json:"notes,omitempty"`
}

type CreateReleaseInput struct {
	Tag            string `json:"tag"`
	ProductBuildID string `json:"productBuildId"`
}

type CreateRequestForQuotesInput struct {
	JobSpec            *CreateJobSpecInput `json:"jobSpec,omitempty"`
	QuotesNeededBy     *time.Time          `json:"quotesNeededBy,omitempty"`
	EstimatedAwardDate *time.Time          `json:"estimatedAwardDate,omitempty"`
}

type CreateSelectionOptionInput struct {
	Name      string          `json:"name"`
	ForID     string          `json:"forId"`
	ValueType OptionValueType `json:"valueType"`
	Order     *string         `json:"order,omitempty"`
	NilLabel  *string         `json:"nilLabel,omitempty"`
	Required  *bool           `json:"required,omitempty"`
	Unit      *string         `json:"unit,omitempty"`
	Prefix    *string         `json:"prefix,omitempty"`
}

type CreateServiceInstancesInput struct {
	ProcessID      string   `json:"processId"`
	MaterialIds    []string `json:"materialIds,omitempty"`
	ManufacturerID string   `json:"manufacturerId"`
}

type CreateSharedFileInput struct {
	FileID          string `json:"fileId"`
	TargetSpaceSlug string `json:"targetSpaceSlug"`
	Private         *bool  `json:"private,omitempty"`
}

type CreateSharedFileMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	SharedFile *SharedFile  `json:"sharedFile,omitempty"`
}

type CreateShippingQuoteInput struct {
	Cost           int64   `json:"cost"`
	DeliveryTime   int64   `json:"deliveryTime"`
	Provider       *string `json:"provider,omitempty"`
	IsTaxInclusive *bool   `json:"isTaxInclusive,omitempty"`
}

type CreditCard struct {
	StripeID *string `json:"stripeId,omitempty"`
	// The ID of the object.
	ID         string  `json:"id"`
	SpaceID    int64   `json:"spaceId"`
	Brand      string  `json:"brand"`
	Country    *string `json:"country,omitempty"`
	Name       *string `json:"name,omitempty"`
	ExpMonth   int64   `json:"expMonth"`
	ExpYear    int64   `json:"expYear"`
	LastDigits string  `json:"lastDigits"`
	IsDefault  bool    `json:"isDefault"`
}

func (CreditCard) IsNode() {}

type DeleteAddressInput struct {
	AddressID string `json:"addressId"`
}

type DeleteAnnotationInput struct {
	AnnotationID string `json:"annotationId"`
}

type DeleteInvite struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Group      *Group       `json:"group,omitempty"`
}

type DeleteInviteInput struct {
	InviteID string `json:"inviteId"`
}

type DeleteInviteLink struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type DeleteInviteLinkInput struct {
	InviteLinkID string `json:"inviteLinkId"`
}

type DeleteMaterialInput struct {
	ID string `json:"id"`
}

type DeleteMessageInput struct {
	MessageID string `json:"messageId"`
}

type DeletePaymentMethodInput struct {
	SpaceSlug string `json:"spaceSlug"`
	CardID    string `json:"cardId"`
}

type DeletePaymentMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

type DeleteProcessInput struct {
	ID string `json:"id"`
}

type DeleteQuoteInput struct {
	QuoteID string `json:"quoteId"`
}

type DeleteSharedFileInput struct {
	ID string `json:"id"`
}

type DeleteSharedFileMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type DiffInfo struct {
	Project             *Project `json:"project,omitempty"`
	ContributionsAhead  *int64   `json:"contributionsAhead,omitempty"`
	ContributionsBehind *int64   `json:"contributionsBehind,omitempty"`
}

// Login user with email/password creates a cookies
type EmailLogin struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
	Username   *string      `json:"username,omitempty"`
	Profile    *Profile     `json:"profile,omitempty"`
}

// create user from signup with email
type EmailSignup struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
	Profile    *Profile     `json:"profile,omitempty"`
}

type EmailType struct {
	ID          *string `json:"id,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
}

type ExtractPartsInput struct {
	RequestForQuote *CreateRequestForQuotesInput `json:"requestForQuote,omitempty"`
	FileID          string                       `json:"fileId"`
	CadIds          []string                     `json:"cadIds,omitempty"`
	PartFilenames   []string                     `json:"partFilenames,omitempty"`
	Retry           *bool                        `json:"retry,omitempty"`
}

// Only exists for the gateway, exposes file without  ContentInterface
type FederatedFile struct {
	// The ID of the object.
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         int64              `json:"commentsCount"`
	LikesCount            int64              `json:"likesCount"`
	FollowersCount        int64              `json:"followersCount"`
	Score                 float64            `json:"score"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	ContentPtrID          string             `json:"contentPtrId"`
	Filename              string             `json:"filename"`
	MimeType              string             `json:"mimeType"`
	EncodingType          string             `json:"encodingType"`
	Size                  float64            `json:"size"`
	S3Size                *float64           `json:"s3Size,omitempty"`
	FileLastModified      *time.Time         `json:"fileLastModified,omitempty"`
	Completed             bool               `json:"completed"`
	Cancelled             bool               `json:"cancelled"`
	Private               *bool              `json:"private,omitempty"`
	CopyOfID              *int64             `json:"copyOfId,omitempty"`
	Source                *string            `json:"source,omitempty"`
	Author                *string            `json:"author,omitempty"`
	License               *string            `json:"license,omitempty"`
	Md5                   *string            `json:"md5,omitempty"`
	GitHash               *string            `json:"gitHash,omitempty"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Description           *string            `json:"description,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Title                 *string            `json:"title,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
	Path                  *string            `json:"path,omitempty"`
	URL                   *string            `json:"url,omitempty"`
	Permalink             *string            `json:"permalink,omitempty"`
	UploadURL             *string            `json:"uploadUrl,omitempty"`
	IsCopy                *bool              `json:"isCopy,omitempty"`
	OriginalFile          *File              `json:"originalFile,omitempty"`
	CanDownload           *bool              `json:"canDownload,omitempty"`
	ConversionScstar      *FileConversion    `json:"conversionScstar,omitempty"`
	ConversionGltftar     *FileConversion    `json:"conversionGltftar,omitempty"`
	ConversionGltfdgraph  *FileConversion    `json:"conversionGltfdgraph,omitempty"`
	ConversionGltfjson    *FileConversion    `json:"conversionGltfjson,omitempty"`
	Conversion360Gif      *FileConversion    `json:"conversion360Gif,omitempty"`
	Conversion360Video    *FileConversion    `json:"conversion360Video,omitempty"`
}

func (FederatedFile) IsNode() {}

// Only exists for the gateway, exposes file without  ContentInterface
type FederatedInitiative struct {
	// The ID of the object.
	ID                             string                 `json:"id"`
	Type                           *string                `json:"type,omitempty"`
	Slug                           *string                `json:"slug,omitempty"`
	CreatorID                      int64                  `json:"creatorId"`
	CreatedInRegion                *string                `json:"createdInRegion,omitempty"`
	SpaceID                        *int64                 `json:"spaceId,omitempty"`
	DateCreated                    *time.Time             `json:"dateCreated,omitempty"`
	LastUpdated                    *time.Time             `json:"lastUpdated,omitempty"`
	Whitelabel                     *string                `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent          *bool                  `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt                *time.Time             `json:"lastCommentedAt,omitempty"`
	LastActivityAt                 time.Time              `json:"lastActivityAt"`
	CommentsCount                  int64                  `json:"commentsCount"`
	LikesCount                     int64                  `json:"likesCount"`
	FollowersCount                 int64                  `json:"followersCount"`
	Score                          float64                `json:"score"`
	PageviewsCount                 int64                  `json:"pageviewsCount"`
	PublicRead                     bool                   `json:"publicRead"`
	RegisteredRead                 bool                   `json:"registeredRead"`
	CountryCode                    *string                `json:"countryCode,omitempty"`
	TaxID                          *string                `json:"taxId,omitempty"`
	ContentPtrID                   string                 `json:"contentPtrId"`
	AvatarID                       *int64                 `json:"avatarId,omitempty"`
	Title                          *string                `json:"title,omitempty"`
	Description                    *string                `json:"description,omitempty"`
	OrganizationTypeID             *int64                 `json:"organizationTypeId,omitempty"`
	Manufacturer                   *Manufacturer          `json:"manufacturer,omitempty"`
	PreferedPlanID                 *int64                 `json:"preferedPlanId,omitempty"`
	IsConfirmed                    *string                `json:"isConfirmed,omitempty"`
	HasAvatar                      *string                `json:"hasAvatar,omitempty"`
	FeaturedIn                     *string                `json:"featuredIn,omitempty"`
	Avatar                         *File                  `json:"avatar,omitempty"`
	OrganizationType               *OrganizationType      `json:"organizationType,omitempty"`
	PreferedPlan                   *BillingPlan           `json:"preferedPlan,omitempty"`
	Creator                        *User                  `json:"creator,omitempty"`
	Followers                      *ProfileConnection     `json:"followers,omitempty"`
	Tags                           []*Tag                 `json:"tags,omitempty"`
	Comments                       *CommentConnection     `json:"comments,omitempty"`
	InviteLink                     *InviteLink            `json:"inviteLink,omitempty"`
	Invoices                       []*BillingInvoice      `json:"invoices,omitempty"`
	BillingSubscriptions           []*BillingSubscription `json:"billingSubscriptions,omitempty"`
	HasPrivateProjectsSubscription *bool                  `json:"hasPrivateProjectsSubscription,omitempty"`
	HasPaidSubscription            *bool                  `json:"hasPaidSubscription,omitempty"`
	HasBillingPermissions          *bool                  `json:"hasBillingPermissions,omitempty"`
	HasValidPaymentMethod          *bool                  `json:"hasValidPaymentMethod,omitempty"`
	SeatsUsage                     *SeatsUsage            `json:"seatsUsage,omitempty"`
	SubscriptionPreview            *SubscriptionPreview   `json:"subscriptionPreview,omitempty"`
	CreditCards                    []*CreditCard          `json:"creditCards,omitempty"`
	TrialPeriodEnd                 *time.Time             `json:"trialPeriodEnd,omitempty"`
	RemainingSharedFiles           *int64                 `json:"remainingSharedFiles,omitempty"`
	SocialAccounts                 []*Social              `json:"socialAccounts,omitempty"`
	Forum                          *Forum                 `json:"forum,omitempty"`
	FollowingCount                 *int64                 `json:"followingCount,omitempty"`
	CanUpdate                      *bool                  `json:"canUpdate,omitempty"`
	CanDelete                      *bool                  `json:"canDelete,omitempty"`
	ParentSlug                     *string                `json:"parentSlug,omitempty"`
	IsPrivate                      *bool                  `json:"isPrivate,omitempty"`
	Content                        *Content               `json:"content,omitempty"`
	ParentContent                  *Content               `json:"parentContent,omitempty"`
	InSpace                        *Space                 `json:"inSpace,omitempty"`
	ImageFallbackChar              *string                `json:"imageFallbackChar,omitempty"`
	Commenters                     []*Profile             `json:"commenters,omitempty"`
	PageViews                      *int64                 `json:"pageViews,omitempty"`
	Projects                       *ProjectConnection     `json:"projects,omitempty"`
	SharedFiles                    *SharedFileConnection  `json:"sharedFiles,omitempty"`
	Stories                        *StoryConnection       `json:"stories,omitempty"`
	Collections                    *CollectionConnection  `json:"collections,omitempty"`
	Groups                         []*Group               `json:"groups,omitempty"`
	Members                        *ProfileConnection     `json:"members,omitempty"`
	ProjectsCount                  *int64                 `json:"projectsCount,omitempty"`
	StoriesCount                   *int64                 `json:"storiesCount,omitempty"`
	CollectionsCount               *int64                 `json:"collectionsCount,omitempty"`
	ThreadsCount                   *int64                 `json:"threadsCount,omitempty"`
}

func (FederatedInitiative) IsNode() {}

type File struct {
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         *int64             `json:"commentsCount,omitempty"`
	LikesCount            *int64             `json:"likesCount,omitempty"`
	FollowersCount        *int64             `json:"followersCount,omitempty"`
	Score                 float64            `json:"score"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	ContentPtrID          string             `json:"contentPtrId"`
	Filename              string             `json:"filename"`
	MimeType              string             `json:"mimeType"`
	EncodingType          string             `json:"encodingType"`
	Size                  float64            `json:"size"`
	S3Size                *float64           `json:"s3Size,omitempty"`
	FileLastModified      *time.Time         `json:"fileLastModified,omitempty"`
	Completed             bool               `json:"completed"`
	Cancelled             bool               `json:"cancelled"`
	Private               *bool              `json:"private,omitempty"`
	CopyOfID              *int64             `json:"copyOfId,omitempty"`
	Source                *string            `json:"source,omitempty"`
	Author                *string            `json:"author,omitempty"`
	License               *string            `json:"license,omitempty"`
	Md5                   *string            `json:"md5,omitempty"`
	GitHash               *string            `json:"gitHash,omitempty"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Space                 *Space             `json:"space,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	ContentType           *string            `json:"contentType,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Description           *string            `json:"description,omitempty"`
	Snippet               *string            `json:"snippet,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Title                 *string            `json:"title,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
	Path                  *string            `json:"path,omitempty"`
	URL                   *string            `json:"url,omitempty"`
	Permalink             *string            `json:"permalink,omitempty"`
	UploadURL             *string            `json:"uploadUrl,omitempty"`
	IsCopy                *bool              `json:"isCopy,omitempty"`
	OriginalFile          *File              `json:"originalFile,omitempty"`
	CanDownload           *bool              `json:"canDownload,omitempty"`
	ConversionScstar      *FileConversion    `json:"conversionScstar,omitempty"`
	ConversionGltftar     *FileConversion    `json:"conversionGltftar,omitempty"`
	ConversionGltfdgraph  *FileConversion    `json:"conversionGltfdgraph,omitempty"`
	ConversionGltfjson    *FileConversion    `json:"conversionGltfjson,omitempty"`
	Conversion360Gif      *FileConversion    `json:"conversion360Gif,omitempty"`
	Conversion360Video    *FileConversion    `json:"conversion360Video,omitempty"`
}

func (File) IsNode()             {}
func (File) IsContentInterface() {}

type FileConversion struct {
	// The ID of the object.
	ID              string    `json:"id"`
	ViewerSemver    string    `json:"viewerSemver"`
	ConversionType  string    `json:"conversionType"`
	ConvertedFileID *int64    `json:"convertedFileId,omitempty"`
	DateCreated     time.Time `json:"dateCreated"`
	ConvertedFile   *File     `json:"convertedFile,omitempty"`
	Status          *string   `json:"status,omitempty"`
	Buffers         []string  `json:"buffers,omitempty"`
	OriginalFile    *File     `json:"originalFile,omitempty"`
}

func (FileConversion) IsNode() {}

type FileInput struct {
	ID               *string    `json:"id,omitempty"`
	Deleted          *bool      `json:"deleted,omitempty"`
	SpaceID          *string    `json:"spaceId,omitempty"`
	Filename         *string    `json:"filename,omitempty"`
	ContentType      *string    `json:"contentType,omitempty"`
	Size             *int64     `json:"size,omitempty"`
	GitHash          *string    `json:"gitHash,omitempty"`
	FileLastModified *time.Time `json:"fileLastModified,omitempty"`
	Completed        *bool      `json:"completed,omitempty"`
	Cancelled        *bool      `json:"cancelled,omitempty"`
	Private          *bool      `json:"private,omitempty"`
	ProjectPath      *string    `json:"projectPath,omitempty"`
}

type FileMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	File       *File        `json:"file,omitempty"`
}

type FileRequirement struct {
	ID          string          `json:"id"`
	For         Requirable      `json:"for,omitempty"`
	Formats     []string        `json:"formats,omitempty"`
	Type        RequirementType `json:"type"`
	Operator    *Operator       `json:"operator,omitempty"`
	ValueInt    *int64          `json:"valueInt,omitempty"`
	ValueFloat  *float64        `json:"valueFloat,omitempty"`
	ValueString *string         `json:"valueString,omitempty"`
	ValueBool   *bool           `json:"valueBool,omitempty"`
}

type FilterInput struct {
	Field    string        `json:"field"`
	Values   []*ValueInput `json:"values,omitempty"`
	Operator Operator      `json:"operator"`
}

type FollowInput struct {
	ContentID string `json:"contentId"`
	Follow    *bool  `json:"follow,omitempty"`
}

type FollowMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Content    *Content     `json:"content,omitempty"`
}

type ForkProjectInput struct {
	ProjectID       string  `json:"projectId"`
	TargetSpaceSlug string  `json:"targetSpaceSlug"`
	Name            *string `json:"name,omitempty"`
}

type ForkProjectMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Project    *Project     `json:"project,omitempty"`
}

type Forum struct {
	// The ID of the object.
	ID                  string            `json:"id"`
	SpaceID             int64             `json:"spaceId"`
	Description         string            `json:"description"`
	ThreadsCount        int64             `json:"threadsCount"`
	ThreadsCountPublic  int64             `json:"threadsCountPublic"`
	FeaturedIn          *string           `json:"featuredIn,omitempty"`
	Categories          []*Category       `json:"categories,omitempty"`
	Pinned              []*Thread         `json:"pinned,omitempty"`
	Threads             *ThreadConnection `json:"threads,omitempty"`
	ParentContent       *Content          `json:"parentContent,omitempty"`
	PrivateThreadsCount *int64            `json:"privateThreadsCount,omitempty"`
	Name                *string           `json:"name,omitempty"`
	IsMember            *bool             `json:"isMember,omitempty"`
}

func (Forum) IsNode() {}

type ForumConnection struct {
	PageInfo   *PageInfo    `json:"pageInfo,omitempty"`
	Edges      []*ForumEdge `json:"edges,omitempty"`
	TotalCount *int64       `json:"totalCount,omitempty"`
}

type ForumConnectionErrorHandler struct {
	UserErrors []*UserError     `json:"userErrors,omitempty"`
	Result     *ForumConnection `json:"result,omitempty"`
}

type ForumEdge struct {
	// The item at the end of the edge
	Node *Forum `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type ForumInput struct {
	SpaceID     string `json:"spaceId"`
	Description string `json:"description"`
}

type ForumMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Forum      *Forum       `json:"forum,omitempty"`
}

type GeolocationInput struct {
	Longitude float64 `json:"longitude"`
	Latitude  float64 `json:"latitude"`
}

type GetAddressesInput struct {
	SpaceID string `json:"spaceId"`
	Default *bool  `json:"default,omitempty"`
}

type GetAnnotationsInput struct {
	ContextID   string  `json:"contextId"`
	ResourceID  string  `json:"resourceId"`
	ReferenceID *string `json:"referenceId,omitempty"`
}

type GetCadConversionsInput struct {
	SrcFileID string `json:"srcFileId"`
}

type GetExtractedPartsInput struct {
	SrcFileID string `json:"srcFileId"`
}

type GetMessagesInput struct {
	ContextID   string  `json:"contextId"`
	ResourceID  *string `json:"resourceId,omitempty"`
	ReferenceID *string `json:"referenceId,omitempty"`
	MessageType *string `json:"messageType,omitempty"`
}

type GetProductBuildsInput struct {
	SpaceID string  `json:"spaceId"`
	Name    *string `json:"name,omitempty"`
}

type Group struct {
	Permissions *string `json:"permissions,omitempty"`
	// The ID of the object.
	ID             string                     `json:"id"`
	Name           *string                    `json:"name,omitempty"`
	SpaceID        *int64                     `json:"spaceId,omitempty"`
	ParentID       *int64                     `json:"parentId,omitempty"`
	Level          int64                      `json:"level"`
	Space          *Space                     `json:"space,omitempty"`
	Parent         *Group                     `json:"parent,omitempty"`
	Children       *AutoGroupConnection       `json:"children,omitempty"`
	InviteLinks    *AutoInviteLinkConnection  `json:"inviteLinks,omitempty"`
	GroupInvites   *AutoGroupInviteConnection `json:"groupInvites,omitempty"`
	Members        []*GroupMember             `json:"members,omitempty"`
	CanUpdate      *bool                      `json:"canUpdate,omitempty"`
	CanDelete      *bool                      `json:"canDelete,omitempty"`
	Content        ContentInterface           `json:"content,omitempty"`
	CanAddMember   *bool                      `json:"canAddMember,omitempty"`
	PendingInvites []*GroupInvite             `json:"pendingInvites,omitempty"`
}

func (Group) IsNode() {}

type GroupInvite struct {
	// The ID of the object.
	ID                      string     `json:"id"`
	GroupID                 int64      `json:"groupId"`
	Status                  *string    `json:"status,omitempty"`
	UserID                  *int64     `json:"userId,omitempty"`
	Email                   *string    `json:"email,omitempty"`
	InviterID               *int64     `json:"inviterId,omitempty"`
	InviteDate              *time.Time `json:"inviteDate,omitempty"`
	Info                    *string    `json:"info,omitempty"`
	IntercomLeadID          *string    `json:"intercomLeadId,omitempty"`
	Group                   *Group     `json:"group,omitempty"`
	Username                *string    `json:"username,omitempty"`
	Profile                 *Profile   `json:"profile,omitempty"`
	MoreInvitesRequested    *bool      `json:"moreInvitesRequested,omitempty"`
	InvitesLeft             *int64     `json:"invitesLeft,omitempty"`
	GroupName               *string    `json:"groupName,omitempty"`
	GroupSpaceType          *string    `json:"groupSpaceType,omitempty"`
	GroupSpacePrivate       *bool      `json:"groupSpacePrivate,omitempty"`
	GroupSpaceSlug          *string    `json:"groupSpaceSlug,omitempty"`
	GroupSlug               *string    `json:"groupSlug,omitempty"`
	GroupTitle              *string    `json:"groupTitle,omitempty"`
	GroupDescriptionSnippet *string    `json:"groupDescriptionSnippet,omitempty"`
	GroupAvatar             *File      `json:"groupAvatar,omitempty"`
}

func (GroupInvite) IsNode()               {}
func (GroupInvite) IsNotificationTarget() {}

type GroupMember struct {
	GroupID      string      `json:"groupId"`
	UserID       string      `json:"userId"`
	Intrinsic    bool        `json:"intrinsic"`
	InviteLinkID *int64      `json:"inviteLinkId,omitempty"`
	Group        *Group      `json:"group,omitempty"`
	InviteLink   *InviteLink `json:"inviteLink,omitempty"`
	CanUpdate    *bool       `json:"canUpdate,omitempty"`
	CanDelete    *bool       `json:"canDelete,omitempty"`
	ID           *string     `json:"id,omitempty"`
	Profile      *Profile    `json:"profile,omitempty"`
}

type HTMLNotification struct {
	ID    string  `json:"id"`
	HTML  *string `json:"html,omitempty"`
	URL   *string `json:"url,omitempty"`
	Level *string `json:"level,omitempty"`
}

func (HTMLNotification) IsNotificationTarget() {}

type ImportProjectInput struct {
	Space       string  `json:"space"`
	Name        string  `json:"name"`
	Private     *bool   `json:"private,omitempty"`
	ImportURL   string  `json:"importUrl"`
	ImportToken *string `json:"importToken,omitempty"`
}

type ImportProjectMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Project    *Project     `json:"project,omitempty"`
}

type ImportStatus struct {
	GeneralProgress *float64 `json:"generalProgress,omitempty"`
	StatusProgress  *float64 `json:"statusProgress,omitempty"`
	Status          *string  `json:"status,omitempty"`
	ImportService   *string  `json:"importService,omitempty"`
}

type Initiative struct {
	ID                             string                 `json:"id"`
	Type                           *string                `json:"type,omitempty"`
	Slug                           *string                `json:"slug,omitempty"`
	CreatorID                      int64                  `json:"creatorId"`
	CreatedInRegion                *string                `json:"createdInRegion,omitempty"`
	SpaceID                        *int64                 `json:"spaceId,omitempty"`
	DateCreated                    *time.Time             `json:"dateCreated,omitempty"`
	LastUpdated                    *time.Time             `json:"lastUpdated,omitempty"`
	Whitelabel                     *string                `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent          *bool                  `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt                *time.Time             `json:"lastCommentedAt,omitempty"`
	LastActivityAt                 time.Time              `json:"lastActivityAt"`
	CommentsCount                  *int64                 `json:"commentsCount,omitempty"`
	LikesCount                     *int64                 `json:"likesCount,omitempty"`
	FollowersCount                 *int64                 `json:"followersCount,omitempty"`
	Score                          float64                `json:"score"`
	PageviewsCount                 int64                  `json:"pageviewsCount"`
	PublicRead                     bool                   `json:"publicRead"`
	RegisteredRead                 bool                   `json:"registeredRead"`
	CountryCode                    *string                `json:"countryCode,omitempty"`
	TaxID                          *string                `json:"taxId,omitempty"`
	ContentPtrID                   string                 `json:"contentPtrId"`
	AvatarID                       *int64                 `json:"avatarId,omitempty"`
	Title                          *string                `json:"title,omitempty"`
	Description                    *string                `json:"description,omitempty"`
	OrganizationTypeID             *int64                 `json:"organizationTypeId,omitempty"`
	Manufacturer                   *Manufacturer          `json:"manufacturer,omitempty"`
	PreferedPlanID                 *int64                 `json:"preferedPlanId,omitempty"`
	IsConfirmed                    *string                `json:"isConfirmed,omitempty"`
	HasAvatar                      *string                `json:"hasAvatar,omitempty"`
	FeaturedIn                     *string                `json:"featuredIn,omitempty"`
	Avatar                         *File                  `json:"avatar,omitempty"`
	OrganizationType               *OrganizationType      `json:"organizationType,omitempty"`
	PreferedPlan                   *BillingPlan           `json:"preferedPlan,omitempty"`
	Creator                        *User                  `json:"creator,omitempty"`
	Space                          *Space                 `json:"space,omitempty"`
	Followers                      *ProfileConnection     `json:"followers,omitempty"`
	Tags                           []*Tag                 `json:"tags,omitempty"`
	Comments                       *CommentConnection     `json:"comments,omitempty"`
	ContentType                    *string                `json:"contentType,omitempty"`
	ParentSlug                     *string                `json:"parentSlug,omitempty"`
	IsPrivate                      *bool                  `json:"isPrivate,omitempty"`
	Snippet                        *string                `json:"snippet,omitempty"`
	InviteLink                     *InviteLink            `json:"inviteLink,omitempty"`
	Invoices                       []*BillingInvoice      `json:"invoices,omitempty"`
	BillingSubscriptions           []*BillingSubscription `json:"billingSubscriptions,omitempty"`
	HasPrivateProjectsSubscription *bool                  `json:"hasPrivateProjectsSubscription,omitempty"`
	HasPaidSubscription            *bool                  `json:"hasPaidSubscription,omitempty"`
	HasBillingPermissions          *bool                  `json:"hasBillingPermissions,omitempty"`
	HasValidPaymentMethod          *bool                  `json:"hasValidPaymentMethod,omitempty"`
	SeatsUsage                     *SeatsUsage            `json:"seatsUsage,omitempty"`
	SubscriptionPreview            *SubscriptionPreview   `json:"subscriptionPreview,omitempty"`
	CreditCards                    []*CreditCard          `json:"creditCards,omitempty"`
	TrialPeriodEnd                 *time.Time             `json:"trialPeriodEnd,omitempty"`
	RemainingSharedFiles           *int64                 `json:"remainingSharedFiles,omitempty"`
	SocialAccounts                 []*Social              `json:"socialAccounts,omitempty"`
	Forum                          *Forum                 `json:"forum,omitempty"`
	FollowingCount                 *int64                 `json:"followingCount,omitempty"`
	CanUpdate                      *bool                  `json:"canUpdate,omitempty"`
	CanDelete                      *bool                  `json:"canDelete,omitempty"`
	Content                        *Content               `json:"content,omitempty"`
	ParentContent                  *Content               `json:"parentContent,omitempty"`
	InSpace                        *Space                 `json:"inSpace,omitempty"`
	ImageFallbackChar              *string                `json:"imageFallbackChar,omitempty"`
	Commenters                     []*Profile             `json:"commenters,omitempty"`
	PageViews                      *int64                 `json:"pageViews,omitempty"`
	Projects                       *ProjectConnection     `json:"projects,omitempty"`
	SharedFiles                    *SharedFileConnection  `json:"sharedFiles,omitempty"`
	Stories                        *StoryConnection       `json:"stories,omitempty"`
	Collections                    *CollectionConnection  `json:"collections,omitempty"`
	Groups                         []*Group               `json:"groups,omitempty"`
	Members                        *ProfileConnection     `json:"members,omitempty"`
	ProjectsCount                  *int64                 `json:"projectsCount,omitempty"`
	StoriesCount                   *int64                 `json:"storiesCount,omitempty"`
	CollectionsCount               *int64                 `json:"collectionsCount,omitempty"`
	ThreadsCount                   *int64                 `json:"threadsCount,omitempty"`
}

func (Initiative) IsNode()               {}
func (Initiative) IsContentInterface()   {}
func (Initiative) IsNotificationTarget() {}

type InitiativeConnection struct {
	PageInfo   *PageInfo         `json:"pageInfo,omitempty"`
	Edges      []*InitiativeEdge `json:"edges,omitempty"`
	TotalCount *int64            `json:"totalCount,omitempty"`
}

type InitiativeConnectionErrorHandler struct {
	UserErrors []*UserError          `json:"userErrors,omitempty"`
	Result     *InitiativeConnection `json:"result,omitempty"`
}

type InitiativeEdge struct {
	// The item at the end of the edge
	Node *Initiative `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type InitiativeInput struct {
	ID                 *string               `json:"id,omitempty"`
	Deleted            *bool                 `json:"deleted,omitempty"`
	Title              *string               `json:"title,omitempty"`
	Slug               *string               `json:"slug,omitempty"`
	Avatar             *string               `json:"avatar,omitempty"`
	Description        *string               `json:"description,omitempty"`
	OrganizationTypeID *string               `json:"organizationTypeId,omitempty"`
	Tags               []*TagInput           `json:"tags,omitempty"`
	SocialAccounts     []*SocialAccountInput `json:"socialAccounts,omitempty"`
	Invites            []*string             `json:"invites,omitempty"`
	StartFreeTrial     *bool                 `json:"startFreeTrial,omitempty"`
}

type InitiativeMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Initiative *Initiative  `json:"initiative,omitempty"`
}

type InitiativeProfileMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Initiative *Initiative  `json:"initiative,omitempty"`
	Profile    *Profile     `json:"profile,omitempty"`
}

type Intermediator struct {
	ID          string               `json:"id"`
	Initiative  *FederatedInitiative `json:"initiative,omitempty"`
	Address     *Address             `json:"address,omitempty"`
	CompanyName *string              `json:"companyName,omitempty"`
}

func (Intermediator) IsNode()     {}
func (Intermediator) IsSupplier() {}

type InviteLink struct {
	// The ID of the object.
	ID        string         `json:"id"`
	GroupID   int64          `json:"groupId"`
	ExpiresAt *time.Time     `json:"expiresAt,omitempty"`
	Accepted  []*GroupMember `json:"accepted,omitempty"`
	Content   *Content       `json:"content,omitempty"`
	URL       *string        `json:"url,omitempty"`
}

func (InviteLink) IsNode() {}

type InviteUsersToGroup struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Group      *Group       `json:"group,omitempty"`
}

type InviteUsersToSignup struct {
	UserErrors  []*UserError   `json:"userErrors,omitempty"`
	Result      *string        `json:"result,omitempty"`
	Invites     []*GroupInvite `json:"invites,omitempty"`
	InvitesLeft *int64         `json:"invitesLeft,omitempty"`
}

type InvitesRequest struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type InvitesRequestInput struct {
	Msg *string `json:"msg,omitempty"`
}

type Issue struct {
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         *int64             `json:"commentsCount,omitempty"`
	LikesCount            *int64             `json:"likesCount,omitempty"`
	FollowersCount        *int64             `json:"followersCount,omitempty"`
	Score                 float64            `json:"score"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	ContentPtrID          string             `json:"contentPtrId"`
	Number                *int64             `json:"number,omitempty"`
	Title                 *string            `json:"title,omitempty"`
	Description           *string            `json:"description,omitempty"`
	DescriptionWordCount  int64              `json:"descriptionWordCount"`
	Status                *string            `json:"status,omitempty"`
	ProjectID             int64              `json:"projectId"`
	CanAppearOnHome       *string            `json:"canAppearOnHome,omitempty"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Project               *Project           `json:"project,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Space                 *Space             `json:"space,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	ContentType           *string            `json:"contentType,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Snippet               *string            `json:"snippet,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
	Labels                []*Label           `json:"labels,omitempty"`
	Assignees             []*Profile         `json:"assignees,omitempty"`
	CreatorProfile        *Profile           `json:"creatorProfile,omitempty"`
	CanAddDeleteLabels    *bool              `json:"canAddDeleteLabels,omitempty"`
}

func (Issue) IsNode()               {}
func (Issue) IsContentInterface()   {}
func (Issue) IsNotificationTarget() {}

type IssueAssigneeInput struct {
	ProfileID string `json:"profileId"`
	Deleted   *bool  `json:"deleted,omitempty"`
}

type IssueConnection struct {
	PageInfo   *PageInfo    `json:"pageInfo,omitempty"`
	Edges      []*IssueEdge `json:"edges,omitempty"`
	TotalCount *int64       `json:"totalCount,omitempty"`
}

type IssueConnectionErrorHandler struct {
	UserErrors []*UserError     `json:"userErrors,omitempty"`
	Result     *IssueConnection `json:"result,omitempty"`
}

type IssueEdge struct {
	// The item at the end of the edge
	Node *Issue `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type IssueInput struct {
	ID          *string               `json:"id,omitempty"`
	Deleted     *bool                 `json:"deleted,omitempty"`
	ProjectID   *string               `json:"projectId,omitempty"`
	Title       *string               `json:"title,omitempty"`
	Description *string               `json:"description,omitempty"`
	Status      *string               `json:"status,omitempty"`
	Labels      []*IssueLabelInput    `json:"labels,omitempty"`
	Assignees   []*IssueAssigneeInput `json:"assignees,omitempty"`
	Tags        []*TagInput           `json:"tags,omitempty"`
}

type IssueLabelInput struct {
	LabelID string `json:"labelId"`
	Deleted *bool  `json:"deleted,omitempty"`
}

type IssueMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Issue      *Issue       `json:"issue,omitempty"`
}

type JobSpec struct {
	ID              string   `json:"id"`
	Build           *Build   `json:"build,omitempty"`
	Quantity        int64    `json:"quantity"`
	LeadTime        int64    `json:"leadTime"`
	Quotes          []*Quote `json:"quotes,omitempty"`
	ShippingAddress *Address `json:"shippingAddress,omitempty"`
}

func (JobSpec) IsNode() {}

type Label struct {
	// The ID of the object.
	ID          string   `json:"id"`
	Name        *string  `json:"name,omitempty"`
	Color       *string  `json:"color,omitempty"`
	Restricted  *bool    `json:"restricted,omitempty"`
	ProjectID   int64    `json:"projectId"`
	Project     *Project `json:"project,omitempty"`
	CanUpdate   *bool    `json:"canUpdate,omitempty"`
	CanDelete   *bool    `json:"canDelete,omitempty"`
	CanBeUsedBy *bool    `json:"canBeUsedBy,omitempty"`
}

func (Label) IsNode() {}

type LabelInput struct {
	ID         *string `json:"id,omitempty"`
	Deleted    *bool   `json:"deleted,omitempty"`
	ProjectID  *string `json:"projectId,omitempty"`
	Name       *string `json:"name,omitempty"`
	Color      *string `json:"color,omitempty"`
	Restricted *bool   `json:"restricted,omitempty"`
}

type LabelMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Label      *Label       `json:"label,omitempty"`
}

type License struct {
	Name        *string `json:"name,omitempty"`
	Title       *string `json:"title,omitempty"`
	Link        *string `json:"link,omitempty"`
	IsHeader    *bool   `json:"isHeader,omitempty"`
	Abreviation *string `json:"abreviation,omitempty"`
}

type LikeInput struct {
	ContentID string `json:"contentId"`
	Like      *bool  `json:"like,omitempty"`
}

type LikeMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Content    *Content     `json:"content,omitempty"`
}

type LoggedInUser struct {
	// The ID of the object.
	ID                       string              `json:"id"`
	Username                 *string             `json:"username,omitempty"`
	Email                    *string             `json:"email,omitempty"`
	Locale                   *string             `json:"locale,omitempty"`
	Profile                  *Profile            `json:"profile,omitempty"`
	EmailsEnabled            *bool               `json:"emailsEnabled,omitempty"`
	AsSpace                  []*Space            `json:"asSpace,omitempty"`
	PendingOperationProjects []*Project          `json:"pendingOperationProjects,omitempty"`
	PendingInvites           []*GroupInvite      `json:"pendingInvites,omitempty"`
	EmailsPreferences        []*EmailType        `json:"emailsPreferences,omitempty"`
	NotificationCenter       *NotificationCenter `json:"notificationCenter,omitempty"`
	IsStaff                  *bool               `json:"isStaff,omitempty"`
	IsSuperuser              *bool               `json:"isSuperuser,omitempty"`
	Flags                    *string             `json:"flags,omitempty"`
	Source                   *string             `json:"source,omitempty"`
}

func (LoggedInUser) IsNode() {}

type MakeDefaultPaymentMethodInput struct {
	SpaceSlug string `json:"spaceSlug"`
	CardID    string `json:"cardId"`
}

type MakeDefaultPaymentMethodMutation struct {
	UserErrors    []*UserError `json:"userErrors,omitempty"`
	PaymentMethod *CreditCard  `json:"paymentMethod,omitempty"`
}

type Manufacturer struct {
	ID           string               `json:"id"`
	EnquiryEmail string               `json:"enquiryEmail"`
	Initiative   *FederatedInitiative `json:"initiative,omitempty"`
	Address      *Address             `json:"address,omitempty"`
	CompanyName  *string              `json:"companyName,omitempty"`
	ShipsTo      []string             `json:"shipsTo,omitempty"`
	Telephone    *string              `json:"telephone,omitempty"`
	FoundingYear *int64               `json:"foundingYear,omitempty"`
	Industries   []string             `json:"industries,omitempty"`
	NumEmployees *int64               `json:"numEmployees,omitempty"`
	NumMachines  *int64               `json:"numMachines,omitempty"`
	FileFormats  []string             `json:"fileFormats,omitempty"`
	CaseStudies  []string             `json:"caseStudies,omitempty"`
	CompanyType  []string             `json:"companyType,omitempty"`
	Certificates []*Certificate       `json:"certificates,omitempty"`
	Services     []*Service           `json:"services,omitempty"`
}

func (Manufacturer) IsNode() {}

type ManufacturerFilter struct {
	ManufacturerIds []string `json:"manufacturerIds,omitempty"`
	Pattern         *string  `json:"pattern,omitempty"`
	Materials       []string `json:"materials,omitempty"`
	Processes       []string `json:"processes,omitempty"`
	ShipsTo         []string `json:"shipsTo,omitempty"`
	CompanyType     []string `json:"companyType,omitempty"`
}

type ManufacturerInitiativeProfileMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Initiative *Initiative  `json:"initiative,omitempty"`
	Profile    *Profile     `json:"profile,omitempty"`
}

type ManufacturerInput struct {
	EnquiryEmail         string            `json:"enquiryEmail"`
	Address              string            `json:"address"`
	ShipsTo              []string          `json:"shipsTo,omitempty"`
	Telephone            string            `json:"telephone"`
	FoundingYear         int64             `json:"foundingYear"`
	AvatarID             *string           `json:"avatarId,omitempty"`
	Geolocation          *GeolocationInput `json:"geolocation,omitempty"`
	Industries           []string          `json:"industries,omitempty"`
	NumEmployees         *int64            `json:"numEmployees,omitempty"`
	NumMachines          *int64            `json:"numMachines,omitempty"`
	MinimumOrderQuantity *int64            `json:"minimumOrderQuantity,omitempty"`
	LeadTime             *string           `json:"leadTime,omitempty"`
	FileFormats          []string          `json:"fileFormats,omitempty"`
	CaseStudies          []string          `json:"caseStudies,omitempty"`
	CompanyType          []string          `json:"companyType,omitempty"`
}

type ManufacturerPage struct {
	Nodes []*Manufacturer `json:"nodes,omitempty"`
	Total int64           `json:"total"`
}

func (ManufacturerPage) IsPage() {}

type MarkAllAsReadMutation struct {
	UserErrors        []*UserError `json:"userErrors,omitempty"`
	Result            *string      `json:"result,omitempty"`
	PendingCount      *int64       `json:"pendingCount,omitempty"`
	MarkedAsReadCount *int64       `json:"markedAsReadCount,omitempty"`
}

type Material struct {
	ID             string      `json:"id"`
	Name           string      `json:"name"`
	ParentMaterial *Material   `json:"parentMaterial,omitempty"`
	ChildMaterials []*Material `json:"childMaterials,omitempty"`
	Count          int64       `json:"count"`
	IsSelectable   bool        `json:"isSelectable"`
	Options        []Option    `json:"options,omitempty"`
}

func (Material) IsNode()       {}
func (Material) IsOptionable() {}
func (Material) IsRequirable() {}

type MaterialFilter struct {
	ProcessID *string `json:"processId,omitempty"`
	Name      *string `json:"name,omitempty"`
}

type MaterialInput struct {
	Name         string           `json:"name"`
	IsSelectable *bool            `json:"isSelectable,omitempty"`
	Children     []*MaterialInput `json:"children,omitempty"`
}

type Message struct {
	ID          string     `json:"id"`
	MessageType string     `json:"messageType"`
	Body        string     `json:"body"`
	Snippet     string     `json:"snippet"`
	ContextID   string     `json:"contextId"`
	ReferenceID *string    `json:"referenceId,omitempty"`
	ResourceID  *string    `json:"resourceId,omitempty"`
	TempKey     *string    `json:"tempKey,omitempty"`
	CreatedBy   *User      `json:"createdBy,omitempty"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
	Timestamp   string     `json:"timestamp"`
}

func (Message) IsNode() {}

type MessagePage struct {
	Nodes []*Message `json:"nodes,omitempty"`
	Total int64      `json:"total"`
}

func (MessagePage) IsPage() {}

type MinMaxOption struct {
	ID        string            `json:"id"`
	Name      string            `json:"name"`
	For       Optionable        `json:"for,omitempty"`
	ValueType OptionValueType   `json:"valueType"`
	Required  bool              `json:"required"`
	Type      MinMaxType        `json:"type"`
	Step      float64           `json:"step"`
	Unit      *string           `json:"unit,omitempty"`
	NilLabel  *string           `json:"nilLabel,omitempty"`
	Prefix    *string           `json:"prefix,omitempty"`
	Instances []*OptionInstance `json:"instances,omitempty"`
	Values    []*OptionValue    `json:"values,omitempty"`
}

func (MinMaxOption) IsNode()       {}
func (MinMaxOption) IsOption()     {}
func (MinMaxOption) IsRequirable() {}

type MoveGroupInvite struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
	FromGroup  *Group       `json:"fromGroup,omitempty"`
	ToGroup    *Group       `json:"toGroup,omitempty"`
}

type MoveGroupInviteInput struct {
	InviteID string `json:"inviteId"`
	GroupID  string `json:"groupId"`
}

type MoveGroupMember struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
	FromGroup  *Group       `json:"fromGroup,omitempty"`
	ToGroup    *Group       `json:"toGroup,omitempty"`
}

type MoveGroupMemberInput struct {
	SpaceID string `json:"spaceId"`
	UserID  string `json:"userId"`
	GroupID string `json:"groupId"`
}

type NewPassword struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
	Msg        *string      `json:"msg,omitempty"`
}

type NewPasswordInput struct {
	Username    *string `json:"username,omitempty"`
	ExpiryTime  *string `json:"expiryTime,omitempty"`
	Hmac        *string `json:"hmac,omitempty"`
	NewPassword *string `json:"newPassword,omitempty"`
}

type Notification struct {
	ID     *string            `json:"id,omitempty"`
	Type   *NotificationType  `json:"type,omitempty"`
	When   *time.Time         `json:"when,omitempty"`
	Author *Profile           `json:"author,omitempty"`
	Target NotificationTarget `json:"target,omitempty"`
	Read   *bool              `json:"read,omitempty"`
}

type NotificationCenter struct {
	ID            *string                 `json:"id,omitempty"`
	PendingCount  *int64                  `json:"pendingCount,omitempty"`
	Notifications *NotificationConnection `json:"notifications,omitempty"`
}

type NotificationConnection struct {
	PageInfo   *PageInfo           `json:"pageInfo,omitempty"`
	Edges      []*NotificationEdge `json:"edges,omitempty"`
	TotalCount *int64              `json:"totalCount,omitempty"`
}

type NotificationEdge struct {
	// The item at the end of the edge
	Node *Notification `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type OperationInput struct {
	ProjectID *string `json:"projectId,omitempty"`
	OpType    *string `json:"opType,omitempty"`
	FileID    *string `json:"fileId,omitempty"`
	Path      *string `json:"path,omitempty"`
	OldPath   *string `json:"oldPath,omitempty"`
}

type OperationMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Project    *Project     `json:"project,omitempty"`
}

type OpsConnection struct {
	PageInfo   *PageInfo  `json:"pageInfo,omitempty"`
	Edges      []*OpsEdge `json:"edges,omitempty"`
	TotalCount *int64     `json:"totalCount,omitempty"`
}

type OpsEdge struct {
	// The item at the end of the edge
	Node *ContribOp `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type OptionFilter struct {
	MaterialID             *string                     `json:"materialId,omitempty"`
	ProcessID              *string                     `json:"processId,omitempty"`
	SelectedOptionInstance []*SelectedOptionValueInput `json:"selectedOptionInstance,omitempty"`
}

type OptionInstance struct {
	ID           string        `json:"id"`
	Option       Option        `json:"option,omitempty"`
	Manufacturer *Manufacturer `json:"manufacturer,omitempty"`
	ForMaterial  *Material     `json:"ForMaterial,omitempty"`
	ForProcess   *Process      `json:"ForProcess,omitempty"`
	ValueInt     *int64        `json:"valueInt,omitempty"`
	ValueFloat   *float64      `json:"valueFloat,omitempty"`
	ValueString  *string       `json:"valueString,omitempty"`
	ValueBool    *bool         `json:"valueBool,omitempty"`
}

func (OptionInstance) IsNode() {}

type OptionInstanceFilter struct {
	OptionID   string  `json:"optionId"`
	MaterialID *string `json:"materialId,omitempty"`
	ProcessID  *string `json:"processId,omitempty"`
}

type OptionValue struct {
	ID          string   `json:"id"`
	Option      Option   `json:"option,omitempty"`
	Default     *bool    `json:"default,omitempty"`
	ValueInt    *int64   `json:"valueInt,omitempty"`
	ValueFloat  *float64 `json:"valueFloat,omitempty"`
	ValueString *string  `json:"valueString,omitempty"`
	ValueBool   *bool    `json:"valueBool,omitempty"`
}

type Order struct {
	ID             string          `json:"id"`
	Quote          *Quote          `json:"quote,omitempty"`
	PaymentStatus  PaymentStatus   `json:"paymentStatus"`
	OrderStatus    OrderStatus     `json:"orderStatus"`
	Payments       []*Payment      `json:"payments,omitempty"`
	ShippingDetail *ShippingDetail `json:"shippingDetail,omitempty"`
	Supplier       Supplier        `json:"supplier,omitempty"`
	Confirmation   *Confirmation   `json:"confirmation,omitempty"`
	CreatedAt      time.Time       `json:"createdAt"`
}

func (Order) IsNode() {}

type OrderPage struct {
	Nodes []*Order `json:"nodes,omitempty"`
	Total int64    `json:"total"`
}

func (OrderPage) IsPage() {}

type OrganizationType struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type Part struct {
	ID        string         `json:"id"`
	SrcFileID string         `json:"srcFileId"`
	CadID     string         `json:"cadId"`
	Status    string         `json:"status"`
	Error     *string        `json:"error,omitempty"`
	File      *FederatedFile `json:"file,omitempty"`
}

func (Part) IsNode() {}

type Payment struct {
	ID             string           `json:"id"`
	For            *Order           `json:"for,omitempty"`
	Type           PaymentType      `json:"type"`
	BillingAddress *BillingAddress  `json:"billingAddress,omitempty"`
	Card           *CardInformation `json:"card,omitempty"`
	Amount         *int64           `json:"amount,omitempty"`
	Currency       *string          `json:"currency,omitempty"`
	ReceiptURL     *string          `json:"receiptUrl,omitempty"`
	CreatedAt      time.Time        `json:"createdAt"`
}

func (Payment) IsNode() {}

type PinInput struct {
	CategoryID *string `json:"categoryId,omitempty"`
	ThreadID   string  `json:"threadId"`
	Pin        bool    `json:"pin"`
}

type PinMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Thread     *Thread      `json:"thread,omitempty"`
}

type Post struct {
	// The ID of the object.
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         int64              `json:"commentsCount"`
	LikesCount            int64              `json:"likesCount"`
	FollowersCount        int64              `json:"followersCount"`
	Score                 float64            `json:"score"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	ContentPtrID          string             `json:"contentPtrId"`
	Title                 *string            `json:"title,omitempty"`
	Msg                   string             `json:"msg"`
	Source                *string            `json:"source,omitempty"`
	URL                   *string            `json:"url,omitempty"`
	ForumID               *float64           `json:"forumId,omitempty"`
	CategoryID            *float64           `json:"categoryId,omitempty"`
	MembersOnly           bool               `json:"membersOnly"`
	UpvoteCount           *int64             `json:"upvoteCount,omitempty"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Upvotes               []*Upvote          `json:"upvotes,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Description           *string            `json:"description,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
	IsUpvoted             *bool              `json:"isUpvoted,omitempty"`
	CreatorProfile        *Profile           `json:"creatorProfile,omitempty"`
}

func (Post) IsNode() {}

type PostConnection struct {
	PageInfo   *PageInfo   `json:"pageInfo,omitempty"`
	Edges      []*PostEdge `json:"edges,omitempty"`
	TotalCount *int64      `json:"totalCount,omitempty"`
}

type PostEdge struct {
	// The item at the end of the edge
	Node *Post `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type PostInput struct {
	ID      *string     `json:"id,omitempty"`
	Deleted *bool       `json:"deleted,omitempty"`
	Title   *string     `json:"title,omitempty"`
	Msg     *string     `json:"msg,omitempty"`
	URL     *string     `json:"url,omitempty"`
	Tags    []*TagInput `json:"tags,omitempty"`
	Upvote  *bool       `json:"upvote,omitempty"`
}

type PostMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Post       *Post        `json:"post,omitempty"`
}

type Process struct {
	ID             string     `json:"id"`
	Name           string     `json:"name"`
	ParentProcess  *Process   `json:"parentProcess,omitempty"`
	ChildProcesses []*Process `json:"childProcesses,omitempty"`
	Count          int64      `json:"count"`
	IsSelectable   bool       `json:"isSelectable"`
	Options        []Option   `json:"options,omitempty"`
}

func (Process) IsNode()       {}
func (Process) IsOptionable() {}
func (Process) IsRequirable() {}

type ProcessFilter struct {
	MaterialID *string `json:"materialId,omitempty"`
	Name       *string `json:"name,omitempty"`
}

type ProcessInput struct {
	Name         string          `json:"name"`
	IsSelectable *bool           `json:"isSelectable,omitempty"`
	Children     []*ProcessInput `json:"children,omitempty"`
}

type ProductBuild struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Space        *Space               `json:"space,omitempty"`
	AssemblyTree *ProductItem         `json:"assemblyTree,omitempty"`
	AssemblyList []*ProductItem       `json:"assemblyList,omitempty"`
	Builds       []*Build             `json:"builds,omitempty"`
	Quantities   []*BuildWithQuantity `json:"quantities,omitempty"`
	Releases     []*Release           `json:"releases,omitempty"`
}

func (ProductBuild) IsNode()        {}
func (ProductBuild) IsProductNode() {}

type ProductItem struct {
	ID        string         `json:"id"`
	Transform []float64      `json:"transform,omitempty"`
	Parent    ProductNode    `json:"parent,omitempty"`
	Children  []*ProductItem `json:"children,omitempty"`
	Build     *Build         `json:"build,omitempty"`
}

func (ProductItem) IsNode()        {}
func (ProductItem) IsProductNode() {}

type Profile struct {
	ID                             string                  `json:"id"`
	Type                           *string                 `json:"type,omitempty"`
	Slug                           *string                 `json:"slug,omitempty"`
	CreatorID                      int64                   `json:"creatorId"`
	CreatedInRegion                *string                 `json:"createdInRegion,omitempty"`
	SpaceID                        *int64                  `json:"spaceId,omitempty"`
	DateCreated                    *time.Time              `json:"dateCreated,omitempty"`
	LastUpdated                    *time.Time              `json:"lastUpdated,omitempty"`
	Whitelabel                     *string                 `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent          *bool                   `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt                *time.Time              `json:"lastCommentedAt,omitempty"`
	LastActivityAt                 time.Time               `json:"lastActivityAt"`
	CommentsCount                  *int64                  `json:"commentsCount,omitempty"`
	LikesCount                     *int64                  `json:"likesCount,omitempty"`
	FollowersCount                 *int64                  `json:"followersCount,omitempty"`
	Score                          float64                 `json:"score"`
	PageviewsCount                 int64                   `json:"pageviewsCount"`
	PublicRead                     bool                    `json:"publicRead"`
	RegisteredRead                 bool                    `json:"registeredRead"`
	CountryCode                    *string                 `json:"countryCode,omitempty"`
	TaxID                          *string                 `json:"taxId,omitempty"`
	ContentPtrID                   string                  `json:"contentPtrId"`
	AvatarID                       *int64                  `json:"avatarId,omitempty"`
	Bio                            *string                 `json:"bio,omitempty"`
	PreferredName                  *string                 `json:"preferredName,omitempty"`
	UserTypeID                     *int64                  `json:"userTypeId,omitempty"`
	IntentID                       *int64                  `json:"intentId,omitempty"`
	UserID                         int64                   `json:"userId"`
	PreferedPlanID                 *int64                  `json:"preferedPlanId,omitempty"`
	IsConfirmed                    *string                 `json:"isConfirmed,omitempty"`
	HasAvatar                      *string                 `json:"hasAvatar,omitempty"`
	HasBio                         *string                 `json:"hasBio,omitempty"`
	FeaturedIn                     *string                 `json:"featuredIn,omitempty"`
	Avatar                         *File                   `json:"avatar,omitempty"`
	UserType                       *ProfileUserType        `json:"userType,omitempty"`
	Intent                         *ProfileIntent          `json:"intent,omitempty"`
	User                           *User                   `json:"user,omitempty"`
	PreferedPlan                   *BillingPlan            `json:"preferedPlan,omitempty"`
	Creator                        *User                   `json:"creator,omitempty"`
	Space                          *Space                  `json:"space,omitempty"`
	Followers                      *ProfileConnection      `json:"followers,omitempty"`
	Tags                           []*Tag                  `json:"tags,omitempty"`
	Comments                       *CommentConnection      `json:"comments,omitempty"`
	ContentType                    *string                 `json:"contentType,omitempty"`
	ParentSlug                     *string                 `json:"parentSlug,omitempty"`
	IsPrivate                      *bool                   `json:"isPrivate,omitempty"`
	Description                    *string                 `json:"description,omitempty"`
	Snippet                        *string                 `json:"snippet,omitempty"`
	Invoices                       []*BillingInvoice       `json:"invoices,omitempty"`
	BillingSubscriptions           []*BillingSubscription  `json:"billingSubscriptions,omitempty"`
	HasPrivateProjectsSubscription *bool                   `json:"hasPrivateProjectsSubscription,omitempty"`
	HasPaidSubscription            *bool                   `json:"hasPaidSubscription,omitempty"`
	HasBillingPermissions          *bool                   `json:"hasBillingPermissions,omitempty"`
	HasValidPaymentMethod          *bool                   `json:"hasValidPaymentMethod,omitempty"`
	SeatsUsage                     *SeatsUsage             `json:"seatsUsage,omitempty"`
	SubscriptionPreview            *SubscriptionPreview    `json:"subscriptionPreview,omitempty"`
	CreditCards                    []*CreditCard           `json:"creditCards,omitempty"`
	TrialPeriodEnd                 *time.Time              `json:"trialPeriodEnd,omitempty"`
	RemainingSharedFiles           *int64                  `json:"remainingSharedFiles,omitempty"`
	SocialAccounts                 []*Social               `json:"socialAccounts,omitempty"`
	Forum                          *Forum                  `json:"forum,omitempty"`
	FollowingCount                 *int64                  `json:"followingCount,omitempty"`
	CanUpdate                      *bool                   `json:"canUpdate,omitempty"`
	CanDelete                      *bool                   `json:"canDelete,omitempty"`
	Content                        *Content                `json:"content,omitempty"`
	ParentContent                  *Content                `json:"parentContent,omitempty"`
	InSpace                        *Space                  `json:"inSpace,omitempty"`
	ImageFallbackChar              *string                 `json:"imageFallbackChar,omitempty"`
	Title                          *string                 `json:"title,omitempty"`
	Commenters                     []*Profile              `json:"commenters,omitempty"`
	PageViews                      *int64                  `json:"pageViews,omitempty"`
	Management                     *string                 `json:"management,omitempty"`
	Username                       *string                 `json:"username,omitempty"`
	Email                          *string                 `json:"email,omitempty"`
	FullName                       *string                 `json:"fullName,omitempty"`
	Locale                         *string                 `json:"locale,omitempty"`
	InvitesLeft                    *int64                  `json:"invitesLeft,omitempty"`
	ProfileConfirmed               *bool                   `json:"profileConfirmed,omitempty"`
	Skills                         []*Tag                  `json:"skills,omitempty"`
	Initiatives                    *InitiativeConnection   `json:"initiatives,omitempty"`
	Projects                       *ProjectConnection      `json:"projects,omitempty"`
	SharedFiles                    *SharedFileConnection   `json:"sharedFiles,omitempty"`
	Threads                        *ThreadConnection       `json:"threads,omitempty"`
	Stories                        *StoryConnection        `json:"stories,omitempty"`
	Collections                    *CollectionConnection   `json:"collections,omitempty"`
	Contributions                  *ContributionConnection `json:"contributions,omitempty"`
	FollowingProfiles              *ProfileConnection      `json:"followingProfiles,omitempty"`
	FollowingInitiatives           *InitiativeConnection   `json:"followingInitiatives,omitempty"`
	FollowingChannels              *ChannelConnection      `json:"followingChannels,omitempty"`
	FollowingProjects              *ProjectConnection      `json:"followingProjects,omitempty"`
	ContributedProjects            *ProjectConnection      `json:"contributedProjects,omitempty"`
	Teams                          []*GroupMember          `json:"teams,omitempty"`
	ProjectsCount                  *int64                  `json:"projectsCount,omitempty"`
	StoriesCount                   *int64                  `json:"storiesCount,omitempty"`
	CollectionsCount               *int64                  `json:"collectionsCount,omitempty"`
}

func (Profile) IsNode()               {}
func (Profile) IsContentInterface()   {}
func (Profile) IsNotificationTarget() {}

type ProfileConnection struct {
	PageInfo   *PageInfo      `json:"pageInfo,omitempty"`
	Edges      []*ProfileEdge `json:"edges,omitempty"`
	TotalCount *int64         `json:"totalCount,omitempty"`
}

type ProfileConnectionErrorHandler struct {
	UserErrors []*UserError       `json:"userErrors,omitempty"`
	Result     *ProfileConnection `json:"result,omitempty"`
}

type ProfileEdge struct {
	// The item at the end of the edge
	Node *Profile `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type ProfileInput struct {
	ID             *string               `json:"id,omitempty"`
	Deleted        *bool                 `json:"deleted,omitempty"`
	Username       *string               `json:"username,omitempty"`
	FullName       *string               `json:"fullName,omitempty"`
	Bio            *string               `json:"bio,omitempty"`
	Avatar         *string               `json:"avatar,omitempty"`
	Skills         []*TagInput           `json:"skills,omitempty"`
	SocialAccounts []*SocialAccountInput `json:"socialAccounts,omitempty"`
	IntentID       *string               `json:"intentId,omitempty"`
	UserTypeID     *string               `json:"userTypeId,omitempty"`
}

type ProfileIntent struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type ProfileUserType struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type Project struct {
	ID                        string                  `json:"id"`
	Type                      *string                 `json:"type,omitempty"`
	Slug                      *string                 `json:"slug,omitempty"`
	CreatorID                 int64                   `json:"creatorId"`
	CreatedInRegion           *string                 `json:"createdInRegion,omitempty"`
	SpaceID                   *int64                  `json:"spaceId,omitempty"`
	DateCreated               *time.Time              `json:"dateCreated,omitempty"`
	LastUpdated               *time.Time              `json:"lastUpdated,omitempty"`
	Whitelabel                *string                 `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent     *bool                   `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt           *time.Time              `json:"lastCommentedAt,omitempty"`
	LastActivityAt            time.Time               `json:"lastActivityAt"`
	CommentsCount             *int64                  `json:"commentsCount,omitempty"`
	LikesCount                *int64                  `json:"likesCount,omitempty"`
	FollowersCount            *int64                  `json:"followersCount,omitempty"`
	Score                     float64                 `json:"score"`
	PageviewsCount            int64                   `json:"pageviewsCount"`
	PublicRead                bool                    `json:"publicRead"`
	RegisteredRead            bool                    `json:"registeredRead"`
	ContentPtrID              string                  `json:"contentPtrId"`
	Name                      *string                 `json:"name,omitempty"`
	Description               *string                 `json:"description,omitempty"`
	ImageID                   *int64                  `json:"imageId,omitempty"`
	License                   *License                `json:"license,omitempty"`
	ContributionCount         *int64                  `json:"contributionCount,omitempty"`
	ArchiveDownloadCount      int64                   `json:"archiveDownloadCount"`
	ContextID                 int64                   `json:"contextId"`
	ProjectType               ProjectType             `json:"projectType"`
	ImportStatus              *ImportStatus           `json:"importStatus,omitempty"`
	ImportJobID               *string                 `json:"importJobId,omitempty"`
	SlackThreadTs             *string                 `json:"slackThreadTs,omitempty"`
	SlackContributionThreadTs string                  `json:"slackContributionThreadTs"`
	HasImage                  *string                 `json:"hasImage,omitempty"`
	CanAppearOnHome           *string                 `json:"canAppearOnHome,omitempty"`
	HasContributions          *string                 `json:"hasContributions,omitempty"`
	StarCount                 *int64                  `json:"starCount,omitempty"`
	IsExactForkCopy           *string                 `json:"isExactForkCopy,omitempty"`
	HeadContribution          *string                 `json:"headContribution,omitempty"`
	FeaturedIn                *string                 `json:"featuredIn,omitempty"`
	Image                     *File                   `json:"image,omitempty"`
	Phase                     *ProjectPhase           `json:"phase,omitempty"`
	Context                   *Context                `json:"context,omitempty"`
	Creator                   *User                   `json:"creator,omitempty"`
	Space                     *Space                  `json:"space,omitempty"`
	Followers                 *ProfileConnection      `json:"followers,omitempty"`
	Tags                      []*Tag                  `json:"tags,omitempty"`
	Collections               []*Collection           `json:"collections,omitempty"`
	Comments                  *CommentConnection      `json:"comments,omitempty"`
	Contributions             *ContributionConnection `json:"contributions,omitempty"`
	ContentType               *string                 `json:"contentType,omitempty"`
	ParentSlug                *string                 `json:"parentSlug,omitempty"`
	IsPrivate                 *bool                   `json:"isPrivate,omitempty"`
	Snippet                   *string                 `json:"snippet,omitempty"`
	InviteLink                *InviteLink             `json:"inviteLink,omitempty"`
	SocialAccounts            []*Social               `json:"socialAccounts,omitempty"`
	Forum                     *Forum                  `json:"forum,omitempty"`
	FollowingCount            *int64                  `json:"followingCount,omitempty"`
	CanUpdate                 *bool                   `json:"canUpdate,omitempty"`
	CanDelete                 *bool                   `json:"canDelete,omitempty"`
	Content                   *Content                `json:"content,omitempty"`
	ParentContent             *Content                `json:"parentContent,omitempty"`
	InSpace                   *Space                  `json:"inSpace,omitempty"`
	Avatar                    *File                   `json:"avatar,omitempty"`
	ImageFallbackChar         *string                 `json:"imageFallbackChar,omitempty"`
	Title                     *string                 `json:"title,omitempty"`
	Commenters                []*Profile              `json:"commenters,omitempty"`
	PageViews                 *int64                  `json:"pageViews,omitempty"`
	DescriptionSnippet        *string                 `json:"descriptionSnippet,omitempty"`
	Private                   *bool                   `json:"private,omitempty"`
	ForkedFrom                *DiffInfo               `json:"forkedFrom,omitempty"`
	PendingOperations         []*ContribOp            `json:"pendingOperations,omitempty"`
	Conflicts                 []*Conflict             `json:"conflicts,omitempty"`
	ConflictsParent           *string                 `json:"conflictsParent,omitempty"`
	ContributionUpstream      *Contribution           `json:"contributionUpstream,omitempty"`
	LastZipGenerated          *bool                   `json:"lastZipGenerated,omitempty"`
	FilesInfo                 *ProjectFilesInfo       `json:"filesInfo,omitempty"`
	Tracker                   *Tracker                `json:"tracker,omitempty"`
	CreatorProfile            *Profile                `json:"creatorProfile,omitempty"`
	IsStarred                 *bool                   `json:"isStarred,omitempty"`
	ForkCount                 *int64                  `json:"forkCount,omitempty"`
	Contribution              *Contribution           `json:"contribution,omitempty"`
	Contributors              *ProfileConnection      `json:"contributors,omitempty"`
	FileHistory               *OpsConnection          `json:"fileHistory,omitempty"`
}

func (Project) IsNode()               {}
func (Project) IsContentInterface()   {}
func (Project) IsNotificationTarget() {}

type ProjectConnection struct {
	PageInfo   *PageInfo      `json:"pageInfo,omitempty"`
	Edges      []*ProjectEdge `json:"edges,omitempty"`
	TotalCount *int64         `json:"totalCount,omitempty"`
}

type ProjectConnectionErrorHandler struct {
	UserErrors []*UserError       `json:"userErrors,omitempty"`
	Result     *ProjectConnection `json:"result,omitempty"`
}

type ProjectEdge struct {
	// The item at the end of the edge
	Node *Project `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type ProjectFilesInfo struct {
	TotalFiles         *int64   `json:"totalFiles,omitempty"`
	EcadFiles          *int64   `json:"ecadFiles,omitempty"`
	McadFiles          *int64   `json:"mcadFiles,omitempty"`
	ImageFiles         *int64   `json:"imageFiles,omitempty"`
	DataFiles          *int64   `json:"dataFiles,omitempty"`
	DocumentFiles      *int64   `json:"documentFiles,omitempty"`
	OtherFiles         *int64   `json:"otherFiles,omitempty"`
	EcadProportion     *float64 `json:"ecadProportion,omitempty"`
	McadProportion     *float64 `json:"mcadProportion,omitempty"`
	ImageProportion    *float64 `json:"imageProportion,omitempty"`
	DataProportion     *float64 `json:"dataProportion,omitempty"`
	DocumentProportion *float64 `json:"documentProportion,omitempty"`
	OtherProportion    *float64 `json:"otherProportion,omitempty"`
}

type ProjectInput struct {
	ID             *string     `json:"id,omitempty"`
	Deleted        *bool       `json:"deleted,omitempty"`
	SpaceID        *string     `json:"spaceId,omitempty"`
	Name           *string     `json:"name,omitempty"`
	Image          *string     `json:"image,omitempty"`
	Description    *string     `json:"description,omitempty"`
	License        *string     `json:"license,omitempty"`
	PhaseID        *string     `json:"phaseId,omitempty"`
	Tags           []*TagInput `json:"tags,omitempty"`
	Private        *bool       `json:"private,omitempty"`
	Invites        []*string   `json:"invites,omitempty"`
	AddFeatured    *string     `json:"addFeatured,omitempty"`
	RemoveFeatured *string     `json:"removeFeatured,omitempty"`
}

type ProjectMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Project    *Project     `json:"project,omitempty"`
}

type ProjectPhase struct {
	ID    *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Color *string `json:"color,omitempty"`
	Order *int64  `json:"order,omitempty"`
}

type ProjectVisibilityInput struct {
	ID      *string `json:"id,omitempty"`
	Deleted *bool   `json:"deleted,omitempty"`
	Space   string  `json:"space"`
	Slug    string  `json:"slug"`
	Private *bool   `json:"private,omitempty"`
}

type ProjectVisibilityMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type Quote struct {
	ID                string           `json:"id"`
	For               *JobSpec         `json:"for,omitempty"`
	From              *RequestForQuote `json:"from,omitempty"`
	Supplier          Supplier         `json:"supplier,omitempty"`
	Cost              int64            `json:"cost"`
	Currency          string           `json:"currency"`
	ValidUntil        time.Time        `json:"validUntil"`
	ShippingQuote     *ShippingQuote   `json:"shippingQuote,omitempty"`
	Orders            []*Order         `json:"orders,omitempty"`
	RejectReason      *string          `json:"rejectReason,omitempty"`
	RejectDescription *string          `json:"rejectDescription,omitempty"`
	Notes             *string          `json:"notes,omitempty"`
	IsEstimated       bool             `json:"isEstimated"`
	IsVoid            bool             `json:"isVoid"`
	CreatedBy         Supplier         `json:"createdBy,omitempty"`
	CreatedAt         time.Time        `json:"createdAt"`
}

func (Quote) IsNode() {}

type QuotePage struct {
	Nodes []*Quote `json:"nodes,omitempty"`
	Total int64    `json:"total"`
}

func (QuotePage) IsPage() {}

type ReadMessageInput struct {
	MessageID string `json:"messageId"`
}

type RejectInvite struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type RejectInviteInput struct {
	InviteID string `json:"inviteId"`
}

type RejectQuoteInput struct {
	QuoteID     string  `json:"quoteId"`
	Reason      string  `json:"reason"`
	Description *string `json:"description,omitempty"`
}

type Release struct {
	ID           string        `json:"id"`
	Tag          string        `json:"tag"`
	ProductBuild *ProductBuild `json:"productBuild,omitempty"`
}

func (Release) IsNode() {}

type RemoveUserFromGroup struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Group      *Group       `json:"group,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type RequestForQuote struct {
	ID                   string               `json:"id"`
	State                RequestForQuoteState `json:"state"`
	Type                 RequestForQuoteType  `json:"type"`
	JobSpec              *JobSpec             `json:"jobSpec,omitempty"`
	IntermediatorSession *Session             `json:"intermediatorSession,omitempty"`
	Sessions             []*Session           `json:"sessions,omitempty"`
	Quotes               []*Quote             `json:"quotes,omitempty"`
	QuotingPriorityData  *string              `json:"quotingPriorityData,omitempty"`
	QuotesNeededBy       *time.Time           `json:"quotesNeededBy,omitempty"`
	EstimatedAwardDate   *time.Time           `json:"estimatedAwardDate,omitempty"`
	FileRequirements     []*FileRequirement   `json:"fileRequirements,omitempty"`
	CustomerSpace        *Space               `json:"customerSpace,omitempty"`
	CreatedAt            time.Time            `json:"createdAt"`
}

func (RequestForQuote) IsNode() {}

type RequestForQuotePage struct {
	Nodes []*RequestForQuote `json:"nodes,omitempty"`
	Total int64              `json:"total"`
}

func (RequestForQuotePage) IsPage() {}

type RequestResetPassword struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type ResendInvite struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type ResendInviteInput struct {
	InviteID *string `json:"inviteId,omitempty"`
}

type ResetContributionInput struct {
	ProjectID *string `json:"projectId,omitempty"`
	Path      *string `json:"path,omitempty"`
}

type ResetContributionMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Project    *Project     `json:"project,omitempty"`
}

type SearchResult struct {
	Profiles    *ProfileConnection    `json:"profiles,omitempty"`
	Projects    *ProjectConnection    `json:"projects,omitempty"`
	Initiatives *InitiativeConnection `json:"initiatives,omitempty"`
	Stories     *StoryConnection      `json:"stories,omitempty"`
	Collections *CollectionConnection `json:"collections,omitempty"`
	Threads     *ThreadConnection     `json:"threads,omitempty"`
	Channels    *ChannelConnection    `json:"channels,omitempty"`
}

type SeatsUsage struct {
	ID                *string `json:"id,omitempty"`
	UsedSpaceSeats    *int64  `json:"usedSpaceSeats,omitempty"`
	UsedProjectsSeats *int64  `json:"usedProjectsSeats,omitempty"`
	UsedInvitesSeats  *int64  `json:"usedInvitesSeats,omitempty"`
	UnusedSeats       *int64  `json:"unusedSeats,omitempty"`
	IncludedPlanSeats *int64  `json:"includedPlanSeats,omitempty"`
	PurchasedSeats    *int64  `json:"purchasedSeats,omitempty"`
	TotalSubSeats     *int64  `json:"totalSubSeats,omitempty"`
	SeatsChange       *int64  `json:"seatsChange,omitempty"`
}

type SelectedOptionValueInput struct {
	SelectedValue *SelectedValueInput `json:"selectedValue,omitempty"`
}

type SelectedValueInput struct {
	OptionID    string   `json:"optionId"`
	ValueBool   *bool    `json:"valueBool,omitempty"`
	ValueString *string  `json:"valueString,omitempty"`
	ValueFloat  *float64 `json:"valueFloat,omitempty"`
	ValueInt    *int64   `json:"valueInt,omitempty"`
}

type SelectionOption struct {
	ID        string            `json:"id"`
	Name      string            `json:"name"`
	For       Optionable        `json:"for,omitempty"`
	ValueType OptionValueType   `json:"valueType"`
	Required  bool              `json:"required"`
	Order     *string           `json:"order,omitempty"`
	Unit      *string           `json:"unit,omitempty"`
	NilLabel  *string           `json:"nilLabel,omitempty"`
	Prefix    *string           `json:"prefix,omitempty"`
	Instances []*OptionInstance `json:"instances,omitempty"`
	Values    []*OptionValue    `json:"values,omitempty"`
}

func (SelectionOption) IsNode()       {}
func (SelectionOption) IsOption()     {}
func (SelectionOption) IsRequirable() {}

type Service struct {
	ID       string    `json:"id"`
	IsActive bool      `json:"isActive"`
	Process  *Process  `json:"process,omitempty"`
	Material *Material `json:"material,omitempty"`
}

func (Service) IsNode() {}

type ServiceFilter struct {
	ManufacturerID []string `json:"manufacturerId,omitempty"`
	MaterialID     []string `json:"materialId,omitempty"`
	ProcessID      []string `json:"processId,omitempty"`
}

type ServiceInstance struct {
	ID           string        `json:"id"`
	IsArchived   bool          `json:"isArchived"`
	Service      *Service      `json:"service,omitempty"`
	Manufacturer *Manufacturer `json:"manufacturer,omitempty"`
}

func (ServiceInstance) IsNode() {}

type ServicePage struct {
	Nodes []*Service `json:"nodes,omitempty"`
	Total int64      `json:"total"`
}

func (ServicePage) IsPage() {}

type Session struct {
	ID              string           `json:"id"`
	Supplier        Supplier         `json:"supplier,omitempty"`
	State           SessionState     `json:"state"`
	RequestForQuote *RequestForQuote `json:"requestForQuote,omitempty"`
	JobSpecs        []*JobSpec       `json:"jobSpecs,omitempty"`
	ShareFile       *SharedFile      `json:"shareFile,omitempty"`
	CreatedAt       time.Time        `json:"createdAt"`
}

func (Session) IsNode() {}

type SessionFilterInput struct {
	ID                *string       `json:"id,omitempty"`
	RequestForQuoteID *string       `json:"requestForQuoteId,omitempty"`
	State             *SessionState `json:"state,omitempty"`
}

type SessionPage struct {
	Nodes []*Session `json:"nodes,omitempty"`
	Total int64      `json:"total"`
}

func (SessionPage) IsPage() {}

type SharedFile struct {
	ID        string                        `json:"id"`
	Name      *string                       `json:"name,omitempty"`
	Revision  *SharedFileRevision           `json:"revision,omitempty"`
	Revisions *SharedFileRevisionConnection `json:"revisions,omitempty"`
	Groups    []*Group                      `json:"groups,omitempty"`
	Creator   *User                         `json:"creator,omitempty"`
	Context   *Context                      `json:"context,omitempty"`
	Space     *Space                        `json:"space,omitempty"`
	InSpace   *Space                        `json:"inSpace,omitempty"`
	CanUpdate *bool                         `json:"canUpdate,omitempty"`
	CanDelete *bool                         `json:"canDelete,omitempty"`
	IsPrivate *bool                         `json:"isPrivate,omitempty"`
	Slug      *string                       `json:"slug,omitempty"`
	FirstFile *File                         `json:"firstFile,omitempty"`
}

func (SharedFile) IsNode() {}

type SharedFileConnection struct {
	PageInfo   *PageInfo         `json:"pageInfo,omitempty"`
	Edges      []*SharedFileEdge `json:"edges,omitempty"`
	TotalCount *int64            `json:"totalCount,omitempty"`
}

type SharedFileEdge struct {
	// The item at the end of the edge
	Node *SharedFile `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type SharedFileRevision struct {
	ID             string     `json:"id"`
	Version        *string    `json:"version,omitempty"`
	DateCreated    *time.Time `json:"dateCreated,omitempty"`
	LastUpdated    *time.Time `json:"lastUpdated,omitempty"`
	Title          *string    `json:"title,omitempty"`
	SharedFileName *string    `json:"sharedFileName,omitempty"`
	Creator        *User      `json:"creator,omitempty"`
	File           *File      `json:"file,omitempty"`
}

func (SharedFileRevision) IsNode() {}

type SharedFileRevisionConnection struct {
	PageInfo   *PageInfo                 `json:"pageInfo,omitempty"`
	Edges      []*SharedFileRevisionEdge `json:"edges,omitempty"`
	TotalCount *int64                    `json:"totalCount,omitempty"`
}

type SharedFileRevisionEdge struct {
	// The item at the end of the edge
	Node *SharedFileRevision `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type ShippingDetail struct {
	ID             string   `json:"id"`
	Address        *Address `json:"address,omitempty"`
	Provider       *string  `json:"provider,omitempty"`
	TrackingNumber *string  `json:"trackingNumber,omitempty"`
}

func (ShippingDetail) IsNode() {}

type ShippingQuote struct {
	ID             string  `json:"id"`
	IsTaxInclusive bool    `json:"isTaxInclusive"`
	Currency       string  `json:"currency"`
	Cost           int64   `json:"cost"`
	DeliveryTime   int64   `json:"deliveryTime"`
	Provider       *string `json:"provider,omitempty"`
}

func (ShippingQuote) IsNode() {}

type SignInInput struct {
	Username *string `json:"username,omitempty"`
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
	SignOut  *bool   `json:"signOut,omitempty"`
}

// fields used on signup with email
type SignupInput struct {
	Username       *string     `json:"username,omitempty"`
	Email          *string     `json:"email,omitempty"`
	Password       *string     `json:"password,omitempty"`
	FullName       *string     `json:"fullName,omitempty"`
	PreferredName  *string     `json:"preferredName,omitempty"`
	Locale         *string     `json:"locale,omitempty"`
	EmailsEnabled  *bool       `json:"emailsEnabled,omitempty"`
	Bio            *string     `json:"bio,omitempty"`
	IntentID       *string     `json:"intentId,omitempty"`
	UserTypeID     *string     `json:"userTypeId,omitempty"`
	Skills         []*TagInput `json:"skills,omitempty"`
	StartFreeTrial *bool       `json:"startFreeTrial,omitempty"`
	EncodedExtra   *string     `json:"encodedExtra,omitempty"`
}

type SignupInviteInput struct {
	Emails *string `json:"emails,omitempty"`
}

type SignupRequest struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type SignupRequestInput struct {
	Email *string `json:"email,omitempty"`
	Bio   *string `json:"bio,omitempty"`
}

type Skill struct {
	// The ID of the object.
	ID          string  `json:"id"`
	Content     *string `json:"content,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	SkillType   *string `json:"skillType,omitempty"`
}

func (Skill) IsNode() {}

type SlugInput struct {
	Type  *string `json:"type,omitempty"`
	Space *string `json:"space,omitempty"`
	Text  *string `json:"text,omitempty"`
}

type SlugUnique struct {
	Value  *string `json:"value,omitempty"`
	Unique *bool   `json:"unique,omitempty"`
}

type Social struct {
	// The ID of the object.
	ID          string  `json:"id"`
	AccountName *string `json:"accountName,omitempty"`
	AccountType *string `json:"accountType,omitempty"`
}

func (Social) IsNode() {}

type SocialAccountInput struct {
	ID          *string `json:"id,omitempty"`
	Deleted     *bool   `json:"deleted,omitempty"`
	AccountName *string `json:"accountName,omitempty"`
	AccountType *string `json:"accountType,omitempty"`
}

type Space struct {
	// The ID of the object.
	ID                             string     `json:"id"`
	Parent                         *Space     `json:"parent,omitempty"`
	Content                        *Content   `json:"content,omitempty"`
	SpaceType                      *string    `json:"spaceType,omitempty"`
	HasPrivateProjectsSubscription *bool      `json:"hasPrivateProjectsSubscription,omitempty"`
	HasPaidSubscription            *bool      `json:"hasPaidSubscription,omitempty"`
	HasBillingPermissions          *bool      `json:"hasBillingPermissions,omitempty"`
	HasValidPaymentMethod          *bool      `json:"hasValidPaymentMethod,omitempty"`
	TrialPeriodEnd                 *time.Time `json:"trialPeriodEnd,omitempty"`
	RemainingSharedFiles           *int64     `json:"remainingSharedFiles,omitempty"`
	WhichTypes                     []*string  `json:"whichTypes,omitempty"`
}

func (Space) IsNode() {}

type Story struct {
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         *int64             `json:"commentsCount,omitempty"`
	LikesCount            *int64             `json:"likesCount,omitempty"`
	FollowersCount        *int64             `json:"followersCount,omitempty"`
	Score                 float64            `json:"score"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	ContentPtrID          string             `json:"contentPtrId"`
	AvatarID              *int64             `json:"avatarId,omitempty"`
	Title                 *string            `json:"title,omitempty"`
	Body                  *string            `json:"body,omitempty"`
	BodyWordCount         int64              `json:"bodyWordCount"`
	CanAppearOnHome       *string            `json:"canAppearOnHome,omitempty"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Space                 *Space             `json:"space,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	ContentType           *string            `json:"contentType,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Description           *string            `json:"description,omitempty"`
	Snippet               *string            `json:"snippet,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
	BodySnippet           *string            `json:"bodySnippet,omitempty"`
	ReadLength            *int64             `json:"readLength,omitempty"`
	CreatorProfile        *Profile           `json:"creatorProfile,omitempty"`
}

func (Story) IsNode()               {}
func (Story) IsContentInterface()   {}
func (Story) IsNotificationTarget() {}

type StoryConnection struct {
	PageInfo   *PageInfo    `json:"pageInfo,omitempty"`
	Edges      []*StoryEdge `json:"edges,omitempty"`
	TotalCount *int64       `json:"totalCount,omitempty"`
}

type StoryConnectionErrorHandler struct {
	UserErrors []*UserError     `json:"userErrors,omitempty"`
	Result     *StoryConnection `json:"result,omitempty"`
}

type StoryEdge struct {
	// The item at the end of the edge
	Node *Story `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type StoryInput struct {
	ID             *string     `json:"id,omitempty"`
	Deleted        *bool       `json:"deleted,omitempty"`
	SpaceID        *string     `json:"spaceId,omitempty"`
	Title          *string     `json:"title,omitempty"`
	Body           *string     `json:"body,omitempty"`
	Tags           []*TagInput `json:"tags,omitempty"`
	Avatar         *string     `json:"avatar,omitempty"`
	AddFeatured    *string     `json:"addFeatured,omitempty"`
	RemoveFeatured *string     `json:"removeFeatured,omitempty"`
}

type StoryMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Story      *Story       `json:"story,omitempty"`
}

type SubscriptionPreview struct {
	ID                 *string     `json:"id,omitempty"`
	TotalAmount        *int64      `json:"totalAmount,omitempty"`
	PerSeatAmount      *int64      `json:"perSeatAmount,omitempty"`
	InitialAmount      *int64      `json:"initialAmount,omitempty"`
	BillingStarts      *time.Time  `json:"billingStarts,omitempty"`
	ProrationAmount    *int64      `json:"prorationAmount,omitempty"`
	ProrationTimestamp *int64      `json:"prorationTimestamp,omitempty"`
	DiscountAmount     *int64      `json:"discountAmount,omitempty"`
	Seats              *SeatsUsage `json:"seats,omitempty"`
}

type SuggestedProjectConnection struct {
	PageInfo   *PageInfo               `json:"pageInfo,omitempty"`
	Edges      []*SuggestedProjectEdge `json:"edges,omitempty"`
	TotalCount *int64                  `json:"totalCount,omitempty"`
}

type SuggestedProjectConnectionErrorHandler struct {
	UserErrors []*UserError                `json:"userErrors,omitempty"`
	Result     *SuggestedProjectConnection `json:"result,omitempty"`
}

type SuggestedProjectEdge struct {
	// The item at the end of the edge
	Node *Project `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type Tag struct {
	// The ID of the object.
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (Tag) IsNode() {}

type TagInput struct {
	ID      *string `json:"id,omitempty"`
	Deleted *bool   `json:"deleted,omitempty"`
	Name    *string `json:"name,omitempty"`
}

type Target struct {
	TargetType int64   `json:"targetType"`
	SelType    int64   `json:"selType"`
	InstanceIx int64   `json:"instanceIx"`
	BrepIx     int64   `json:"brepIx"`
	BodyIx     int64   `json:"bodyIx"`
	PrcPath    string  `json:"prcPath"`
	FaceHit    *bool   `json:"faceHit,omitempty"`
	FaceIx     *int64  `json:"faceIx,omitempty"`
	LoopIx     *int64  `json:"loopIx,omitempty"`
	EdgeIx     *int64  `json:"edgeIx,omitempty"`
	PointHit   *bool   `json:"pointHit,omitempty"`
	PointIx    *int64  `json:"pointIx,omitempty"`
	TriangleIx *int64  `json:"triangleIx,omitempty"`
	TrianglePt *Vector `json:"trianglePt,omitempty"`
	TriangleNr *Vector `json:"triangleNr,omitempty"`
}

type TargetInput struct {
	TargetType int64        `json:"targetType"`
	SelType    int64        `json:"selType"`
	InstanceIx int64        `json:"instanceIx"`
	BrepIx     int64        `json:"brepIx"`
	BodyIx     int64        `json:"bodyIx"`
	PrcPath    string       `json:"prcPath"`
	FaceHit    *bool        `json:"faceHit,omitempty"`
	FaceIx     *int64       `json:"faceIx,omitempty"`
	LoopIx     *int64       `json:"loopIx,omitempty"`
	EdgeIx     *int64       `json:"edgeIx,omitempty"`
	PointHit   *bool        `json:"pointHit,omitempty"`
	PointIx    *int64       `json:"pointIx,omitempty"`
	TriangleIx *int64       `json:"triangleIx,omitempty"`
	TrianglePt *VectorInput `json:"trianglePt,omitempty"`
	TriangleNr *VectorInput `json:"triangleNr,omitempty"`
}

type Thread struct {
	ID                    string             `json:"id"`
	Type                  *string            `json:"type,omitempty"`
	Slug                  *string            `json:"slug,omitempty"`
	CreatorID             int64              `json:"creatorId"`
	CreatedInRegion       *string            `json:"createdInRegion,omitempty"`
	SpaceID               *int64             `json:"spaceId,omitempty"`
	DateCreated           *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated           *time.Time         `json:"lastUpdated,omitempty"`
	Whitelabel            *string            `json:"whitelabel,omitempty"`
	WhiteLabelOnlyContent *bool              `json:"whiteLabelOnlyContent,omitempty"`
	LastCommentedAt       *time.Time         `json:"lastCommentedAt,omitempty"`
	LastActivityAt        time.Time          `json:"lastActivityAt"`
	CommentsCount         *int64             `json:"commentsCount,omitempty"`
	LikesCount            *int64             `json:"likesCount,omitempty"`
	FollowersCount        *int64             `json:"followersCount,omitempty"`
	PageviewsCount        int64              `json:"pageviewsCount"`
	PublicRead            bool               `json:"publicRead"`
	RegisteredRead        bool               `json:"registeredRead"`
	ContentPtrID          string             `json:"contentPtrId"`
	Title                 *string            `json:"title,omitempty"`
	Msg                   string             `json:"msg"`
	ForumID               *float64           `json:"forumId,omitempty"`
	CategoryID            *string            `json:"categoryId,omitempty"`
	MembersOnly           bool               `json:"membersOnly"`
	UpvoteCount           *string            `json:"upvoteCount,omitempty"`
	FeaturedIn            *string            `json:"featuredIn,omitempty"`
	Forum                 *Forum             `json:"forum,omitempty"`
	Category              *Category          `json:"category,omitempty"`
	Creator               *User              `json:"creator,omitempty"`
	Space                 *Space             `json:"space,omitempty"`
	Followers             *ProfileConnection `json:"followers,omitempty"`
	Tags                  []*Tag             `json:"tags,omitempty"`
	Comments              *CommentConnection `json:"comments,omitempty"`
	ContentType           *string            `json:"contentType,omitempty"`
	ParentSlug            *string            `json:"parentSlug,omitempty"`
	IsPrivate             *bool              `json:"isPrivate,omitempty"`
	Description           *string            `json:"description,omitempty"`
	Snippet               *string            `json:"snippet,omitempty"`
	URLID                 *string            `json:"urlId,omitempty"`
	CanUpdate             *bool              `json:"canUpdate,omitempty"`
	CanDelete             *bool              `json:"canDelete,omitempty"`
	Content               *Content           `json:"content,omitempty"`
	ParentContent         *Content           `json:"parentContent,omitempty"`
	InSpace               *Space             `json:"inSpace,omitempty"`
	Avatar                *File              `json:"avatar,omitempty"`
	ImageFallbackChar     *string            `json:"imageFallbackChar,omitempty"`
	Commenters            []*Profile         `json:"commenters,omitempty"`
	PageViews             *int64             `json:"pageViews,omitempty"`
	IsPinned              *bool              `json:"isPinned,omitempty"`
	CanPin                *bool              `json:"canPin,omitempty"`
	CreatorProfile        *Profile           `json:"creatorProfile,omitempty"`
}

func (Thread) IsNode()               {}
func (Thread) IsContentInterface()   {}
func (Thread) IsNotificationTarget() {}

type ThreadConnection struct {
	PageInfo   *PageInfo     `json:"pageInfo,omitempty"`
	Edges      []*ThreadEdge `json:"edges,omitempty"`
	TotalCount *int64        `json:"totalCount,omitempty"`
}

type ThreadConnectionErrorHandler struct {
	UserErrors []*UserError      `json:"userErrors,omitempty"`
	Result     *ThreadConnection `json:"result,omitempty"`
}

type ThreadEdge struct {
	// The item at the end of the edge
	Node *Thread `json:"node,omitempty"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type ThreadInput struct {
	ID          *string     `json:"id,omitempty"`
	MembersOnly *bool       `json:"membersOnly,omitempty"`
	Deleted     *bool       `json:"deleted,omitempty"`
	Title       *string     `json:"title,omitempty"`
	Msg         *string     `json:"msg,omitempty"`
	CategoryID  *string     `json:"categoryId,omitempty"`
	Tags        []*TagInput `json:"tags,omitempty"`
}

type ThreadMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Thread     *Thread      `json:"thread,omitempty"`
}

type Tracker struct {
	// The ID of the object.
	ID                string           `json:"id"`
	Issues            *IssueConnection `json:"issues,omitempty"`
	Issue             *Issue           `json:"issue,omitempty"`
	Labels            []*Label         `json:"labels,omitempty"`
	OpenIssuesCount   *int64           `json:"openIssuesCount,omitempty"`
	ClosedIssuesCount *int64           `json:"closedIssuesCount,omitempty"`
}

func (Tracker) IsNode() {}

type TransferProjectInput struct {
	Space       string `json:"space"`
	Slug        string `json:"slug"`
	TargetSpace string `json:"targetSpace"`
}

type TransferProjectMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Project    *Project     `json:"project,omitempty"`
}

type UpdateAddressInput struct {
	AddressID string `json:"addressId"`
	Default   *bool  `json:"default,omitempty"`
}

type UpdateBuildInput struct {
	FileID          *string                     `json:"fileId,omitempty"`
	MaterialID      *string                     `json:"materialId,omitempty"`
	ProcessID       *string                     `json:"processId,omitempty"`
	SupportingFiles *UpdateSupportingFilesInput `json:"supportingFiles,omitempty"`
}

type UpdateImportProjectInput struct {
	ProjectID   string  `json:"projectId"`
	ImportURL   *string `json:"importUrl,omitempty"`
	ImportToken *string `json:"importToken,omitempty"`
}

type UpdateImportProjectMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *string      `json:"result,omitempty"`
}

type UpdateJobSpecInput struct {
	ShippingAddress *string           `json:"shippingAddress,omitempty"`
	Quantity        *int64            `json:"quantity,omitempty"`
	LeadTime        *int64            `json:"leadTime,omitempty"`
	Build           *UpdateBuildInput `json:"build,omitempty"`
}

type UpdateManufacturerInput struct {
	ManufacturingID string   `json:"manufacturingId"`
	EnquiryEmail    *string  `json:"enquiryEmail,omitempty"`
	ShipsTo         []string `json:"shipsTo,omitempty"`
	Telephone       *string  `json:"telephone,omitempty"`
	FoundingYear    *int64   `json:"foundingYear,omitempty"`
	Industries      []string `json:"industries,omitempty"`
	NumEmployees    *int64   `json:"numEmployees,omitempty"`
	NumMachines     *int64   `json:"numMachines,omitempty"`
	FileFormats     []string `json:"fileFormats,omitempty"`
	CaseStudies     []string `json:"caseStudies,omitempty"`
	CompanyType     []string `json:"companyType,omitempty"`
}

type UpdateMaterialInput struct {
	ID           string  `json:"id"`
	Name         *string `json:"name,omitempty"`
	ParentID     *string `json:"parentId,omitempty"`
	IsSelectable *bool   `json:"isSelectable,omitempty"`
}

type UpdateMessageInput struct {
	MessageID string `json:"messageId"`
	Body      string `json:"body"`
}

type UpdateOptionInstanceInput struct {
	OptionInstanceID string   `json:"optionInstanceId"`
	OptionID         *string  `json:"optionId,omitempty"`
	ValueInt         *int64   `json:"valueInt,omitempty"`
	ValueFloat       *float64 `json:"valueFloat,omitempty"`
	ValueString      *string  `json:"valueString,omitempty"`
	ValueBool        *bool    `json:"valueBool,omitempty"`
}

type UpdateOrderInput struct {
	OrderID     string      `json:"orderId"`
	OrderStatus OrderStatus `json:"orderStatus"`
}

type UpdateProcessInput struct {
	ID           string  `json:"id"`
	Name         *string `json:"name,omitempty"`
	ParentID     *string `json:"parentId,omitempty"`
	IsSelectable *bool   `json:"isSelectable,omitempty"`
}

type UpdateProfile struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Profile    *Profile     `json:"profile,omitempty"`
}

type UpdateRequestForQuoteInput struct {
	RequestForQuoteID  string              `json:"requestForQuoteId"`
	QuotesNeededBy     *time.Time          `json:"quotesNeededBy,omitempty"`
	EstimatedAwardDate *time.Time          `json:"estimatedAwardDate,omitempty"`
	JobSpec            *UpdateJobSpecInput `json:"jobSpec,omitempty"`
}

type UpdateServiceInstanceInput struct {
	ServiceInstanceID string `json:"serviceInstanceId"`
	IsArchived        bool   `json:"isArchived"`
}

type UpdateSharedFileInput struct {
	ID      string  `json:"id"`
	FileID  *string `json:"fileId,omitempty"`
	Private *bool   `json:"private,omitempty"`
}

type UpdateSharedFileMutation struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	SharedFile *SharedFile  `json:"sharedFile,omitempty"`
}

type UpdateSupportingFilesInput struct {
	ToDelete []string `json:"toDelete,omitempty"`
	ToAdd    []string `json:"toAdd,omitempty"`
}

type Upvote struct {
	// The ID of the object.
	ID          string    `json:"id"`
	UserID      int64     `json:"userId"`
	PostID      int64     `json:"postId"`
	DateCreated time.Time `json:"dateCreated"`
	User        *User     `json:"user,omitempty"`
	Post        *Post     `json:"post,omitempty"`
}

func (Upvote) IsNode() {}

type User struct {
	// The ID of the object.
	ID            string   `json:"id"`
	Username      *string  `json:"username,omitempty"`
	Email         *string  `json:"email,omitempty"`
	Locale        *string  `json:"locale,omitempty"`
	Profile       *Profile `json:"profile,omitempty"`
	EmailsEnabled *bool    `json:"emailsEnabled,omitempty"`
	AsSpace       []*Space `json:"asSpace,omitempty"`
}

func (User) IsNode() {}

type UserError struct {
	Code    *ErrorCodes `json:"code,omitempty"`
	Message *string     `json:"message,omitempty"`
	Key     *string     `json:"key,omitempty"`
}

type UserGroupActionInput struct {
	Username  *string `json:"username,omitempty"`
	SpaceID   *string `json:"spaceId,omitempty"`
	GroupName *string `json:"groupName,omitempty"`
}

type UserGroupInviteInput struct {
	Invites   []*string `json:"invites,omitempty"`
	SpaceID   *string   `json:"spaceId,omitempty"`
	GroupName *string   `json:"groupName,omitempty"`
}

type ValueInput struct {
	ValueString   *string        `json:"valueString,omitempty"`
	ValueInt      *int64         `json:"valueInt,omitempty"`
	ValueFloat    *float64       `json:"valueFloat,omitempty"`
	ValueBool     *bool          `json:"valueBool,omitempty"`
	ValueDateTime *time.Time     `json:"valueDateTime,omitempty"`
	ValueType     ValueInputType `json:"valueType"`
}

type Vector struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
	Z float64 `json:"z"`
}

type VectorInput struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
	Z float64 `json:"z"`
}

type ViewerState struct {
	Blob map[string]interface{} `json:"blob,omitempty"`
}

type ViralResponseIssueConnectionErrorHandler struct {
	UserErrors []*UserError     `json:"userErrors,omitempty"`
	Result     *IssueConnection `json:"result,omitempty"`
}

type ChannelErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Channel     `json:"result,omitempty"`
}

type CollectionErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Collection  `json:"result,omitempty"`
}

type ContributionFileErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *ContribFile `json:"result,omitempty"`
}

type FileErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *File        `json:"result,omitempty"`
}

type ForumErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Forum       `json:"result,omitempty"`
}

type ForumCategoryErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Category    `json:"result,omitempty"`
}

type GroupErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Group       `json:"result,omitempty"`
}

type InitiativeErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Initiative  `json:"result,omitempty"`
}

type InviteLinkErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *InviteLink  `json:"result,omitempty"`
}

type PostErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Post        `json:"result,omitempty"`
}

type ProfileErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Profile     `json:"result,omitempty"`
}

type ProjectErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Project     `json:"result,omitempty"`
}

type SharedFileErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *SharedFile  `json:"result,omitempty"`
}

type StoryErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Story       `json:"result,omitempty"`
}

type ThreadErrorHandler struct {
	UserErrors []*UserError `json:"userErrors,omitempty"`
	Result     *Thread      `json:"result,omitempty"`
}

type Certification string

const (
	CertificationIso9001   Certification = "ISO_9001"
	CertificationIso14001  Certification = "ISO_14001"
	CertificationIatf16949 Certification = "IATF_16949"
)

var AllCertification = []Certification{
	CertificationIso9001,
	CertificationIso14001,
	CertificationIatf16949,
}

func (e Certification) IsValid() bool {
	switch e {
	case CertificationIso9001, CertificationIso14001, CertificationIatf16949:
		return true
	}
	return false
}

func (e Certification) String() string {
	return string(e)
}

func (e *Certification) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Certification(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Certification", str)
	}
	return nil
}

func (e Certification) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ConversationType string

const (
	ConversationTypeFile  ConversationType = "FILE"
	ConversationTypeRfq   ConversationType = "RFQ"
	ConversationTypeOrder ConversationType = "ORDER"
)

var AllConversationType = []ConversationType{
	ConversationTypeFile,
	ConversationTypeRfq,
	ConversationTypeOrder,
}

func (e ConversationType) IsValid() bool {
	switch e {
	case ConversationTypeFile, ConversationTypeRfq, ConversationTypeOrder:
		return true
	}
	return false
}

func (e ConversationType) String() string {
	return string(e)
}

func (e *ConversationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConversationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConversationType", str)
	}
	return nil
}

func (e ConversationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ErrorCodes string

const (
	ErrorCodesValidation            ErrorCodes = "VALIDATION"
	ErrorCodesAuthentication        ErrorCodes = "AUTHENTICATION"
	ErrorCodesAuthorisation         ErrorCodes = "AUTHORISATION"
	ErrorCodesNotfound              ErrorCodes = "NOTFOUND"
	ErrorCodesRedirect              ErrorCodes = "REDIRECT"
	ErrorCodesUserMismatch          ErrorCodes = "USER_MISMATCH"
	ErrorCodesUserNotConfirmed      ErrorCodes = "USER_NOT_CONFIRMED"
	ErrorCodesProjectPaymentOverdue ErrorCodes = "PROJECT_PAYMENT_OVERDUE"
	ErrorCodesBillingCardDeclined   ErrorCodes = "BILLING_CARD_DECLINED"
	ErrorCodesBillingError          ErrorCodes = "BILLING_ERROR"
	ErrorCodesInviteError           ErrorCodes = "INVITE_ERROR"
	ErrorCodesUnhandledError        ErrorCodes = "UNHANDLED_ERROR"
	ErrorCodesNoBot                 ErrorCodes = "NO_BOT"
	ErrorCodesBadRequest            ErrorCodes = "BAD_REQUEST"
)

var AllErrorCodes = []ErrorCodes{
	ErrorCodesValidation,
	ErrorCodesAuthentication,
	ErrorCodesAuthorisation,
	ErrorCodesNotfound,
	ErrorCodesRedirect,
	ErrorCodesUserMismatch,
	ErrorCodesUserNotConfirmed,
	ErrorCodesProjectPaymentOverdue,
	ErrorCodesBillingCardDeclined,
	ErrorCodesBillingError,
	ErrorCodesInviteError,
	ErrorCodesUnhandledError,
	ErrorCodesNoBot,
	ErrorCodesBadRequest,
}

func (e ErrorCodes) IsValid() bool {
	switch e {
	case ErrorCodesValidation, ErrorCodesAuthentication, ErrorCodesAuthorisation, ErrorCodesNotfound, ErrorCodesRedirect, ErrorCodesUserMismatch, ErrorCodesUserNotConfirmed, ErrorCodesProjectPaymentOverdue, ErrorCodesBillingCardDeclined, ErrorCodesBillingError, ErrorCodesInviteError, ErrorCodesUnhandledError, ErrorCodesNoBot, ErrorCodesBadRequest:
		return true
	}
	return false
}

func (e ErrorCodes) String() string {
	return string(e)
}

func (e *ErrorCodes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCodes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCodes", str)
	}
	return nil
}

func (e ErrorCodes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MinMaxType string

const (
	MinMaxTypeMin MinMaxType = "MIN"
	MinMaxTypeMax MinMaxType = "MAX"
)

var AllMinMaxType = []MinMaxType{
	MinMaxTypeMin,
	MinMaxTypeMax,
}

func (e MinMaxType) IsValid() bool {
	switch e {
	case MinMaxTypeMin, MinMaxTypeMax:
		return true
	}
	return false
}

func (e MinMaxType) String() string {
	return string(e)
}

func (e *MinMaxType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MinMaxType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MinMaxType", str)
	}
	return nil
}

func (e MinMaxType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationType string

const (
	NotificationTypeFollowed       NotificationType = "FOLLOWED"
	NotificationTypeLiked          NotificationType = "LIKED"
	NotificationTypeCommented      NotificationType = "COMMENTED"
	NotificationTypeMentioned      NotificationType = "MENTIONED"
	NotificationTypeInvited        NotificationType = "INVITED"
	NotificationTypeHTML           NotificationType = "HTML"
	NotificationTypeInviteActioned NotificationType = "INVITE_ACTIONED"
	NotificationTypeCreated        NotificationType = "CREATED"
)

var AllNotificationType = []NotificationType{
	NotificationTypeFollowed,
	NotificationTypeLiked,
	NotificationTypeCommented,
	NotificationTypeMentioned,
	NotificationTypeInvited,
	NotificationTypeHTML,
	NotificationTypeInviteActioned,
	NotificationTypeCreated,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeFollowed, NotificationTypeLiked, NotificationTypeCommented, NotificationTypeMentioned, NotificationTypeInvited, NotificationTypeHTML, NotificationTypeInviteActioned, NotificationTypeCreated:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Operator string

const (
	OperatorEq       Operator = "EQ"
	OperatorGte      Operator = "GTE"
	OperatorLte      Operator = "LTE"
	OperatorContains Operator = "CONTAINS"
)

var AllOperator = []Operator{
	OperatorEq,
	OperatorGte,
	OperatorLte,
	OperatorContains,
}

func (e Operator) IsValid() bool {
	switch e {
	case OperatorEq, OperatorGte, OperatorLte, OperatorContains:
		return true
	}
	return false
}

func (e Operator) String() string {
	return string(e)
}

func (e *Operator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Operator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Operator", str)
	}
	return nil
}

func (e Operator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OptionValueType string

const (
	OptionValueTypeFloat  OptionValueType = "FLOAT"
	OptionValueTypeString OptionValueType = "STRING"
	OptionValueTypeInt    OptionValueType = "INT"
	OptionValueTypeBool   OptionValueType = "BOOL"
)

var AllOptionValueType = []OptionValueType{
	OptionValueTypeFloat,
	OptionValueTypeString,
	OptionValueTypeInt,
	OptionValueTypeBool,
}

func (e OptionValueType) IsValid() bool {
	switch e {
	case OptionValueTypeFloat, OptionValueTypeString, OptionValueTypeInt, OptionValueTypeBool:
		return true
	}
	return false
}

func (e OptionValueType) String() string {
	return string(e)
}

func (e *OptionValueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OptionValueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OptionValueType", str)
	}
	return nil
}

func (e OptionValueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderStatus string

const (
	OrderStatusCreated   OrderStatus = "CREATED"
	OrderStatusStarted   OrderStatus = "STARTED"
	OrderStatusProduced  OrderStatus = "PRODUCED"
	OrderStatusShipped   OrderStatus = "SHIPPED"
	OrderStatusConfirmed OrderStatus = "CONFIRMED"
	OrderStatusCancelled OrderStatus = "CANCELLED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusCreated,
	OrderStatusStarted,
	OrderStatusProduced,
	OrderStatusShipped,
	OrderStatusConfirmed,
	OrderStatusCancelled,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusCreated, OrderStatusStarted, OrderStatusProduced, OrderStatusShipped, OrderStatusConfirmed, OrderStatusCancelled:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentStatus string

const (
	PaymentStatusInitialized PaymentStatus = "INITIALIZED"
	PaymentStatusPaidpartial PaymentStatus = "PAIDPARTIAL"
	PaymentStatusPaidfull    PaymentStatus = "PAIDFULL"
	PaymentStatusError       PaymentStatus = "ERROR"
	PaymentStatusRefunded    PaymentStatus = "REFUNDED"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusInitialized,
	PaymentStatusPaidpartial,
	PaymentStatusPaidfull,
	PaymentStatusError,
	PaymentStatusRefunded,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusInitialized, PaymentStatusPaidpartial, PaymentStatusPaidfull, PaymentStatusError, PaymentStatusRefunded:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentType string

const (
	PaymentTypeCard PaymentType = "CARD"
)

var AllPaymentType = []PaymentType{
	PaymentTypeCard,
}

func (e PaymentType) IsValid() bool {
	switch e {
	case PaymentTypeCard:
		return true
	}
	return false
}

func (e PaymentType) String() string {
	return string(e)
}

func (e *PaymentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentType", str)
	}
	return nil
}

func (e PaymentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Permission string

const (
	PermissionGetMessage       Permission = "GET_MESSAGE"
	PermissionAddMessage       Permission = "ADD_MESSAGE"
	PermissionUpdateMessage    Permission = "UPDATE_MESSAGE"
	PermissionDeleteMessage    Permission = "DELETE_MESSAGE"
	PermissionGetAnnotation    Permission = "GET_ANNOTATION"
	PermissionAddAnnotation    Permission = "ADD_ANNOTATION"
	PermissionUpdateAnnotation Permission = "UPDATE_ANNOTATION"
	PermissionDeleteAnnotation Permission = "DELETE_ANNOTATION"
)

var AllPermission = []Permission{
	PermissionGetMessage,
	PermissionAddMessage,
	PermissionUpdateMessage,
	PermissionDeleteMessage,
	PermissionGetAnnotation,
	PermissionAddAnnotation,
	PermissionUpdateAnnotation,
	PermissionDeleteAnnotation,
}

func (e Permission) IsValid() bool {
	switch e {
	case PermissionGetMessage, PermissionAddMessage, PermissionUpdateMessage, PermissionDeleteMessage, PermissionGetAnnotation, PermissionAddAnnotation, PermissionUpdateAnnotation, PermissionDeleteAnnotation:
		return true
	}
	return false
}

func (e Permission) String() string {
	return string(e)
}

func (e *Permission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Permission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Permission", str)
	}
	return nil
}

func (e Permission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RequestForQuoteState string

const (
	RequestForQuoteStateIncomplete RequestForQuoteState = "INCOMPLETE"
	RequestForQuoteStateInitiated  RequestForQuoteState = "INITIATED"
	RequestForQuoteStateAssigned   RequestForQuoteState = "ASSIGNED"
	RequestForQuoteStateQuoted     RequestForQuoteState = "QUOTED"
	RequestForQuoteStateAwarded    RequestForQuoteState = "AWARDED"
	RequestForQuoteStateCancelled  RequestForQuoteState = "CANCELLED"
	RequestForQuoteStateCompleted  RequestForQuoteState = "COMPLETED"
)

var AllRequestForQuoteState = []RequestForQuoteState{
	RequestForQuoteStateIncomplete,
	RequestForQuoteStateInitiated,
	RequestForQuoteStateAssigned,
	RequestForQuoteStateQuoted,
	RequestForQuoteStateAwarded,
	RequestForQuoteStateCancelled,
	RequestForQuoteStateCompleted,
}

func (e RequestForQuoteState) IsValid() bool {
	switch e {
	case RequestForQuoteStateIncomplete, RequestForQuoteStateInitiated, RequestForQuoteStateAssigned, RequestForQuoteStateQuoted, RequestForQuoteStateAwarded, RequestForQuoteStateCancelled, RequestForQuoteStateCompleted:
		return true
	}
	return false
}

func (e RequestForQuoteState) String() string {
	return string(e)
}

func (e *RequestForQuoteState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestForQuoteState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestForQuoteState", str)
	}
	return nil
}

func (e RequestForQuoteState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RequestForQuoteType string

const (
	RequestForQuoteTypeIntermediated RequestForQuoteType = "INTERMEDIATED"
	RequestForQuoteTypeDirect        RequestForQuoteType = "DIRECT"
)

var AllRequestForQuoteType = []RequestForQuoteType{
	RequestForQuoteTypeIntermediated,
	RequestForQuoteTypeDirect,
}

func (e RequestForQuoteType) IsValid() bool {
	switch e {
	case RequestForQuoteTypeIntermediated, RequestForQuoteTypeDirect:
		return true
	}
	return false
}

func (e RequestForQuoteType) String() string {
	return string(e)
}

func (e *RequestForQuoteType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestForQuoteType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestForQuoteType", str)
	}
	return nil
}

func (e RequestForQuoteType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RequirementType string

const (
	RequirementTypeSupportingFile RequirementType = "SUPPORTING_FILE"
	RequirementTypeFileFormat     RequirementType = "FILE_FORMAT"
)

var AllRequirementType = []RequirementType{
	RequirementTypeSupportingFile,
	RequirementTypeFileFormat,
}

func (e RequirementType) IsValid() bool {
	switch e {
	case RequirementTypeSupportingFile, RequirementTypeFileFormat:
		return true
	}
	return false
}

func (e RequirementType) String() string {
	return string(e)
}

func (e *RequirementType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequirementType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequirementType", str)
	}
	return nil
}

func (e RequirementType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SessionState string

const (
	SessionStateOpen     SessionState = "OPEN"
	SessionStateApproved SessionState = "APPROVED"
	SessionStateClosed   SessionState = "CLOSED"
)

var AllSessionState = []SessionState{
	SessionStateOpen,
	SessionStateApproved,
	SessionStateClosed,
}

func (e SessionState) IsValid() bool {
	switch e {
	case SessionStateOpen, SessionStateApproved, SessionStateClosed:
		return true
	}
	return false
}

func (e SessionState) String() string {
	return string(e)
}

func (e *SessionState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SessionState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SessionState", str)
	}
	return nil
}

func (e SessionState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type Status string

const (
	StatusAdded    Status = "ADDED"
	StatusRemoved  Status = "REMOVED"
	StatusModified Status = "MODIFIED"
)

var AllStatus = []Status{
	StatusAdded,
	StatusRemoved,
	StatusModified,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusAdded, StatusRemoved, StatusModified:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ValueInputType string

const (
	ValueInputTypeString   ValueInputType = "STRING"
	ValueInputTypeInt      ValueInputType = "INT"
	ValueInputTypeFloat    ValueInputType = "FLOAT"
	ValueInputTypeBool     ValueInputType = "BOOL"
	ValueInputTypeDatetime ValueInputType = "DATETIME"
)

var AllValueInputType = []ValueInputType{
	ValueInputTypeString,
	ValueInputTypeInt,
	ValueInputTypeFloat,
	ValueInputTypeBool,
	ValueInputTypeDatetime,
}

func (e ValueInputType) IsValid() bool {
	switch e {
	case ValueInputTypeString, ValueInputTypeInt, ValueInputTypeFloat, ValueInputTypeBool, ValueInputTypeDatetime:
		return true
	}
	return false
}

func (e ValueInputType) String() string {
	return string(e)
}

func (e *ValueInputType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ValueInputType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ValueInputType", str)
	}
	return nil
}

func (e ValueInputType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type Plantype string

const (
	PlantypeBySeats Plantype = "BY_SEATS"
	PlantypeFlat    Plantype = "FLAT"
)

var AllPlantype = []Plantype{
	PlantypeBySeats,
	PlantypeFlat,
}

func (e Plantype) IsValid() bool {
	switch e {
	case PlantypeBySeats, PlantypeFlat:
		return true
	}
	return false
}

func (e Plantype) String() string {
	return string(e)
}

func (e *Plantype) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Plantype(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid plantype", str)
	}
	return nil
}

func (e Plantype) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type ProjectType string

const (
	ProjectTypeProject    ProjectType = "PROJECT"
	ProjectTypeSharedFile ProjectType = "SHARED_FILE"
	ProjectTypeRfq        ProjectType = "RFQ"
)

var AllProjectType = []ProjectType{
	ProjectTypeProject,
	ProjectTypeSharedFile,
	ProjectTypeRfq,
}

func (e ProjectType) IsValid() bool {
	switch e {
	case ProjectTypeProject, ProjectTypeSharedFile, ProjectTypeRfq:
		return true
	}
	return false
}

func (e ProjectType) String() string {
	return string(e)
}

func (e *ProjectType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid project_type", str)
	}
	return nil
}

func (e ProjectType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An enumeration.
type Subscriptionstatus string

const (
	SubscriptionstatusActive     Subscriptionstatus = "ACTIVE"
	SubscriptionstatusCanceled   Subscriptionstatus = "CANCELED"
	SubscriptionstatusIncomplete Subscriptionstatus = "INCOMPLETE"
)

var AllSubscriptionstatus = []Subscriptionstatus{
	SubscriptionstatusActive,
	SubscriptionstatusCanceled,
	SubscriptionstatusIncomplete,
}

func (e Subscriptionstatus) IsValid() bool {
	switch e {
	case SubscriptionstatusActive, SubscriptionstatusCanceled, SubscriptionstatusIncomplete:
		return true
	}
	return false
}

func (e Subscriptionstatus) String() string {
	return string(e)
}

func (e *Subscriptionstatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Subscriptionstatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid subscriptionstatus", str)
	}
	return nil
}

func (e Subscriptionstatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

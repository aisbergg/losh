// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package dgclient

import (
	"context"
	"losh/internal/models"
	"losh/internal/net/request"
	"time"
)

type DgraphGraphQLClient interface {
	GetBoundingBoxDimensions(ctx context.Context, id string) (*GetBoundingBoxDimensions, error)
	GetBoundingBoxDimensionss(ctx context.Context, filter *models.BoundingBoxDimensionsFilter, order *models.BoundingBoxDimensionsOrder, first *int64, offset *int64) (*GetBoundingBoxDimensionss, error)
	SaveBoundingBoxDimensionss(ctx context.Context, input []*models.AddBoundingBoxDimensionsInput, deleteIds []string) (*SaveBoundingBoxDimensionss, error)
	DeleteBoundingBoxDimensions(ctx context.Context, filter models.BoundingBoxDimensionsFilter) (*DeleteBoundingBoxDimensions, error)
	GetCategory(ctx context.Context, id *string, xid *string) (*GetCategory, error)
	GetCategories(ctx context.Context, filter *models.CategoryFilter, order *models.CategoryOrder, first *int64, offset *int64) (*GetCategories, error)
	SaveCategories(ctx context.Context, input []*models.AddCategoryInput) (*SaveCategories, error)
	DeleteCategory(ctx context.Context, filter models.CategoryFilter) (*DeleteCategory, error)
	GetComponentSource(ctx context.Context, id *string, xid *string) (*GetComponentSource, error)
	GetComponentSources(ctx context.Context, filter *models.ComponentSourceFilter, order *models.ComponentSourceOrder, first *int64, offset *int64) (*GetComponentSources, error)
	SaveComponentSources(ctx context.Context, input []*models.AddComponentSourceInput) (*SaveComponentSources, error)
	DeleteComponentSource(ctx context.Context, filter models.ComponentSourceFilter) (*DeleteComponentSource, error)
	GetComponent(ctx context.Context, id *string, xid *string) (*GetComponent, error)
	GetComponents(ctx context.Context, filter *models.ComponentFilter, order *models.ComponentOrder, first *int64, offset *int64) (*GetComponents, error)
	SaveComponents(ctx context.Context, input []*models.AddComponentInput) (*SaveComponents, error)
	DeleteComponent(ctx context.Context, filter models.ComponentFilter) (*DeleteComponent, error)
	GetDatabaseInfo(ctx context.Context) (*GetDatabaseInfo, error)
	SaveDatabaseInfo(ctx context.Context, dbInfo []*models.AddDatabaseInput) (*SaveDatabaseInfo, error)
	GetFile(ctx context.Context, id string) (*GetFile, error)
	GetFiles(ctx context.Context, filter *models.FileFilter, order *models.FileOrder, first *int64, offset *int64) (*GetFiles, error)
	SaveFiles(ctx context.Context, input []*models.AddFileInput, deleteIds []string) (*SaveFiles, error)
	DeleteFile(ctx context.Context, filter models.FileFilter) (*DeleteFile, error)
	GetFloatV(ctx context.Context, id string) (*GetFloatV, error)
	GetFloatVs(ctx context.Context, filter *models.FloatVFilter, order *models.FloatVOrder, first *int64, offset *int64) (*GetFloatVs, error)
	SaveFloatVs(ctx context.Context, input []*models.AddFloatVInput, deleteIds []string) (*SaveFloatVs, error)
	DeleteFloatVs(ctx context.Context, filter models.FloatVFilter) (*DeleteFloatVs, error)
	GetHost(ctx context.Context, id *string, domain *string) (*GetHost, error)
	GetHosts(ctx context.Context, filter *models.HostFilter, order *models.HostOrder, first *int64, offset *int64) (*GetHosts, error)
	SaveHosts(ctx context.Context, hosts []*models.AddHostInput) (*SaveHosts, error)
	DeleteHost(ctx context.Context, filter models.HostFilter) (*DeleteHost, error)
	GetKeyValue(ctx context.Context, id string) (*GetKeyValue, error)
	GetKeyValues(ctx context.Context, filter *models.KeyValueFilter, order *models.KeyValueOrder, first *int64, offset *int64) (*GetKeyValues, error)
	SaveKeyValues(ctx context.Context, keyValues []*models.AddKeyValueInput) (*SaveKeyValues, error)
	DeleteKeyValue(ctx context.Context, filter models.KeyValueFilter) (*DeleteKeyValue, error)
	GetLicense(ctx context.Context, id *string, xid *string) (*GetLicense, error)
	GetLicenses(ctx context.Context, filter *models.LicenseFilter, order *models.LicenseOrder, first *int64, offset *int64) (*GetLicenses, error)
	SaveLicenses(ctx context.Context, licenses []*models.AddLicenseInput) (*SaveLicenses, error)
	DeleteLicense(ctx context.Context, filter models.LicenseFilter) (*DeleteLicense, error)
	GetManufacturingProcess(ctx context.Context, id string) (*GetManufacturingProcess, error)
	GetManufacturingProcesses(ctx context.Context, filter *models.ManufacturingProcessFilter, order *models.ManufacturingProcessOrder, first *int64, offset *int64) (*GetManufacturingProcesses, error)
	SaveManufacturingProcesses(ctx context.Context, input []*models.AddManufacturingProcessInput, deleteIds []string) (*SaveManufacturingProcesses, error)
	DeleteManufacturingProcesses(ctx context.Context, filter models.ManufacturingProcessFilter) (*DeleteManufacturingProcesses, error)
	GetMaterial(ctx context.Context, id string) (*GetMaterial, error)
	GetMaterials(ctx context.Context, filter *models.MaterialFilter, order *models.MaterialOrder, first *int64, offset *int64) (*GetMaterials, error)
	SaveMaterials(ctx context.Context, input []*models.AddMaterialInput, deleteIds []string) (*SaveMaterials, error)
	DeleteMaterials(ctx context.Context, filter models.MaterialFilter) (*DeleteMaterials, error)
	GetNode(ctx context.Context, id string) (*GetNode, error)
	GetNodes(ctx context.Context, filter *models.NodeFilter, first *int64, offset *int64) (*GetNodes, error)
	DeleteNode(ctx context.Context, filter models.NodeFilter) (*DeleteNode, error)
	GetOpenSCADDimensions(ctx context.Context, id string) (*GetOpenSCADDimensions, error)
	GetOpenSCADDimensionss(ctx context.Context, filter *models.OpenSCADDimensionsFilter, order *models.OpenSCADDimensionsOrder, first *int64, offset *int64) (*GetOpenSCADDimensionss, error)
	SaveOpenSCADDimensionss(ctx context.Context, input []*models.AddOpenSCADDimensionsInput, deleteIds []string) (*SaveOpenSCADDimensionss, error)
	DeleteOpenSCADDimensionss(ctx context.Context, filter models.OpenSCADDimensionsFilter) (*DeleteOpenSCADDimensionss, error)
	GetProduct(ctx context.Context, id *string, xid *string) (*GetProduct, error)
	GetProducts(ctx context.Context, filter *models.ProductFilter, order *models.ProductOrder, first *int64, offset *int64) (*GetProducts, error)
	SaveProducts(ctx context.Context, products []*models.AddProductInput) (*SaveProducts, error)
	DeleteProduct(ctx context.Context, filter models.ProductFilter) (*DeleteProduct, error)
	GetSoftware(ctx context.Context, id string) (*GetSoftware, error)
	GetSoftwares(ctx context.Context, filter *models.SoftwareFilter, order *models.SoftwareOrder, first *int64, offset *int64) (*GetSoftwares, error)
	SaveSoftwares(ctx context.Context, input []*models.AddSoftwareInput, deleteIds []string) (*SaveSoftwares, error)
	DeleteSoftware(ctx context.Context, filter models.SoftwareFilter) (*DeleteSoftware, error)
	GetStringV(ctx context.Context, id string) (*GetStringV, error)
	GetStringVs(ctx context.Context, filter *models.StringVFilter, order *models.StringVOrder, first *int64, offset *int64) (*GetStringVs, error)
	SaveStringVs(ctx context.Context, input []*models.AddStringVInput, deleteIds []string) (*SaveStringVs, error)
	DeleteStringVs(ctx context.Context, filter models.StringVFilter) (*DeleteStringVs, error)
	GetTag(ctx context.Context, id *string, xid *string) (*GetTag, error)
	GetTags(ctx context.Context, filter *models.TagFilter, order *models.TagOrder, first *int64, offset *int64) (*GetTags, error)
	SaveTags(ctx context.Context, input []*models.AddTagInput) (*SaveTags, error)
	DeleteTag(ctx context.Context, filter models.TagFilter) (*DeleteTag, error)
	GetTechnicalStandard(ctx context.Context, id *string, xid *string) (*GetTechnicalStandard, error)
	GetTechnicalStandards(ctx context.Context, filter *models.TechnicalStandardFilter, order *models.TechnicalStandardOrder, first *int64, offset *int64) (*GetTechnicalStandards, error)
	SaveTechnicalStandards(ctx context.Context, input []*models.AddTechnicalStandardInput) (*SaveTechnicalStandards, error)
	DeleteTechnicalStandard(ctx context.Context, filter models.TechnicalStandardFilter) (*DeleteTechnicalStandard, error)
	GetTechnologySpecificDocumentationCriteria(ctx context.Context, id *string, xid *string) (*GetTechnologySpecificDocumentationCriteria, error)
	GetTechnologySpecificDocumentationCriterias(ctx context.Context, filter *models.TechnologySpecificDocumentationCriteriaFilter, order *models.TechnologySpecificDocumentationCriteriaOrder, first *int64, offset *int64) (*GetTechnologySpecificDocumentationCriterias, error)
	SaveTechnologySpecificDocumentationCriterias(ctx context.Context, input []*models.AddTechnologySpecificDocumentationCriteriaInput) (*SaveTechnologySpecificDocumentationCriterias, error)
	DeleteTechnologySpecificDocumentationCriteria(ctx context.Context, filter models.TechnologySpecificDocumentationCriteriaFilter) (*DeleteTechnologySpecificDocumentationCriteria, error)
	GetUserOrGroup(ctx context.Context, id *string, xid *string) (*GetUserOrGroup, error)
	GetUserOrGroups(ctx context.Context, filter *models.UserOrGroupFilter, order *models.UserOrGroupOrder, first *int64, offset *int64) (*GetUserOrGroups, error)
	DeleteUserOrGroup(ctx context.Context, filter models.UserOrGroupFilter) (*DeleteUserOrGroup, error)
	GetUser(ctx context.Context, id *string, xid *string) (*GetUser, error)
	GetUsers(ctx context.Context, filter *models.UserFilter, order *models.UserOrder, first *int64, offset *int64) (*GetUsers, error)
	SaveUsers(ctx context.Context, input []*models.AddUserInput) (*SaveUsers, error)
	DeleteUser(ctx context.Context, filter models.UserFilter) (*DeleteUser, error)
	GetGroup(ctx context.Context, id *string, xid *string) (*GetGroup, error)
	GetGroups(ctx context.Context, filter *models.GroupFilter, order *models.GroupOrder, first *int64, offset *int64) (*GetGroups, error)
	SaveGroups(ctx context.Context, input []*models.AddGroupInput) (*SaveGroups, error)
	DeleteGroup(ctx context.Context, filter models.GroupFilter) (*DeleteGroup, error)
}

type Client struct {
	Requester *request.GraphQLRequester
}

func NewClient(requester *request.GraphQLRequester) DgraphGraphQLClient {
	return &Client{
		Requester: requester,
	}
}

type Query struct {
	GetDatabase                                      *models.Database                                               "json:\"getDatabase,omitempty\" graphql:\"getDatabase\""
	QueryDatabase                                    []*models.Database                                             "json:\"queryDatabase,omitempty\" graphql:\"queryDatabase\""
	AggregateDatabase                                *models.DatabaseAggregateResult                                "json:\"aggregateDatabase,omitempty\" graphql:\"aggregateDatabase\""
	GetNode                                          models.Node                                                    "json:\"getNode,omitempty\" graphql:\"getNode\""
	QueryNode                                        []models.Node                                                  "json:\"queryNode,omitempty\" graphql:\"queryNode\""
	AggregateNode                                    *models.NodeAggregateResult                                    "json:\"aggregateNode,omitempty\" graphql:\"aggregateNode\""
	QueryCrawlerMeta                                 []models.CrawlerMeta                                           "json:\"queryCrawlerMeta,omitempty\" graphql:\"queryCrawlerMeta\""
	AggregateCrawlerMeta                             *models.CrawlerMetaAggregateResult                             "json:\"aggregateCrawlerMeta,omitempty\" graphql:\"aggregateCrawlerMeta\""
	GetProduct                                       *models.Product                                                "json:\"getProduct,omitempty\" graphql:\"getProduct\""
	QueryProduct                                     []*models.Product                                              "json:\"queryProduct,omitempty\" graphql:\"queryProduct\""
	AggregateProduct                                 *models.ProductAggregateResult                                 "json:\"aggregateProduct,omitempty\" graphql:\"aggregateProduct\""
	GetComponent                                     *models.Component                                              "json:\"getComponent,omitempty\" graphql:\"getComponent\""
	QueryComponent                                   []*models.Component                                            "json:\"queryComponent,omitempty\" graphql:\"queryComponent\""
	AggregateComponent                               *models.ComponentAggregateResult                               "json:\"aggregateComponent,omitempty\" graphql:\"aggregateComponent\""
	GetSoftware                                      *models.Software                                               "json:\"getSoftware,omitempty\" graphql:\"getSoftware\""
	QuerySoftware                                    []*models.Software                                             "json:\"querySoftware,omitempty\" graphql:\"querySoftware\""
	AggregateSoftware                                *models.SoftwareAggregateResult                                "json:\"aggregateSoftware,omitempty\" graphql:\"aggregateSoftware\""
	GetComponentSource                               *models.ComponentSource                                        "json:\"getComponentSource,omitempty\" graphql:\"getComponentSource\""
	QueryComponentSource                             []*models.ComponentSource                                      "json:\"queryComponentSource,omitempty\" graphql:\"queryComponentSource\""
	AggregateComponentSource                         *models.ComponentSourceAggregateResult                         "json:\"aggregateComponentSource,omitempty\" graphql:\"aggregateComponentSource\""
	GetHost                                          *models.Host                                                   "json:\"getHost,omitempty\" graphql:\"getHost\""
	QueryHost                                        []*models.Host                                                 "json:\"queryHost,omitempty\" graphql:\"queryHost\""
	AggregateHost                                    *models.HostAggregateResult                                    "json:\"aggregateHost,omitempty\" graphql:\"aggregateHost\""
	GetLicense                                       *models.License                                                "json:\"getLicense,omitempty\" graphql:\"getLicense\""
	QueryLicense                                     []*models.License                                              "json:\"queryLicense,omitempty\" graphql:\"queryLicense\""
	AggregateLicense                                 *models.LicenseAggregateResult                                 "json:\"aggregateLicense,omitempty\" graphql:\"aggregateLicense\""
	GetTechnologySpecificDocumentationCriteria       *models.TechnologySpecificDocumentationCriteria                "json:\"getTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"getTechnologySpecificDocumentationCriteria\""
	QueryTechnologySpecificDocumentationCriteria     []*models.TechnologySpecificDocumentationCriteria              "json:\"queryTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"queryTechnologySpecificDocumentationCriteria\""
	AggregateTechnologySpecificDocumentationCriteria *models.TechnologySpecificDocumentationCriteriaAggregateResult "json:\"aggregateTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"aggregateTechnologySpecificDocumentationCriteria\""
	GetTechnicalStandard                             *models.TechnicalStandard                                      "json:\"getTechnicalStandard,omitempty\" graphql:\"getTechnicalStandard\""
	QueryTechnicalStandard                           []*models.TechnicalStandard                                    "json:\"queryTechnicalStandard,omitempty\" graphql:\"queryTechnicalStandard\""
	AggregateTechnicalStandard                       *models.TechnicalStandardAggregateResult                       "json:\"aggregateTechnicalStandard,omitempty\" graphql:\"aggregateTechnicalStandard\""
	GetUserOrGroup                                   models.UserOrGroup                                             "json:\"getUserOrGroup,omitempty\" graphql:\"getUserOrGroup\""
	QueryUserOrGroup                                 []models.UserOrGroup                                           "json:\"queryUserOrGroup,omitempty\" graphql:\"queryUserOrGroup\""
	AggregateUserOrGroup                             *models.UserOrGroupAggregateResult                             "json:\"aggregateUserOrGroup,omitempty\" graphql:\"aggregateUserOrGroup\""
	GetGroup                                         *models.Group                                                  "json:\"getGroup,omitempty\" graphql:\"getGroup\""
	QueryGroup                                       []*models.Group                                                "json:\"queryGroup,omitempty\" graphql:\"queryGroup\""
	AggregateGroup                                   *models.GroupAggregateResult                                   "json:\"aggregateGroup,omitempty\" graphql:\"aggregateGroup\""
	GetUser                                          *models.User                                                   "json:\"getUser,omitempty\" graphql:\"getUser\""
	QueryUser                                        []*models.User                                                 "json:\"queryUser,omitempty\" graphql:\"queryUser\""
	AggregateUser                                    *models.UserAggregateResult                                    "json:\"aggregateUser,omitempty\" graphql:\"aggregateUser\""
	GetFile                                          *models.File                                                   "json:\"getFile,omitempty\" graphql:\"getFile\""
	QueryFile                                        []*models.File                                                 "json:\"queryFile,omitempty\" graphql:\"queryFile\""
	AggregateFile                                    *models.FileAggregateResult                                    "json:\"aggregateFile,omitempty\" graphql:\"aggregateFile\""
	GetKeyValue                                      *models.KeyValue                                               "json:\"getKeyValue,omitempty\" graphql:\"getKeyValue\""
	QueryKeyValue                                    []*models.KeyValue                                             "json:\"queryKeyValue,omitempty\" graphql:\"queryKeyValue\""
	AggregateKeyValue                                *models.KeyValueAggregateResult                                "json:\"aggregateKeyValue,omitempty\" graphql:\"aggregateKeyValue\""
	GetStringV                                       *models.StringV                                                "json:\"getStringV,omitempty\" graphql:\"getStringV\""
	QueryStringV                                     []*models.StringV                                              "json:\"queryStringV,omitempty\" graphql:\"queryStringV\""
	AggregateStringV                                 *models.StringVAggregateResult                                 "json:\"aggregateStringV,omitempty\" graphql:\"aggregateStringV\""
	GetFloatV                                        *models.FloatV                                                 "json:\"getFloatV,omitempty\" graphql:\"getFloatV\""
	QueryFloatV                                      []*models.FloatV                                               "json:\"queryFloatV,omitempty\" graphql:\"queryFloatV\""
	AggregateFloatV                                  *models.FloatVAggregateResult                                  "json:\"aggregateFloatV,omitempty\" graphql:\"aggregateFloatV\""
	GetMaterial                                      *models.Material                                               "json:\"getMaterial,omitempty\" graphql:\"getMaterial\""
	QueryMaterial                                    []*models.Material                                             "json:\"queryMaterial,omitempty\" graphql:\"queryMaterial\""
	AggregateMaterial                                *models.MaterialAggregateResult                                "json:\"aggregateMaterial,omitempty\" graphql:\"aggregateMaterial\""
	GetManufacturingProcess                          *models.ManufacturingProcess                                   "json:\"getManufacturingProcess,omitempty\" graphql:\"getManufacturingProcess\""
	QueryManufacturingProcess                        []*models.ManufacturingProcess                                 "json:\"queryManufacturingProcess,omitempty\" graphql:\"queryManufacturingProcess\""
	AggregateManufacturingProcess                    *models.ManufacturingProcessAggregateResult                    "json:\"aggregateManufacturingProcess,omitempty\" graphql:\"aggregateManufacturingProcess\""
	GetBoundingBoxDimensions                         *models.BoundingBoxDimensions                                  "json:\"getBoundingBoxDimensions,omitempty\" graphql:\"getBoundingBoxDimensions\""
	QueryBoundingBoxDimensions                       []*models.BoundingBoxDimensions                                "json:\"queryBoundingBoxDimensions,omitempty\" graphql:\"queryBoundingBoxDimensions\""
	AggregateBoundingBoxDimensions                   *models.BoundingBoxDimensionsAggregateResult                   "json:\"aggregateBoundingBoxDimensions,omitempty\" graphql:\"aggregateBoundingBoxDimensions\""
	GetOpenSCADDimensions                            *models.OpenSCADDimensions                                     "json:\"getOpenSCADDimensions,omitempty\" graphql:\"getOpenSCADDimensions\""
	QueryOpenSCADDimensions                          []*models.OpenSCADDimensions                                   "json:\"queryOpenSCADDimensions,omitempty\" graphql:\"queryOpenSCADDimensions\""
	AggregateOpenSCADDimensions                      *models.OpenSCADDimensionsAggregateResult                      "json:\"aggregateOpenSCADDimensions,omitempty\" graphql:\"aggregateOpenSCADDimensions\""
	GetCategory                                      *models.Category                                               "json:\"getCategory,omitempty\" graphql:\"getCategory\""
	QueryCategory                                    []*models.Category                                             "json:\"queryCategory,omitempty\" graphql:\"queryCategory\""
	AggregateCategory                                *models.CategoryAggregateResult                                "json:\"aggregateCategory,omitempty\" graphql:\"aggregateCategory\""
	GetTag                                           *models.Tag                                                    "json:\"getTag,omitempty\" graphql:\"getTag\""
	QueryTag                                         []*models.Tag                                                  "json:\"queryTag,omitempty\" graphql:\"queryTag\""
	AggregateTag                                     *models.TagAggregateResult                                     "json:\"aggregateTag,omitempty\" graphql:\"aggregateTag\""
}
type Mutation struct {
	AddDatabase                                   *models.AddDatabasePayload                                   "json:\"addDatabase,omitempty\" graphql:\"addDatabase\""
	UpdateDatabase                                *models.UpdateDatabasePayload                                "json:\"updateDatabase,omitempty\" graphql:\"updateDatabase\""
	DeleteDatabase                                *models.DeleteDatabasePayload                                "json:\"deleteDatabase,omitempty\" graphql:\"deleteDatabase\""
	DeleteNode                                    *models.DeleteNodePayload                                    "json:\"deleteNode,omitempty\" graphql:\"deleteNode\""
	UpdateCrawlerMeta                             *models.UpdateCrawlerMetaPayload                             "json:\"updateCrawlerMeta,omitempty\" graphql:\"updateCrawlerMeta\""
	DeleteCrawlerMeta                             *models.DeleteCrawlerMetaPayload                             "json:\"deleteCrawlerMeta,omitempty\" graphql:\"deleteCrawlerMeta\""
	AddProduct                                    *models.AddProductPayload                                    "json:\"addProduct,omitempty\" graphql:\"addProduct\""
	UpdateProduct                                 *models.UpdateProductPayload                                 "json:\"updateProduct,omitempty\" graphql:\"updateProduct\""
	DeleteProduct                                 *models.DeleteProductPayload                                 "json:\"deleteProduct,omitempty\" graphql:\"deleteProduct\""
	AddComponent                                  *models.AddComponentPayload                                  "json:\"addComponent,omitempty\" graphql:\"addComponent\""
	UpdateComponent                               *models.UpdateComponentPayload                               "json:\"updateComponent,omitempty\" graphql:\"updateComponent\""
	DeleteComponent                               *models.DeleteComponentPayload                               "json:\"deleteComponent,omitempty\" graphql:\"deleteComponent\""
	AddSoftware                                   *models.AddSoftwarePayload                                   "json:\"addSoftware,omitempty\" graphql:\"addSoftware\""
	UpdateSoftware                                *models.UpdateSoftwarePayload                                "json:\"updateSoftware,omitempty\" graphql:\"updateSoftware\""
	DeleteSoftware                                *models.DeleteSoftwarePayload                                "json:\"deleteSoftware,omitempty\" graphql:\"deleteSoftware\""
	AddComponentSource                            *models.AddComponentSourcePayload                            "json:\"addComponentSource,omitempty\" graphql:\"addComponentSource\""
	UpdateComponentSource                         *models.UpdateComponentSourcePayload                         "json:\"updateComponentSource,omitempty\" graphql:\"updateComponentSource\""
	DeleteComponentSource                         *models.DeleteComponentSourcePayload                         "json:\"deleteComponentSource,omitempty\" graphql:\"deleteComponentSource\""
	AddHost                                       *models.AddHostPayload                                       "json:\"addHost,omitempty\" graphql:\"addHost\""
	UpdateHost                                    *models.UpdateHostPayload                                    "json:\"updateHost,omitempty\" graphql:\"updateHost\""
	DeleteHost                                    *models.DeleteHostPayload                                    "json:\"deleteHost,omitempty\" graphql:\"deleteHost\""
	AddLicense                                    *models.AddLicensePayload                                    "json:\"addLicense,omitempty\" graphql:\"addLicense\""
	UpdateLicense                                 *models.UpdateLicensePayload                                 "json:\"updateLicense,omitempty\" graphql:\"updateLicense\""
	DeleteLicense                                 *models.DeleteLicensePayload                                 "json:\"deleteLicense,omitempty\" graphql:\"deleteLicense\""
	AddTechnologySpecificDocumentationCriteria    *models.AddTechnologySpecificDocumentationCriteriaPayload    "json:\"addTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"addTechnologySpecificDocumentationCriteria\""
	UpdateTechnologySpecificDocumentationCriteria *models.UpdateTechnologySpecificDocumentationCriteriaPayload "json:\"updateTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"updateTechnologySpecificDocumentationCriteria\""
	DeleteTechnologySpecificDocumentationCriteria *models.DeleteTechnologySpecificDocumentationCriteriaPayload "json:\"deleteTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"deleteTechnologySpecificDocumentationCriteria\""
	AddTechnicalStandard                          *models.AddTechnicalStandardPayload                          "json:\"addTechnicalStandard,omitempty\" graphql:\"addTechnicalStandard\""
	UpdateTechnicalStandard                       *models.UpdateTechnicalStandardPayload                       "json:\"updateTechnicalStandard,omitempty\" graphql:\"updateTechnicalStandard\""
	DeleteTechnicalStandard                       *models.DeleteTechnicalStandardPayload                       "json:\"deleteTechnicalStandard,omitempty\" graphql:\"deleteTechnicalStandard\""
	UpdateUserOrGroup                             *models.UpdateUserOrGroupPayload                             "json:\"updateUserOrGroup,omitempty\" graphql:\"updateUserOrGroup\""
	DeleteUserOrGroup                             *models.DeleteUserOrGroupPayload                             "json:\"deleteUserOrGroup,omitempty\" graphql:\"deleteUserOrGroup\""
	AddGroup                                      *models.AddGroupPayload                                      "json:\"addGroup,omitempty\" graphql:\"addGroup\""
	UpdateGroup                                   *models.UpdateGroupPayload                                   "json:\"updateGroup,omitempty\" graphql:\"updateGroup\""
	DeleteGroup                                   *models.DeleteGroupPayload                                   "json:\"deleteGroup,omitempty\" graphql:\"deleteGroup\""
	AddUser                                       *models.AddUserPayload                                       "json:\"addUser,omitempty\" graphql:\"addUser\""
	UpdateUser                                    *models.UpdateUserPayload                                    "json:\"updateUser,omitempty\" graphql:\"updateUser\""
	DeleteUser                                    *models.DeleteUserPayload                                    "json:\"deleteUser,omitempty\" graphql:\"deleteUser\""
	AddFile                                       *models.AddFilePayload                                       "json:\"addFile,omitempty\" graphql:\"addFile\""
	UpdateFile                                    *models.UpdateFilePayload                                    "json:\"updateFile,omitempty\" graphql:\"updateFile\""
	DeleteFile                                    *models.DeleteFilePayload                                    "json:\"deleteFile,omitempty\" graphql:\"deleteFile\""
	AddKeyValue                                   *models.AddKeyValuePayload                                   "json:\"addKeyValue,omitempty\" graphql:\"addKeyValue\""
	UpdateKeyValue                                *models.UpdateKeyValuePayload                                "json:\"updateKeyValue,omitempty\" graphql:\"updateKeyValue\""
	DeleteKeyValue                                *models.DeleteKeyValuePayload                                "json:\"deleteKeyValue,omitempty\" graphql:\"deleteKeyValue\""
	AddStringV                                    *models.AddStringVPayload                                    "json:\"addStringV,omitempty\" graphql:\"addStringV\""
	UpdateStringV                                 *models.UpdateStringVPayload                                 "json:\"updateStringV,omitempty\" graphql:\"updateStringV\""
	DeleteStringV                                 *models.DeleteStringVPayload                                 "json:\"deleteStringV,omitempty\" graphql:\"deleteStringV\""
	AddFloatV                                     *models.AddFloatVPayload                                     "json:\"addFloatV,omitempty\" graphql:\"addFloatV\""
	UpdateFloatV                                  *models.UpdateFloatVPayload                                  "json:\"updateFloatV,omitempty\" graphql:\"updateFloatV\""
	DeleteFloatV                                  *models.DeleteFloatVPayload                                  "json:\"deleteFloatV,omitempty\" graphql:\"deleteFloatV\""
	AddMaterial                                   *models.AddMaterialPayload                                   "json:\"addMaterial,omitempty\" graphql:\"addMaterial\""
	UpdateMaterial                                *models.UpdateMaterialPayload                                "json:\"updateMaterial,omitempty\" graphql:\"updateMaterial\""
	DeleteMaterial                                *models.DeleteMaterialPayload                                "json:\"deleteMaterial,omitempty\" graphql:\"deleteMaterial\""
	AddManufacturingProcess                       *models.AddManufacturingProcessPayload                       "json:\"addManufacturingProcess,omitempty\" graphql:\"addManufacturingProcess\""
	UpdateManufacturingProcess                    *models.UpdateManufacturingProcessPayload                    "json:\"updateManufacturingProcess,omitempty\" graphql:\"updateManufacturingProcess\""
	DeleteManufacturingProcess                    *models.DeleteManufacturingProcessPayload                    "json:\"deleteManufacturingProcess,omitempty\" graphql:\"deleteManufacturingProcess\""
	AddBoundingBoxDimensions                      *models.AddBoundingBoxDimensionsPayload                      "json:\"addBoundingBoxDimensions,omitempty\" graphql:\"addBoundingBoxDimensions\""
	UpdateBoundingBoxDimensions                   *models.UpdateBoundingBoxDimensionsPayload                   "json:\"updateBoundingBoxDimensions,omitempty\" graphql:\"updateBoundingBoxDimensions\""
	DeleteBoundingBoxDimensions                   *models.DeleteBoundingBoxDimensionsPayload                   "json:\"deleteBoundingBoxDimensions,omitempty\" graphql:\"deleteBoundingBoxDimensions\""
	AddOpenSCADDimensions                         *models.AddOpenSCADDimensionsPayload                         "json:\"addOpenSCADDimensions,omitempty\" graphql:\"addOpenSCADDimensions\""
	UpdateOpenSCADDimensions                      *models.UpdateOpenSCADDimensionsPayload                      "json:\"updateOpenSCADDimensions,omitempty\" graphql:\"updateOpenSCADDimensions\""
	DeleteOpenSCADDimensions                      *models.DeleteOpenSCADDimensionsPayload                      "json:\"deleteOpenSCADDimensions,omitempty\" graphql:\"deleteOpenSCADDimensions\""
	AddCategory                                   *models.AddCategoryPayload                                   "json:\"addCategory,omitempty\" graphql:\"addCategory\""
	UpdateCategory                                *models.UpdateCategoryPayload                                "json:\"updateCategory,omitempty\" graphql:\"updateCategory\""
	DeleteCategory                                *models.DeleteCategoryPayload                                "json:\"deleteCategory,omitempty\" graphql:\"deleteCategory\""
	AddTag                                        *models.AddTagPayload                                        "json:\"addTag,omitempty\" graphql:\"addTag\""
	UpdateTag                                     *models.UpdateTagPayload                                     "json:\"updateTag,omitempty\" graphql:\"updateTag\""
	DeleteTag                                     *models.DeleteTagPayload                                     "json:\"deleteTag,omitempty\" graphql:\"deleteTag\""
}
type CrawlerMetaFragment struct {
	DiscoveredAt  time.Time "json:\"discoveredAt\" graphql:\"discoveredAt\""
	LastIndexedAt time.Time "json:\"lastIndexedAt\" graphql:\"lastIndexedAt\""
}
type BoundingBoxDimensionsFragment struct {
	ID     string   "json:\"id\" graphql:\"id\""
	Height *float64 "json:\"height\" graphql:\"height\""
	Width  *float64 "json:\"width\" graphql:\"width\""
	Depth  *float64 "json:\"depth\" graphql:\"depth\""
}
type CategoryFragment struct {
	ID          string                       "json:\"id\" graphql:\"id\""
	Xid         string                       "json:\"xid\" graphql:\"xid\""
	FullName    string                       "json:\"fullName\" graphql:\"fullName\""
	Name        string                       "json:\"name\" graphql:\"name\""
	Description string                       "json:\"description\" graphql:\"description\""
	Parent      *CategoryFragment_Parent     "json:\"parent\" graphql:\"parent\""
	Children    []*CategoryFragment_Children "json:\"children\" graphql:\"children\""
	Products    []*CategoryFragment_Products "json:\"products\" graphql:\"products\""
}
type ComponentSourceFragment struct {
	ID       string                        "json:\"id\" graphql:\"id\""
	Xid      string                        "json:\"xid\" graphql:\"xid\""
	URL      string                        "json:\"url\" graphql:\"url\""
	PermaURL string                        "json:\"permaUrl\" graphql:\"permaUrl\""
	Host     ComponentSourceFragment_Host  "json:\"host\" graphql:\"host\""
	Owner    ComponentSourceFragment_Owner "json:\"owner\" graphql:\"owner\""
	Name     string                        "json:\"name\" graphql:\"name\""
	Tag      *string                       "json:\"tag\" graphql:\"tag\""
	Path     string                        "json:\"path\" graphql:\"path\""
}
type ComponentFragment struct {
	ID                          string                                       "json:\"id\" graphql:\"id\""
	Xid                         string                                       "json:\"xid\" graphql:\"xid\""
	Name                        string                                       "json:\"name\" graphql:\"name\""
	Description                 string                                       "json:\"description\" graphql:\"description\""
	Owner                       ComponentFragment_Owner                      "json:\"owner\" graphql:\"owner\""
	Version                     string                                       "json:\"version\" graphql:\"version\""
	CreatedAt                   time.Time                                    "json:\"createdAt\" graphql:\"createdAt\""
	Releases                    []*ComponentFragment_Releases                "json:\"releases\" graphql:\"releases\""
	IsLatest                    bool                                         "json:\"isLatest\" graphql:\"isLatest\""
	Repository                  ComponentFragment_Repository                 "json:\"repository\" graphql:\"repository\""
	License                     ComponentFragment_License                    "json:\"license\" graphql:\"license\""
	AdditionalLicenses          []*ComponentFragment_AdditionalLicenses      "json:\"additionalLicenses\" graphql:\"additionalLicenses\""
	Licensor                    ComponentFragment_Licensor                   "json:\"licensor\" graphql:\"licensor\""
	DocumentationLanguage       *string                                      "json:\"documentationLanguage\" graphql:\"documentationLanguage\""
	TechnologyReadinessLevel    *models.TechnologyReadinessLevel             "json:\"technologyReadinessLevel\" graphql:\"technologyReadinessLevel\""
	DocumentationReadinessLevel *models.DocumentationReadinessLevel          "json:\"documentationReadinessLevel\" graphql:\"documentationReadinessLevel\""
	Attestation                 *string                                      "json:\"attestation\" graphql:\"attestation\""
	Publication                 *string                                      "json:\"publication\" graphql:\"publication\""
	CompliesWith                *ComponentFragment_CompliesWith              "json:\"compliesWith\" graphql:\"compliesWith\""
	CpcPatentClass              *string                                      "json:\"cpcPatentClass\" graphql:\"cpcPatentClass\""
	Tsdc                        *ComponentFragment_Tsdc                      "json:\"tsdc\" graphql:\"tsdc\""
	Components                  []*ComponentFragment_Components              "json:\"components\" graphql:\"components\""
	Software                    []*ComponentFragment_Software                "json:\"software\" graphql:\"software\""
	Image                       *ComponentFragment_Image                     "json:\"image\" graphql:\"image\""
	Readme                      *ComponentFragment_Readme                    "json:\"readme\" graphql:\"readme\""
	ContributionGuide           *ComponentFragment_ContributionGuide         "json:\"contributionGuide\" graphql:\"contributionGuide\""
	Bom                         *ComponentFragment_Bom                       "json:\"bom\" graphql:\"bom\""
	ManufacturingInstructions   *ComponentFragment_ManufacturingInstructions "json:\"manufacturingInstructions\" graphql:\"manufacturingInstructions\""
	UserManual                  *ComponentFragment_UserManual                "json:\"userManual\" graphql:\"userManual\""
	Product                     ComponentFragment_Product                    "json:\"product\" graphql:\"product\""
	UsedIn                      []*ComponentFragment_UsedIn                  "json:\"usedIn\" graphql:\"usedIn\""
	Source                      *ComponentFragment_Source                    "json:\"source\" graphql:\"source\""
	Export                      []*ComponentFragment_Export                  "json:\"export\" graphql:\"export\""
	Auxiliary                   []*ComponentFragment_Auxiliary               "json:\"auxiliary\" graphql:\"auxiliary\""
	Organization                *ComponentFragment_Organization              "json:\"organization\" graphql:\"organization\""
	Mass                        *float64                                     "json:\"mass\" graphql:\"mass\""
	OuterDimensions             *ComponentFragment_OuterDimensions           "json:\"outerDimensions\" graphql:\"outerDimensions\""
	Material                    *ComponentFragment_Material                  "json:\"material\" graphql:\"material\""
	ManufacturingProcess        *ComponentFragment_ManufacturingProcess      "json:\"manufacturingProcess\" graphql:\"manufacturingProcess\""
	ProductionMetadata          []*ComponentFragment_ProductionMetadata      "json:\"productionMetadata\" graphql:\"productionMetadata\""
}
type DatabaseFragment struct {
	ID      string "json:\"id\" graphql:\"id\""
	Version string "json:\"version\" graphql:\"version\""
}
type FileFragment struct {
	ID            string     "json:\"id\" graphql:\"id\""
	DiscoveredAt  time.Time  "json:\"discoveredAt\" graphql:\"discoveredAt\""
	LastIndexedAt time.Time  "json:\"lastIndexedAt\" graphql:\"lastIndexedAt\""
	Name          string     "json:\"name\" graphql:\"name\""
	Path          string     "json:\"path\" graphql:\"path\""
	MimeType      *string    "json:\"mimeType\" graphql:\"mimeType\""
	URL           string     "json:\"url\" graphql:\"url\""
	CreatedAt     *time.Time "json:\"createdAt\" graphql:\"createdAt\""
}
type FloatVFragment struct {
	ID    string   "json:\"id\" graphql:\"id\""
	Value *float64 "json:\"value\" graphql:\"value\""
}
type HostFragment struct {
	ID     string "json:\"id\" graphql:\"id\""
	Domain string "json:\"domain\" graphql:\"domain\""
	Name   string "json:\"name\" graphql:\"name\""
}
type KeyValueFragment struct {
	ID    string                  "json:\"id\" graphql:\"id\""
	Key   *string                 "json:\"key\" graphql:\"key\""
	Value *KeyValueFragment_Value "json:\"value\" graphql:\"value\""
}
type LicenseFragment struct {
	ID            string             "json:\"id\" graphql:\"id\""
	Xid           string             "json:\"xid\" graphql:\"xid\""
	Name          string             "json:\"name\" graphql:\"name\""
	Text          *string            "json:\"text\" graphql:\"text\""
	ReferenceURL  *string            "json:\"referenceURL\" graphql:\"referenceURL\""
	DetailsURL    *string            "json:\"detailsURL\" graphql:\"detailsURL\""
	Type          models.LicenseType "json:\"type\" graphql:\"type\""
	IsSpdx        bool               "json:\"isSpdx\" graphql:\"isSpdx\""
	IsDeprecated  bool               "json:\"isDeprecated\" graphql:\"isDeprecated\""
	IsOsiApproved bool               "json:\"isOsiApproved\" graphql:\"isOsiApproved\""
	IsFsfLibre    bool               "json:\"isFsfLibre\" graphql:\"isFsfLibre\""
	IsBlocked     bool               "json:\"isBlocked\" graphql:\"isBlocked\""
}
type ManufacturingProcessFragment struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Description *string "json:\"description\" graphql:\"description\""
}
type MaterialFragment struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Description *string "json:\"description\" graphql:\"description\""
}
type NodeFragment struct {
	ID string "json:\"id\" graphql:\"id\""
}
type OpenSCADDimensionsFragment struct {
	ID       string  "json:\"id\" graphql:\"id\""
	Openscad *string "json:\"openscad\" graphql:\"openscad\""
	Unit     *string "json:\"unit\" graphql:\"unit\""
}
type ProductFragment struct {
	ID            string                       "json:\"id\" graphql:\"id\""
	DiscoveredAt  time.Time                    "json:\"discoveredAt\" graphql:\"discoveredAt\""
	LastIndexedAt time.Time                    "json:\"lastIndexedAt\" graphql:\"lastIndexedAt\""
	Xid           string                       "json:\"xid\" graphql:\"xid\""
	Name          string                       "json:\"name\" graphql:\"name\""
	Owner         ProductFragment_Owner        "json:\"owner\" graphql:\"owner\""
	Description   string                       "json:\"description\" graphql:\"description\""
	Website       *string                      "json:\"website\" graphql:\"website\""
	Version       string                       "json:\"version\" graphql:\"version\""
	Release       ProductFragment_Release      "json:\"release\" graphql:\"release\""
	Releases      []*ProductFragment_Releases  "json:\"releases\" graphql:\"releases\""
	RenamedTo     *ProductFragment_RenamedTo   "json:\"renamedTo\" graphql:\"renamedTo\""
	RenamedFrom   *ProductFragment_RenamedFrom "json:\"renamedFrom\" graphql:\"renamedFrom\""
	ForkOf        *ProductFragment_ForkOf      "json:\"forkOf\" graphql:\"forkOf\""
	Forks         []*ProductFragment_Forks     "json:\"forks\" graphql:\"forks\""
	Tags          []*ProductFragment_Tags      "json:\"tags\" graphql:\"tags\""
	Category      *ProductFragment_Category    "json:\"category\" graphql:\"category\""
}
type SoftwareFragment struct {
	ID                    string                              "json:\"id\" graphql:\"id\""
	DiscoveredAt          time.Time                           "json:\"discoveredAt\" graphql:\"discoveredAt\""
	LastIndexedAt         time.Time                           "json:\"lastIndexedAt\" graphql:\"lastIndexedAt\""
	Release               *string                             "json:\"release\" graphql:\"release\""
	InstallationGuide     *SoftwareFragment_InstallationGuide "json:\"installationGuide\" graphql:\"installationGuide\""
	DocumentationLanguage *string                             "json:\"documentationLanguage\" graphql:\"documentationLanguage\""
	License               *SoftwareFragment_License           "json:\"license\" graphql:\"license\""
	Licensor              *string                             "json:\"licensor\" graphql:\"licensor\""
}
type StringVFragment struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Value *string "json:\"value\" graphql:\"value\""
}
type TagFragment struct {
	ID      string                 "json:\"id\" graphql:\"id\""
	Xid     string                 "json:\"xid\" graphql:\"xid\""
	Name    string                 "json:\"name\" graphql:\"name\""
	Aliases []*TagFragment_Aliases "json:\"aliases\" graphql:\"aliases\""
	Related []*TagFragment_Related "json:\"related\" graphql:\"related\""
}
type TechnicalStandardFragment struct {
	ID          string                                  "json:\"id\" graphql:\"id\""
	Xid         string                                  "json:\"xid\" graphql:\"xid\""
	Name        string                                  "json:\"name\" graphql:\"name\""
	Description *string                                 "json:\"description\" graphql:\"description\""
	Components  []*TechnicalStandardFragment_Components "json:\"components\" graphql:\"components\""
}
type TechnologySpecificDocumentationCriteriaFragment struct {
	ID              string                                                        "json:\"id\" graphql:\"id\""
	Xid             string                                                        "json:\"xid\" graphql:\"xid\""
	Name            string                                                        "json:\"name\" graphql:\"name\""
	Comment         *string                                                       "json:\"comment\" graphql:\"comment\""
	RequirementsURI *string                                                       "json:\"requirementsUri\" graphql:\"requirementsUri\""
	Components      []*TechnologySpecificDocumentationCriteriaFragment_Components "json:\"components\" graphql:\"components\""
}
type UserOrGroupFragment struct {
	User     UserOrGroupFragment_User        "graphql:\"... on User\""
	Group    UserOrGroupFragment_Group       "graphql:\"... on Group\""
	Xid      string                          "json:\"xid\" graphql:\"xid\""
	Host     UserOrGroupFragment_Host        "json:\"host\" graphql:\"host\""
	Name     string                          "json:\"name\" graphql:\"name\""
	Email    *string                         "json:\"email\" graphql:\"email\""
	Avatar   *UserOrGroupFragment_Avatar     "json:\"avatar\" graphql:\"avatar\""
	URL      *string                         "json:\"url\" graphql:\"url\""
	MemberOf []*UserOrGroupFragment_MemberOf "json:\"memberOf\" graphql:\"memberOf\""
	Products []*UserOrGroupFragment_Products "json:\"products\" graphql:\"products\""
}
type UserFragment struct {
	ID       string                                       "json:\"id\" graphql:\"id\""
	User     UserFragment_UserOrGroupFragment_User        "graphql:\"... on User\""
	Group    UserFragment_UserOrGroupFragment_Group       "graphql:\"... on Group\""
	Xid      string                                       "json:\"xid\" graphql:\"xid\""
	Host     UserFragment_UserOrGroupFragment_Host        "json:\"host\" graphql:\"host\""
	Name     string                                       "json:\"name\" graphql:\"name\""
	Email    *string                                      "json:\"email\" graphql:\"email\""
	Avatar   *UserFragment_UserOrGroupFragment_Avatar     "json:\"avatar\" graphql:\"avatar\""
	URL      *string                                      "json:\"url\" graphql:\"url\""
	MemberOf []*UserFragment_UserOrGroupFragment_MemberOf "json:\"memberOf\" graphql:\"memberOf\""
	Products []*UserFragment_UserOrGroupFragment_Products "json:\"products\" graphql:\"products\""
	FullName *string                                      "json:\"fullName\" graphql:\"fullName\""
	Locale   *string                                      "json:\"locale\" graphql:\"locale\""
}
type GroupFragment struct {
	ID       string                                        "json:\"id\" graphql:\"id\""
	User     GroupFragment_UserOrGroupFragment_User        "graphql:\"... on User\""
	Group    GroupFragment_UserOrGroupFragment_Group       "graphql:\"... on Group\""
	Xid      string                                        "json:\"xid\" graphql:\"xid\""
	Host     GroupFragment_UserOrGroupFragment_Host        "json:\"host\" graphql:\"host\""
	Name     string                                        "json:\"name\" graphql:\"name\""
	Email    *string                                       "json:\"email\" graphql:\"email\""
	Avatar   *GroupFragment_UserOrGroupFragment_Avatar     "json:\"avatar\" graphql:\"avatar\""
	URL      *string                                       "json:\"url\" graphql:\"url\""
	MemberOf []*GroupFragment_UserOrGroupFragment_MemberOf "json:\"memberOf\" graphql:\"memberOf\""
	Products []*GroupFragment_UserOrGroupFragment_Products "json:\"products\" graphql:\"products\""
	Members  []*GroupFragment_Members                      "json:\"members\" graphql:\"members\""
}
type CategoryFragment_Parent struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CategoryFragment_Children struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CategoryFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentSourceFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentSourceFragment_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Releases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Repository struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_AdditionalLicenses struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Licensor struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_CompliesWith struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Tsdc struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Image struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Readme struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_ContributionGuide struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Bom struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_ManufacturingInstructions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_UserManual struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Product struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_UsedIn struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Source struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Export struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Auxiliary struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_OuterDimensions_BoundingBoxDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_OuterDimensions_OpenSCADDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_OuterDimensions struct {
	BoundingBoxDimensions ComponentFragment_OuterDimensions_BoundingBoxDimensions "graphql:\"... on BoundingBoxDimensions\""
	OpenSCADDimensions    ComponentFragment_OuterDimensions_OpenSCADDimensions    "graphql:\"... on OpenSCADDimensions\""
}
type ComponentFragment_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_ProductionMetadata struct {
	ID string "json:\"id\" graphql:\"id\""
}
type KeyValueFragment_Value_StringV struct {
	ID          string  "json:\"id\" graphql:\"id\""
	StringValue *string "json:\"stringValue\" graphql:\"stringValue\""
}
type KeyValueFragment_Value_FloatV struct {
	ID         string   "json:\"id\" graphql:\"id\""
	FloatValue *float64 "json:\"floatValue\" graphql:\"floatValue\""
}
type KeyValueFragment_Value struct {
	StringV KeyValueFragment_Value_StringV "graphql:\"... on StringV\""
	FloatV  KeyValueFragment_Value_FloatV  "graphql:\"... on FloatV\""
}
type ProductFragment_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductFragment_Release struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductFragment_Releases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductFragment_RenamedTo struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductFragment_RenamedFrom struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductFragment_ForkOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductFragment_Forks struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductFragment_Tags struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductFragment_Category struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SoftwareFragment_InstallationGuide struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SoftwareFragment_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type TagFragment_Aliases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type TagFragment_Related struct {
	ID string "json:\"id\" graphql:\"id\""
}
type TechnicalStandardFragment_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type TechnologySpecificDocumentationCriteriaFragment_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserFragment_UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserFragment_UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserFragment_UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserFragment_UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserFragment_UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UserFragment_UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GroupFragment_UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GroupFragment_UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GroupFragment_UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GroupFragment_UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GroupFragment_UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GroupFragment_Members_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GroupFragment_Members_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GroupFragment_Members struct {
	User  GroupFragment_Members_User  "graphql:\"... on User\""
	Group GroupFragment_Members_Group "graphql:\"... on Group\""
}
type SaveBoundingBoxDimensionss_DeleteBoundingBoxDimensions_BoundingBoxDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveBoundingBoxDimensionss_DeleteBoundingBoxDimensions struct {
	BoundingBoxDimensions []*SaveBoundingBoxDimensionss_DeleteBoundingBoxDimensions_BoundingBoxDimensions "json:\"boundingBoxDimensions\" graphql:\"boundingBoxDimensions\""
}
type SaveBoundingBoxDimensionss_AddBoundingBoxDimensions_BoundingBoxDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveBoundingBoxDimensionss_AddBoundingBoxDimensions struct {
	BoundingBoxDimensions []*SaveBoundingBoxDimensionss_AddBoundingBoxDimensions_BoundingBoxDimensions "json:\"boundingBoxDimensions\" graphql:\"boundingBoxDimensions\""
}
type DeleteBoundingBoxDimensions_DeleteBoundingBoxDimensions_BoundingBoxDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteBoundingBoxDimensions_DeleteBoundingBoxDimensions struct {
	BoundingBoxDimensions []*DeleteBoundingBoxDimensions_DeleteBoundingBoxDimensions_BoundingBoxDimensions "json:\"boundingBoxDimensions\" graphql:\"boundingBoxDimensions\""
}
type GetCategory_GetCategory_CategoryFragment_Parent struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetCategory_GetCategory_CategoryFragment_Children struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetCategory_GetCategory_CategoryFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetCategories_QueryCategory_CategoryFragment_Parent struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetCategories_QueryCategory_CategoryFragment_Children struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetCategories_QueryCategory_CategoryFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveCategories_AddCategory_Category struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveCategories_AddCategory struct {
	Category []*SaveCategories_AddCategory_Category "json:\"category\" graphql:\"category\""
}
type DeleteCategory_DeleteCategory_Category struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteCategory_DeleteCategory struct {
	Category []*DeleteCategory_DeleteCategory_Category "json:\"category\" graphql:\"category\""
}
type GetComponentSource_GetComponentSource_ComponentSourceFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponentSource_GetComponentSource_ComponentSourceFragment_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponentSources_QueryComponentSource_ComponentSourceFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponentSources_QueryComponentSource_ComponentSourceFragment_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveComponentSources_AddComponentSource_ComponentSource struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveComponentSources_AddComponentSource struct {
	ComponentSource []*SaveComponentSources_AddComponentSource_ComponentSource "json:\"componentSource\" graphql:\"componentSource\""
}
type DeleteComponentSource_DeleteComponentSource_ComponentSource struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteComponentSource_DeleteComponentSource struct {
	ComponentSource []*DeleteComponentSource_DeleteComponentSource_ComponentSource "json:\"componentSource\" graphql:\"componentSource\""
}
type GetComponent_GetComponent_ComponentFragment_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Releases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Repository struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_AdditionalLicenses struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Licensor struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_CompliesWith struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Tsdc struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Image struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Readme struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_ContributionGuide struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Bom struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_ManufacturingInstructions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_UserManual struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Product struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_UsedIn struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Source struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Export struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Auxiliary struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_OuterDimensions_BoundingBoxDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_OuterDimensions_OpenSCADDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_OuterDimensions struct {
	BoundingBoxDimensions GetComponent_GetComponent_ComponentFragment_OuterDimensions_BoundingBoxDimensions "graphql:\"... on BoundingBoxDimensions\""
	OpenSCADDimensions    GetComponent_GetComponent_ComponentFragment_OuterDimensions_OpenSCADDimensions    "graphql:\"... on OpenSCADDimensions\""
}
type GetComponent_GetComponent_ComponentFragment_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponent_GetComponent_ComponentFragment_ProductionMetadata struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Releases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Repository struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_AdditionalLicenses struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Licensor struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_CompliesWith struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Tsdc struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Image struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Readme struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_ContributionGuide struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Bom struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_ManufacturingInstructions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_UserManual struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Product struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_UsedIn struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Source struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Export struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Auxiliary struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_OuterDimensions_BoundingBoxDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_OuterDimensions_OpenSCADDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_OuterDimensions struct {
	BoundingBoxDimensions GetComponents_QueryComponent_ComponentFragment_OuterDimensions_BoundingBoxDimensions "graphql:\"... on BoundingBoxDimensions\""
	OpenSCADDimensions    GetComponents_QueryComponent_ComponentFragment_OuterDimensions_OpenSCADDimensions    "graphql:\"... on OpenSCADDimensions\""
}
type GetComponents_QueryComponent_ComponentFragment_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_ProductionMetadata struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveComponents_AddComponent_Component struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveComponents_AddComponent struct {
	Component []*SaveComponents_AddComponent_Component "json:\"component\" graphql:\"component\""
}
type DeleteComponent_DeleteComponent_Component struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteComponent_DeleteComponent struct {
	Component []*DeleteComponent_DeleteComponent_Component "json:\"component\" graphql:\"component\""
}
type SaveDatabaseInfo_DeleteDatabase_Database struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveDatabaseInfo_DeleteDatabase struct {
	Database []*SaveDatabaseInfo_DeleteDatabase_Database "json:\"database\" graphql:\"database\""
}
type SaveDatabaseInfo_AddDatabase_Database struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveDatabaseInfo_AddDatabase struct {
	Database []*SaveDatabaseInfo_AddDatabase_Database "json:\"database\" graphql:\"database\""
}
type SaveFiles_DeleteFile_File struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveFiles_DeleteFile struct {
	File []*SaveFiles_DeleteFile_File "json:\"file\" graphql:\"file\""
}
type SaveFiles_AddFile_File struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveFiles_AddFile struct {
	File []*SaveFiles_AddFile_File "json:\"file\" graphql:\"file\""
}
type DeleteFile_DeleteFile_File struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteFile_DeleteFile struct {
	File []*DeleteFile_DeleteFile_File "json:\"file\" graphql:\"file\""
}
type SaveFloatVs_DeleteFloatV_FloatV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveFloatVs_DeleteFloatV struct {
	FloatV []*SaveFloatVs_DeleteFloatV_FloatV "json:\"floatV\" graphql:\"floatV\""
}
type SaveFloatVs_AddFloatV_FloatV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveFloatVs_AddFloatV struct {
	FloatV []*SaveFloatVs_AddFloatV_FloatV "json:\"floatV\" graphql:\"floatV\""
}
type DeleteFloatVs_DeleteFloatV_FloatV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteFloatVs_DeleteFloatV struct {
	FloatV []*DeleteFloatVs_DeleteFloatV_FloatV "json:\"floatV\" graphql:\"floatV\""
}
type SaveHosts_AddHost_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveHosts_AddHost struct {
	Host []*SaveHosts_AddHost_Host "json:\"host\" graphql:\"host\""
}
type DeleteHost_DeleteHost_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteHost_DeleteHost struct {
	Host []*DeleteHost_DeleteHost_Host "json:\"host\" graphql:\"host\""
}
type GetKeyValue_GetKeyValue_KeyValueFragment_Value_StringV struct {
	ID          string  "json:\"id\" graphql:\"id\""
	StringValue *string "json:\"stringValue\" graphql:\"stringValue\""
}
type GetKeyValue_GetKeyValue_KeyValueFragment_Value_FloatV struct {
	ID         string   "json:\"id\" graphql:\"id\""
	FloatValue *float64 "json:\"floatValue\" graphql:\"floatValue\""
}
type GetKeyValue_GetKeyValue_KeyValueFragment_Value struct {
	StringV GetKeyValue_GetKeyValue_KeyValueFragment_Value_StringV "graphql:\"... on StringV\""
	FloatV  GetKeyValue_GetKeyValue_KeyValueFragment_Value_FloatV  "graphql:\"... on FloatV\""
}
type GetKeyValues_QueryKeyValue_KeyValueFragment_Value_StringV struct {
	ID          string  "json:\"id\" graphql:\"id\""
	StringValue *string "json:\"stringValue\" graphql:\"stringValue\""
}
type GetKeyValues_QueryKeyValue_KeyValueFragment_Value_FloatV struct {
	ID         string   "json:\"id\" graphql:\"id\""
	FloatValue *float64 "json:\"floatValue\" graphql:\"floatValue\""
}
type GetKeyValues_QueryKeyValue_KeyValueFragment_Value struct {
	StringV GetKeyValues_QueryKeyValue_KeyValueFragment_Value_StringV "graphql:\"... on StringV\""
	FloatV  GetKeyValues_QueryKeyValue_KeyValueFragment_Value_FloatV  "graphql:\"... on FloatV\""
}
type SaveKeyValues_AddKeyValue_KeyValue struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveKeyValues_AddKeyValue struct {
	KeyValue []*SaveKeyValues_AddKeyValue_KeyValue "json:\"keyValue\" graphql:\"keyValue\""
}
type DeleteKeyValue_DeleteKeyValue_KeyValue struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteKeyValue_DeleteKeyValue struct {
	KeyValue []*DeleteKeyValue_DeleteKeyValue_KeyValue "json:\"keyValue\" graphql:\"keyValue\""
}
type SaveLicenses_AddLicense_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveLicenses_AddLicense struct {
	License []*SaveLicenses_AddLicense_License "json:\"license\" graphql:\"license\""
}
type DeleteLicense_DeleteLicense_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteLicense_DeleteLicense struct {
	License []*DeleteLicense_DeleteLicense_License "json:\"license\" graphql:\"license\""
}
type SaveManufacturingProcesses_DeleteManufacturingProcess_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveManufacturingProcesses_DeleteManufacturingProcess struct {
	ManufacturingProcess []*SaveManufacturingProcesses_DeleteManufacturingProcess_ManufacturingProcess "json:\"manufacturingProcess\" graphql:\"manufacturingProcess\""
}
type SaveManufacturingProcesses_AddManufacturingProcess_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveManufacturingProcesses_AddManufacturingProcess struct {
	ManufacturingProcess []*SaveManufacturingProcesses_AddManufacturingProcess_ManufacturingProcess "json:\"manufacturingProcess\" graphql:\"manufacturingProcess\""
}
type DeleteManufacturingProcesses_DeleteManufacturingProcess_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteManufacturingProcesses_DeleteManufacturingProcess struct {
	ManufacturingProcess []*DeleteManufacturingProcesses_DeleteManufacturingProcess_ManufacturingProcess "json:\"manufacturingProcess\" graphql:\"manufacturingProcess\""
}
type SaveMaterials_DeleteMaterial_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveMaterials_DeleteMaterial struct {
	Material []*SaveMaterials_DeleteMaterial_Material "json:\"material\" graphql:\"material\""
}
type SaveMaterials_AddMaterial_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveMaterials_AddMaterial struct {
	Material []*SaveMaterials_AddMaterial_Material "json:\"material\" graphql:\"material\""
}
type DeleteMaterials_DeleteMaterial_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteMaterials_DeleteMaterial struct {
	Material []*DeleteMaterials_DeleteMaterial_Material "json:\"material\" graphql:\"material\""
}
type GetNodes_QueryNode struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteNode_DeleteNode_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteNode_DeleteNode struct {
	Node []*DeleteNode_DeleteNode_Node "json:\"node\" graphql:\"node\""
}
type SaveOpenSCADDimensionss_DeleteOpenSCADDimensions_OpenSCADDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveOpenSCADDimensionss_DeleteOpenSCADDimensions struct {
	OpenSCADDimensions []*SaveOpenSCADDimensionss_DeleteOpenSCADDimensions_OpenSCADDimensions "json:\"openSCADDimensions\" graphql:\"openSCADDimensions\""
}
type SaveOpenSCADDimensionss_AddOpenSCADDimensions_OpenSCADDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveOpenSCADDimensionss_AddOpenSCADDimensions struct {
	OpenSCADDimensions []*SaveOpenSCADDimensionss_AddOpenSCADDimensions_OpenSCADDimensions "json:\"openSCADDimensions\" graphql:\"openSCADDimensions\""
}
type DeleteOpenSCADDimensionss_DeleteOpenSCADDimensions_OpenSCADDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteOpenSCADDimensionss_DeleteOpenSCADDimensions struct {
	OpenSCADDimensions []*DeleteOpenSCADDimensionss_DeleteOpenSCADDimensions_OpenSCADDimensions "json:\"openSCADDimensions\" graphql:\"openSCADDimensions\""
}
type GetProduct_GetProduct_ProductFragment_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProduct_GetProduct_ProductFragment_Release struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProduct_GetProduct_ProductFragment_Releases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProduct_GetProduct_ProductFragment_RenamedTo struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProduct_GetProduct_ProductFragment_RenamedFrom struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProduct_GetProduct_ProductFragment_ForkOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProduct_GetProduct_ProductFragment_Forks struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProduct_GetProduct_ProductFragment_Tags struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProduct_GetProduct_ProductFragment_Category struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProducts_QueryProduct_ProductFragment_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProducts_QueryProduct_ProductFragment_Release struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProducts_QueryProduct_ProductFragment_Releases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProducts_QueryProduct_ProductFragment_RenamedTo struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProducts_QueryProduct_ProductFragment_RenamedFrom struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProducts_QueryProduct_ProductFragment_ForkOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProducts_QueryProduct_ProductFragment_Forks struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProducts_QueryProduct_ProductFragment_Tags struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProducts_QueryProduct_ProductFragment_Category struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveProducts_AddProduct_Product struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveProducts_AddProduct struct {
	Product []*SaveProducts_AddProduct_Product "json:\"product\" graphql:\"product\""
}
type DeleteProduct_DeleteProduct_Product struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteProduct_DeleteProduct struct {
	Product []*DeleteProduct_DeleteProduct_Product "json:\"product\" graphql:\"product\""
}
type GetSoftware_GetSoftware_SoftwareFragment_InstallationGuide struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetSoftware_GetSoftware_SoftwareFragment_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetSoftwares_QuerySoftware_SoftwareFragment_InstallationGuide struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetSoftwares_QuerySoftware_SoftwareFragment_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveSoftwares_DeleteSoftware_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveSoftwares_DeleteSoftware struct {
	Software []*SaveSoftwares_DeleteSoftware_Software "json:\"software\" graphql:\"software\""
}
type SaveSoftwares_AddSoftware_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveSoftwares_AddSoftware struct {
	Software []*SaveSoftwares_AddSoftware_Software "json:\"software\" graphql:\"software\""
}
type DeleteSoftware_DeleteSoftware_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteSoftware_DeleteSoftware struct {
	Software []*DeleteSoftware_DeleteSoftware_Software "json:\"software\" graphql:\"software\""
}
type SaveStringVs_DeleteStringV_StringV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveStringVs_DeleteStringV struct {
	StringV []*SaveStringVs_DeleteStringV_StringV "json:\"stringV\" graphql:\"stringV\""
}
type SaveStringVs_AddStringV_StringV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveStringVs_AddStringV struct {
	StringV []*SaveStringVs_AddStringV_StringV "json:\"stringV\" graphql:\"stringV\""
}
type DeleteStringVs_DeleteStringV_StringV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteStringVs_DeleteStringV struct {
	StringV []*DeleteStringVs_DeleteStringV_StringV "json:\"stringV\" graphql:\"stringV\""
}
type GetTag_GetTag_TagFragment_Aliases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetTag_GetTag_TagFragment_Related struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetTags_QueryTag_TagFragment_Aliases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetTags_QueryTag_TagFragment_Related struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveTags_AddTag_Tag struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveTags_AddTag struct {
	Tag []*SaveTags_AddTag_Tag "json:\"tag\" graphql:\"tag\""
}
type DeleteTag_DeleteTag_Tag struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteTag_DeleteTag struct {
	Tag []*DeleteTag_DeleteTag_Tag "json:\"tag\" graphql:\"tag\""
}
type GetTechnicalStandard_GetTechnicalStandard_TechnicalStandardFragment_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetTechnicalStandards_QueryTechnicalStandard_TechnicalStandardFragment_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveTechnicalStandards_AddTechnicalStandard_TechnicalStandard struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveTechnicalStandards_AddTechnicalStandard struct {
	TechnicalStandard []*SaveTechnicalStandards_AddTechnicalStandard_TechnicalStandard "json:\"technicalStandard\" graphql:\"technicalStandard\""
}
type DeleteTechnicalStandard_DeleteTechnicalStandard_TechnicalStandard struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteTechnicalStandard_DeleteTechnicalStandard struct {
	TechnicalStandard []*DeleteTechnicalStandard_DeleteTechnicalStandard_TechnicalStandard "json:\"technicalStandard\" graphql:\"technicalStandard\""
}
type GetTechnologySpecificDocumentationCriteria_GetTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteriaFragment_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetTechnologySpecificDocumentationCriterias_QueryTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteriaFragment_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveTechnologySpecificDocumentationCriterias_AddTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteria struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveTechnologySpecificDocumentationCriterias_AddTechnologySpecificDocumentationCriteria struct {
	TechnologySpecificDocumentationCriteria []*SaveTechnologySpecificDocumentationCriterias_AddTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteria "json:\"technologySpecificDocumentationCriteria\" graphql:\"technologySpecificDocumentationCriteria\""
}
type DeleteTechnologySpecificDocumentationCriteria_DeleteTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteria struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteTechnologySpecificDocumentationCriteria_DeleteTechnologySpecificDocumentationCriteria struct {
	TechnologySpecificDocumentationCriteria []*DeleteTechnologySpecificDocumentationCriteria_DeleteTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteria "json:\"technologySpecificDocumentationCriteria\" graphql:\"technologySpecificDocumentationCriteria\""
}
type GetUserOrGroup_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_Members_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_Members_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_Members struct {
	User  GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_Members_User  "graphql:\"... on User\""
	Group GetUserOrGroup_GetUserOrGroup_Group_GroupFragment_Members_Group "graphql:\"... on Group\""
}
type GetUserOrGroup_GetUserOrGroup struct {
	User  UserFragment  "graphql:\"... on User\""
	Group GroupFragment "graphql:\"... on Group\""
}
type GetUserOrGroups_QueryUserOrGroup_User_UserFragment_UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_User_UserFragment_UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_User_UserFragment_UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_User_UserFragment_UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_User_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_User_UserFragment_UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_Members_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_Members_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_Members struct {
	User  GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_Members_User  "graphql:\"... on User\""
	Group GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_Members_Group "graphql:\"... on Group\""
}
type GetUserOrGroups_QueryUserOrGroup struct {
	User  UserFragment  "graphql:\"... on User\""
	Group GroupFragment "graphql:\"... on Group\""
}
type DeleteUserOrGroup_DeleteUserOrGroup_UserOrGroup struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteUserOrGroup_DeleteUserOrGroup struct {
	UserOrGroup []*DeleteUserOrGroup_DeleteUserOrGroup_UserOrGroup "json:\"userOrGroup\" graphql:\"userOrGroup\""
}
type GetUser_GetUser_UserFragment_UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUser_GetUser_UserFragment_UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUser_GetUser_UserFragment_UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUser_GetUser_UserFragment_UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUser_GetUser_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUser_GetUser_UserFragment_UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUsers_QueryUser_UserFragment_UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUsers_QueryUser_UserFragment_UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUsers_QueryUser_UserFragment_UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUsers_QueryUser_UserFragment_UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUsers_QueryUser_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUsers_QueryUser_UserFragment_UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveUsers_AddUser_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveUsers_AddUser struct {
	User []*SaveUsers_AddUser_User "json:\"user\" graphql:\"user\""
}
type DeleteUser_DeleteUser_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteUser_DeleteUser struct {
	User []*DeleteUser_DeleteUser_User "json:\"user\" graphql:\"user\""
}
type GetGroup_GetGroup_GroupFragment_UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroup_GetGroup_GroupFragment_UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroup_GetGroup_GroupFragment_UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroup_GetGroup_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroup_GetGroup_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroup_GetGroup_GroupFragment_UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroup_GetGroup_GroupFragment_Members_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroup_GetGroup_GroupFragment_Members_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroup_GetGroup_GroupFragment_Members struct {
	User  GetGroup_GetGroup_GroupFragment_Members_User  "graphql:\"... on User\""
	Group GetGroup_GetGroup_GroupFragment_Members_Group "graphql:\"... on Group\""
}
type GetGroups_QueryGroup_GroupFragment_UserOrGroupFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroups_QueryGroup_GroupFragment_UserOrGroupFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroups_QueryGroup_GroupFragment_UserOrGroupFragment_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroups_QueryGroup_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroups_QueryGroup_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroups_QueryGroup_GroupFragment_UserOrGroupFragment_Products struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroups_QueryGroup_GroupFragment_Members_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroups_QueryGroup_GroupFragment_Members_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroups_QueryGroup_GroupFragment_Members struct {
	User  GetGroups_QueryGroup_GroupFragment_Members_User  "graphql:\"... on User\""
	Group GetGroups_QueryGroup_GroupFragment_Members_Group "graphql:\"... on Group\""
}
type SaveGroups_AddGroup_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SaveGroups_AddGroup struct {
	Group []*SaveGroups_AddGroup_Group "json:\"group\" graphql:\"group\""
}
type DeleteGroup_DeleteGroup_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteGroup_DeleteGroup struct {
	Group []*DeleteGroup_DeleteGroup_Group "json:\"group\" graphql:\"group\""
}
type GetBoundingBoxDimensions struct {
	GetBoundingBoxDimensions *BoundingBoxDimensionsFragment "json:\"getBoundingBoxDimensions\" graphql:\"getBoundingBoxDimensions\""
}
type GetBoundingBoxDimensionss struct {
	QueryBoundingBoxDimensions []*BoundingBoxDimensionsFragment "json:\"queryBoundingBoxDimensions\" graphql:\"queryBoundingBoxDimensions\""
}
type SaveBoundingBoxDimensionss struct {
	DeleteBoundingBoxDimensions *SaveBoundingBoxDimensionss_DeleteBoundingBoxDimensions "json:\"deleteBoundingBoxDimensions\" graphql:\"deleteBoundingBoxDimensions\""
	AddBoundingBoxDimensions    *SaveBoundingBoxDimensionss_AddBoundingBoxDimensions    "json:\"addBoundingBoxDimensions\" graphql:\"addBoundingBoxDimensions\""
}
type DeleteBoundingBoxDimensions struct {
	DeleteBoundingBoxDimensions *DeleteBoundingBoxDimensions_DeleteBoundingBoxDimensions "json:\"deleteBoundingBoxDimensions\" graphql:\"deleteBoundingBoxDimensions\""
}
type GetCategory struct {
	GetCategory *CategoryFragment "json:\"getCategory\" graphql:\"getCategory\""
}
type GetCategories struct {
	QueryCategory []*CategoryFragment "json:\"queryCategory\" graphql:\"queryCategory\""
}
type SaveCategories struct {
	AddCategory *SaveCategories_AddCategory "json:\"addCategory\" graphql:\"addCategory\""
}
type DeleteCategory struct {
	DeleteCategory *DeleteCategory_DeleteCategory "json:\"deleteCategory\" graphql:\"deleteCategory\""
}
type GetComponentSource struct {
	GetComponentSource *ComponentSourceFragment "json:\"getComponentSource\" graphql:\"getComponentSource\""
}
type GetComponentSources struct {
	QueryComponentSource []*ComponentSourceFragment "json:\"queryComponentSource\" graphql:\"queryComponentSource\""
}
type SaveComponentSources struct {
	AddComponentSource *SaveComponentSources_AddComponentSource "json:\"addComponentSource\" graphql:\"addComponentSource\""
}
type DeleteComponentSource struct {
	DeleteComponentSource *DeleteComponentSource_DeleteComponentSource "json:\"deleteComponentSource\" graphql:\"deleteComponentSource\""
}
type GetComponent struct {
	GetComponent *ComponentFragment "json:\"getComponent\" graphql:\"getComponent\""
}
type GetComponents struct {
	QueryComponent []*ComponentFragment "json:\"queryComponent\" graphql:\"queryComponent\""
}
type SaveComponents struct {
	AddComponent *SaveComponents_AddComponent "json:\"addComponent\" graphql:\"addComponent\""
}
type DeleteComponent struct {
	DeleteComponent *DeleteComponent_DeleteComponent "json:\"deleteComponent\" graphql:\"deleteComponent\""
}
type GetDatabaseInfo struct {
	QueryDatabase []*DatabaseFragment "json:\"queryDatabase\" graphql:\"queryDatabase\""
}
type SaveDatabaseInfo struct {
	DeleteDatabase *SaveDatabaseInfo_DeleteDatabase "json:\"deleteDatabase\" graphql:\"deleteDatabase\""
	AddDatabase    *SaveDatabaseInfo_AddDatabase    "json:\"addDatabase\" graphql:\"addDatabase\""
}
type GetFile struct {
	GetFile *FileFragment "json:\"getFile\" graphql:\"getFile\""
}
type GetFiles struct {
	QueryFile []*FileFragment "json:\"queryFile\" graphql:\"queryFile\""
}
type SaveFiles struct {
	DeleteFile *SaveFiles_DeleteFile "json:\"deleteFile\" graphql:\"deleteFile\""
	AddFile    *SaveFiles_AddFile    "json:\"addFile\" graphql:\"addFile\""
}
type DeleteFile struct {
	DeleteFile *DeleteFile_DeleteFile "json:\"deleteFile\" graphql:\"deleteFile\""
}
type GetFloatV struct {
	GetFloatV *FloatVFragment "json:\"getFloatV\" graphql:\"getFloatV\""
}
type GetFloatVs struct {
	QueryFloatV []*FloatVFragment "json:\"queryFloatV\" graphql:\"queryFloatV\""
}
type SaveFloatVs struct {
	DeleteFloatV *SaveFloatVs_DeleteFloatV "json:\"deleteFloatV\" graphql:\"deleteFloatV\""
	AddFloatV    *SaveFloatVs_AddFloatV    "json:\"addFloatV\" graphql:\"addFloatV\""
}
type DeleteFloatVs struct {
	DeleteFloatV *DeleteFloatVs_DeleteFloatV "json:\"deleteFloatV\" graphql:\"deleteFloatV\""
}
type GetHost struct {
	GetHost *HostFragment "json:\"getHost\" graphql:\"getHost\""
}
type GetHosts struct {
	QueryHost []*HostFragment "json:\"queryHost\" graphql:\"queryHost\""
}
type SaveHosts struct {
	AddHost *SaveHosts_AddHost "json:\"addHost\" graphql:\"addHost\""
}
type DeleteHost struct {
	DeleteHost *DeleteHost_DeleteHost "json:\"deleteHost\" graphql:\"deleteHost\""
}
type GetKeyValue struct {
	GetKeyValue *KeyValueFragment "json:\"getKeyValue\" graphql:\"getKeyValue\""
}
type GetKeyValues struct {
	QueryKeyValue []*KeyValueFragment "json:\"queryKeyValue\" graphql:\"queryKeyValue\""
}
type SaveKeyValues struct {
	AddKeyValue *SaveKeyValues_AddKeyValue "json:\"addKeyValue\" graphql:\"addKeyValue\""
}
type DeleteKeyValue struct {
	DeleteKeyValue *DeleteKeyValue_DeleteKeyValue "json:\"deleteKeyValue\" graphql:\"deleteKeyValue\""
}
type GetLicense struct {
	GetLicense *LicenseFragment "json:\"getLicense\" graphql:\"getLicense\""
}
type GetLicenses struct {
	QueryLicense []*LicenseFragment "json:\"queryLicense\" graphql:\"queryLicense\""
}
type SaveLicenses struct {
	AddLicense *SaveLicenses_AddLicense "json:\"addLicense\" graphql:\"addLicense\""
}
type DeleteLicense struct {
	DeleteLicense *DeleteLicense_DeleteLicense "json:\"deleteLicense\" graphql:\"deleteLicense\""
}
type GetManufacturingProcess struct {
	GetManufacturingProcess *ManufacturingProcessFragment "json:\"getManufacturingProcess\" graphql:\"getManufacturingProcess\""
}
type GetManufacturingProcesses struct {
	QueryManufacturingProcess []*ManufacturingProcessFragment "json:\"queryManufacturingProcess\" graphql:\"queryManufacturingProcess\""
}
type SaveManufacturingProcesses struct {
	DeleteManufacturingProcess *SaveManufacturingProcesses_DeleteManufacturingProcess "json:\"deleteManufacturingProcess\" graphql:\"deleteManufacturingProcess\""
	AddManufacturingProcess    *SaveManufacturingProcesses_AddManufacturingProcess    "json:\"addManufacturingProcess\" graphql:\"addManufacturingProcess\""
}
type DeleteManufacturingProcesses struct {
	DeleteManufacturingProcess *DeleteManufacturingProcesses_DeleteManufacturingProcess "json:\"deleteManufacturingProcess\" graphql:\"deleteManufacturingProcess\""
}
type GetMaterial struct {
	GetMaterial *MaterialFragment "json:\"getMaterial\" graphql:\"getMaterial\""
}
type GetMaterials struct {
	QueryMaterial []*MaterialFragment "json:\"queryMaterial\" graphql:\"queryMaterial\""
}
type SaveMaterials struct {
	DeleteMaterial *SaveMaterials_DeleteMaterial "json:\"deleteMaterial\" graphql:\"deleteMaterial\""
	AddMaterial    *SaveMaterials_AddMaterial    "json:\"addMaterial\" graphql:\"addMaterial\""
}
type DeleteMaterials struct {
	DeleteMaterial *DeleteMaterials_DeleteMaterial "json:\"deleteMaterial\" graphql:\"deleteMaterial\""
}
type GetNode struct {
	GetNode *NodeFragment "json:\"getNode\" graphql:\"getNode\""
}
type GetNodes struct {
	QueryNode []*GetNodes_QueryNode "json:\"queryNode\" graphql:\"queryNode\""
}
type DeleteNode struct {
	DeleteNode *DeleteNode_DeleteNode "json:\"deleteNode\" graphql:\"deleteNode\""
}
type GetOpenSCADDimensions struct {
	GetOpenSCADDimensions *OpenSCADDimensionsFragment "json:\"getOpenSCADDimensions\" graphql:\"getOpenSCADDimensions\""
}
type GetOpenSCADDimensionss struct {
	QueryOpenSCADDimensions []*OpenSCADDimensionsFragment "json:\"queryOpenSCADDimensions\" graphql:\"queryOpenSCADDimensions\""
}
type SaveOpenSCADDimensionss struct {
	DeleteOpenSCADDimensions *SaveOpenSCADDimensionss_DeleteOpenSCADDimensions "json:\"deleteOpenSCADDimensions\" graphql:\"deleteOpenSCADDimensions\""
	AddOpenSCADDimensions    *SaveOpenSCADDimensionss_AddOpenSCADDimensions    "json:\"addOpenSCADDimensions\" graphql:\"addOpenSCADDimensions\""
}
type DeleteOpenSCADDimensionss struct {
	DeleteOpenSCADDimensions *DeleteOpenSCADDimensionss_DeleteOpenSCADDimensions "json:\"deleteOpenSCADDimensions\" graphql:\"deleteOpenSCADDimensions\""
}
type GetProduct struct {
	GetProduct *ProductFragment "json:\"getProduct\" graphql:\"getProduct\""
}
type GetProducts struct {
	QueryProduct []*ProductFragment "json:\"queryProduct\" graphql:\"queryProduct\""
}
type SaveProducts struct {
	AddProduct *SaveProducts_AddProduct "json:\"addProduct\" graphql:\"addProduct\""
}
type DeleteProduct struct {
	DeleteProduct *DeleteProduct_DeleteProduct "json:\"deleteProduct\" graphql:\"deleteProduct\""
}
type GetSoftware struct {
	GetSoftware *SoftwareFragment "json:\"getSoftware\" graphql:\"getSoftware\""
}
type GetSoftwares struct {
	QuerySoftware []*SoftwareFragment "json:\"querySoftware\" graphql:\"querySoftware\""
}
type SaveSoftwares struct {
	DeleteSoftware *SaveSoftwares_DeleteSoftware "json:\"deleteSoftware\" graphql:\"deleteSoftware\""
	AddSoftware    *SaveSoftwares_AddSoftware    "json:\"addSoftware\" graphql:\"addSoftware\""
}
type DeleteSoftware struct {
	DeleteSoftware *DeleteSoftware_DeleteSoftware "json:\"deleteSoftware\" graphql:\"deleteSoftware\""
}
type GetStringV struct {
	GetStringV *StringVFragment "json:\"getStringV\" graphql:\"getStringV\""
}
type GetStringVs struct {
	QueryStringV []*StringVFragment "json:\"queryStringV\" graphql:\"queryStringV\""
}
type SaveStringVs struct {
	DeleteStringV *SaveStringVs_DeleteStringV "json:\"deleteStringV\" graphql:\"deleteStringV\""
	AddStringV    *SaveStringVs_AddStringV    "json:\"addStringV\" graphql:\"addStringV\""
}
type DeleteStringVs struct {
	DeleteStringV *DeleteStringVs_DeleteStringV "json:\"deleteStringV\" graphql:\"deleteStringV\""
}
type GetTag struct {
	GetTag *TagFragment "json:\"getTag\" graphql:\"getTag\""
}
type GetTags struct {
	QueryTag []*TagFragment "json:\"queryTag\" graphql:\"queryTag\""
}
type SaveTags struct {
	AddTag *SaveTags_AddTag "json:\"addTag\" graphql:\"addTag\""
}
type DeleteTag struct {
	DeleteTag *DeleteTag_DeleteTag "json:\"deleteTag\" graphql:\"deleteTag\""
}
type GetTechnicalStandard struct {
	GetTechnicalStandard *TechnicalStandardFragment "json:\"getTechnicalStandard\" graphql:\"getTechnicalStandard\""
}
type GetTechnicalStandards struct {
	QueryTechnicalStandard []*TechnicalStandardFragment "json:\"queryTechnicalStandard\" graphql:\"queryTechnicalStandard\""
}
type SaveTechnicalStandards struct {
	AddTechnicalStandard *SaveTechnicalStandards_AddTechnicalStandard "json:\"addTechnicalStandard\" graphql:\"addTechnicalStandard\""
}
type DeleteTechnicalStandard struct {
	DeleteTechnicalStandard *DeleteTechnicalStandard_DeleteTechnicalStandard "json:\"deleteTechnicalStandard\" graphql:\"deleteTechnicalStandard\""
}
type GetTechnologySpecificDocumentationCriteria struct {
	GetTechnologySpecificDocumentationCriteria *TechnologySpecificDocumentationCriteriaFragment "json:\"getTechnologySpecificDocumentationCriteria\" graphql:\"getTechnologySpecificDocumentationCriteria\""
}
type GetTechnologySpecificDocumentationCriterias struct {
	QueryTechnologySpecificDocumentationCriteria []*TechnologySpecificDocumentationCriteriaFragment "json:\"queryTechnologySpecificDocumentationCriteria\" graphql:\"queryTechnologySpecificDocumentationCriteria\""
}
type SaveTechnologySpecificDocumentationCriterias struct {
	AddTechnologySpecificDocumentationCriteria *SaveTechnologySpecificDocumentationCriterias_AddTechnologySpecificDocumentationCriteria "json:\"addTechnologySpecificDocumentationCriteria\" graphql:\"addTechnologySpecificDocumentationCriteria\""
}
type DeleteTechnologySpecificDocumentationCriteria struct {
	DeleteTechnologySpecificDocumentationCriteria *DeleteTechnologySpecificDocumentationCriteria_DeleteTechnologySpecificDocumentationCriteria "json:\"deleteTechnologySpecificDocumentationCriteria\" graphql:\"deleteTechnologySpecificDocumentationCriteria\""
}
type GetUserOrGroup struct {
	GetUserOrGroup *GetUserOrGroup_GetUserOrGroup "json:\"getUserOrGroup\" graphql:\"getUserOrGroup\""
}
type GetUserOrGroups struct {
	QueryUserOrGroup []*GetUserOrGroups_QueryUserOrGroup "json:\"queryUserOrGroup\" graphql:\"queryUserOrGroup\""
}
type DeleteUserOrGroup struct {
	DeleteUserOrGroup *DeleteUserOrGroup_DeleteUserOrGroup "json:\"deleteUserOrGroup\" graphql:\"deleteUserOrGroup\""
}
type GetUser struct {
	GetUser *UserFragment "json:\"getUser\" graphql:\"getUser\""
}
type GetUsers struct {
	QueryUser []*UserFragment "json:\"queryUser\" graphql:\"queryUser\""
}
type SaveUsers struct {
	AddUser *SaveUsers_AddUser "json:\"addUser\" graphql:\"addUser\""
}
type DeleteUser struct {
	DeleteUser *DeleteUser_DeleteUser "json:\"deleteUser\" graphql:\"deleteUser\""
}
type GetGroup struct {
	GetGroup *GroupFragment "json:\"getGroup\" graphql:\"getGroup\""
}
type GetGroups struct {
	QueryGroup []*GroupFragment "json:\"queryGroup\" graphql:\"queryGroup\""
}
type SaveGroups struct {
	AddGroup *SaveGroups_AddGroup "json:\"addGroup\" graphql:\"addGroup\""
}
type DeleteGroup struct {
	DeleteGroup *DeleteGroup_DeleteGroup "json:\"deleteGroup\" graphql:\"deleteGroup\""
}

const GetBoundingBoxDimensionsDocument = `query GetBoundingBoxDimensions ($id: ID!) {
	getBoundingBoxDimensions(id: $id) {
		... BoundingBoxDimensionsFragment
	}
}
fragment BoundingBoxDimensionsFragment on BoundingBoxDimensions {
	id
	height
	width
	depth
}
`

func (c *Client) GetBoundingBoxDimensions(ctx context.Context, id string) (*GetBoundingBoxDimensions, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetBoundingBoxDimensions",
		Query:         GetBoundingBoxDimensionsDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetBoundingBoxDimensions
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetBoundingBoxDimensionssDocument = `query GetBoundingBoxDimensionss ($filter: BoundingBoxDimensionsFilter, $order: BoundingBoxDimensionsOrder, $first: Int, $offset: Int) {
	queryBoundingBoxDimensions(filter: $filter, order: $order, first: $first, offset: $offset) {
		... BoundingBoxDimensionsFragment
	}
}
fragment BoundingBoxDimensionsFragment on BoundingBoxDimensions {
	id
	height
	width
	depth
}
`

func (c *Client) GetBoundingBoxDimensionss(ctx context.Context, filter *models.BoundingBoxDimensionsFilter, order *models.BoundingBoxDimensionsOrder, first *int64, offset *int64) (*GetBoundingBoxDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetBoundingBoxDimensionss",
		Query:         GetBoundingBoxDimensionssDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetBoundingBoxDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveBoundingBoxDimensionssDocument = `mutation SaveBoundingBoxDimensionss ($input: [AddBoundingBoxDimensionsInput!]!, $deleteIds: [ID!]!) {
	deleteBoundingBoxDimensions(filter: {id:$deleteIds}) {
		boundingBoxDimensions {
			id
		}
	}
	addBoundingBoxDimensions(input: $input) {
		boundingBoxDimensions {
			id
		}
	}
}
`

func (c *Client) SaveBoundingBoxDimensionss(ctx context.Context, input []*models.AddBoundingBoxDimensionsInput, deleteIds []string) (*SaveBoundingBoxDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveBoundingBoxDimensionss",
		Query:         SaveBoundingBoxDimensionssDocument,
		Variables: map[string]interface{}{
			"input":     input,
			"deleteIds": deleteIds,
		},
	}

	var resp SaveBoundingBoxDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteBoundingBoxDimensionsDocument = `mutation DeleteBoundingBoxDimensions ($filter: BoundingBoxDimensionsFilter!) {
	deleteBoundingBoxDimensions(filter: $filter) {
		boundingBoxDimensions {
			id
		}
	}
}
`

func (c *Client) DeleteBoundingBoxDimensions(ctx context.Context, filter models.BoundingBoxDimensionsFilter) (*DeleteBoundingBoxDimensions, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteBoundingBoxDimensions",
		Query:         DeleteBoundingBoxDimensionsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteBoundingBoxDimensions
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetCategoryDocument = `query GetCategory ($id: ID, $xid: String) {
	getCategory(id: $id, xid: $xid) {
		... CategoryFragment
	}
}
fragment CategoryFragment on Category {
	id
	xid
	fullName
	name
	description
	parent {
		id
	}
	children {
		id
	}
	products {
		id
	}
}
`

func (c *Client) GetCategory(ctx context.Context, id *string, xid *string) (*GetCategory, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetCategory",
		Query:         GetCategoryDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetCategory
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetCategoriesDocument = `query GetCategories ($filter: CategoryFilter, $order: CategoryOrder, $first: Int, $offset: Int) {
	queryCategory(filter: $filter, order: $order, first: $first, offset: $offset) {
		... CategoryFragment
	}
}
fragment CategoryFragment on Category {
	id
	xid
	fullName
	name
	description
	parent {
		id
	}
	children {
		id
	}
	products {
		id
	}
}
`

func (c *Client) GetCategories(ctx context.Context, filter *models.CategoryFilter, order *models.CategoryOrder, first *int64, offset *int64) (*GetCategories, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetCategories",
		Query:         GetCategoriesDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetCategories
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveCategoriesDocument = `mutation SaveCategories ($input: [AddCategoryInput!]!) {
	addCategory(input: $input, upsert: true) {
		category {
			id
		}
	}
}
`

func (c *Client) SaveCategories(ctx context.Context, input []*models.AddCategoryInput) (*SaveCategories, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveCategories",
		Query:         SaveCategoriesDocument,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	var resp SaveCategories
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteCategoryDocument = `mutation DeleteCategory ($filter: CategoryFilter!) {
	deleteCategory(filter: $filter) {
		category {
			id
		}
	}
}
`

func (c *Client) DeleteCategory(ctx context.Context, filter models.CategoryFilter) (*DeleteCategory, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteCategory",
		Query:         DeleteCategoryDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteCategory
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetComponentSourceDocument = `query GetComponentSource ($id: ID, $xid: String) {
	getComponentSource(id: $id, xid: $xid) {
		... ComponentSourceFragment
	}
}
fragment ComponentSourceFragment on ComponentSource {
	... NodeFragment
	xid
	url
	permaUrl
	host {
		id
	}
	owner {
		id
	}
	name
	tag
	path
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetComponentSource(ctx context.Context, id *string, xid *string) (*GetComponentSource, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponentSource",
		Query:         GetComponentSourceDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetComponentSource
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetComponentSourcesDocument = `query GetComponentSources ($filter: ComponentSourceFilter, $order: ComponentSourceOrder, $first: Int, $offset: Int) {
	queryComponentSource(filter: $filter, order: $order, first: $first, offset: $offset) {
		... ComponentSourceFragment
	}
}
fragment ComponentSourceFragment on ComponentSource {
	... NodeFragment
	xid
	url
	permaUrl
	host {
		id
	}
	owner {
		id
	}
	name
	tag
	path
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetComponentSources(ctx context.Context, filter *models.ComponentSourceFilter, order *models.ComponentSourceOrder, first *int64, offset *int64) (*GetComponentSources, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponentSources",
		Query:         GetComponentSourcesDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetComponentSources
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveComponentSourcesDocument = `mutation SaveComponentSources ($input: [AddComponentSourceInput!]!) {
	addComponentSource(input: $input, upsert: true) {
		componentSource {
			id
		}
	}
}
`

func (c *Client) SaveComponentSources(ctx context.Context, input []*models.AddComponentSourceInput) (*SaveComponentSources, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveComponentSources",
		Query:         SaveComponentSourcesDocument,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	var resp SaveComponentSources
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteComponentSourceDocument = `mutation DeleteComponentSource ($filter: ComponentSourceFilter!) {
	deleteComponentSource(filter: $filter) {
		componentSource {
			id
		}
	}
}
`

func (c *Client) DeleteComponentSource(ctx context.Context, filter models.ComponentSourceFilter) (*DeleteComponentSource, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteComponentSource",
		Query:         DeleteComponentSourceDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteComponentSource
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetComponentDocument = `query GetComponent ($id: ID, $xid: String) {
	getComponent(id: $id, xid: $xid) {
		... ComponentFragment
	}
}
fragment ComponentFragment on Component {
	id
	xid
	name
	description
	owner {
		id
	}
	version
	createdAt
	releases {
		id
	}
	isLatest
	repository {
		id
	}
	license {
		id
	}
	additionalLicenses {
		id
	}
	licensor {
		id
	}
	documentationLanguage
	technologyReadinessLevel
	documentationReadinessLevel
	attestation
	publication
	compliesWith {
		id
	}
	cpcPatentClass
	tsdc {
		id
	}
	components {
		id
	}
	software {
		id
	}
	image {
		id
	}
	readme {
		id
	}
	contributionGuide {
		id
	}
	bom {
		id
	}
	manufacturingInstructions {
		id
	}
	userManual {
		id
	}
	product {
		id
	}
	usedIn {
		id
	}
	source {
		id
	}
	export {
		id
	}
	auxiliary {
		id
	}
	organization {
		id
	}
	mass
	outerDimensions {
		... on BoundingBoxDimensions {
			id
		}
		... on OpenSCADDimensions {
			id
		}
	}
	material {
		id
	}
	manufacturingProcess {
		id
	}
	productionMetadata {
		id
	}
}
`

func (c *Client) GetComponent(ctx context.Context, id *string, xid *string) (*GetComponent, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponent",
		Query:         GetComponentDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetComponent
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetComponentsDocument = `query GetComponents ($filter: ComponentFilter, $order: ComponentOrder, $first: Int, $offset: Int) {
	queryComponent(filter: $filter, order: $order, first: $first, offset: $offset) {
		... ComponentFragment
	}
}
fragment ComponentFragment on Component {
	id
	xid
	name
	description
	owner {
		id
	}
	version
	createdAt
	releases {
		id
	}
	isLatest
	repository {
		id
	}
	license {
		id
	}
	additionalLicenses {
		id
	}
	licensor {
		id
	}
	documentationLanguage
	technologyReadinessLevel
	documentationReadinessLevel
	attestation
	publication
	compliesWith {
		id
	}
	cpcPatentClass
	tsdc {
		id
	}
	components {
		id
	}
	software {
		id
	}
	image {
		id
	}
	readme {
		id
	}
	contributionGuide {
		id
	}
	bom {
		id
	}
	manufacturingInstructions {
		id
	}
	userManual {
		id
	}
	product {
		id
	}
	usedIn {
		id
	}
	source {
		id
	}
	export {
		id
	}
	auxiliary {
		id
	}
	organization {
		id
	}
	mass
	outerDimensions {
		... on BoundingBoxDimensions {
			id
		}
		... on OpenSCADDimensions {
			id
		}
	}
	material {
		id
	}
	manufacturingProcess {
		id
	}
	productionMetadata {
		id
	}
}
`

func (c *Client) GetComponents(ctx context.Context, filter *models.ComponentFilter, order *models.ComponentOrder, first *int64, offset *int64) (*GetComponents, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponents",
		Query:         GetComponentsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetComponents
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveComponentsDocument = `mutation SaveComponents ($input: [AddComponentInput!]!) {
	addComponent(input: $input, upsert: true) {
		component {
			id
		}
	}
}
`

func (c *Client) SaveComponents(ctx context.Context, input []*models.AddComponentInput) (*SaveComponents, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveComponents",
		Query:         SaveComponentsDocument,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	var resp SaveComponents
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteComponentDocument = `mutation DeleteComponent ($filter: ComponentFilter!) {
	deleteComponent(filter: $filter) {
		component {
			id
		}
	}
}
`

func (c *Client) DeleteComponent(ctx context.Context, filter models.ComponentFilter) (*DeleteComponent, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteComponent",
		Query:         DeleteComponentDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteComponent
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetDatabaseInfoDocument = `query GetDatabaseInfo {
	queryDatabase(first: 1) {
		... DatabaseFragment
	}
}
fragment DatabaseFragment on Database {
	id
	version
}
`

func (c *Client) GetDatabaseInfo(ctx context.Context) (*GetDatabaseInfo, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetDatabaseInfo",
		Query:         GetDatabaseInfoDocument,
		Variables:     map[string]interface{}{},
	}

	var resp GetDatabaseInfo
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveDatabaseInfoDocument = `mutation SaveDatabaseInfo ($dbInfo: [AddDatabaseInput!]!) {
	deleteDatabase(filter: {}) {
		database {
			id
		}
	}
	addDatabase(input: $dbInfo) {
		database {
			id
		}
	}
}
`

func (c *Client) SaveDatabaseInfo(ctx context.Context, dbInfo []*models.AddDatabaseInput) (*SaveDatabaseInfo, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveDatabaseInfo",
		Query:         SaveDatabaseInfoDocument,
		Variables: map[string]interface{}{
			"dbInfo": dbInfo,
		},
	}

	var resp SaveDatabaseInfo
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetFileDocument = `query GetFile ($id: ID!) {
	getFile(id: $id) {
		... FileFragment
	}
}
fragment FileFragment on File {
	... NodeFragment
	... CrawlerMetaFragment
	name
	path
	mimeType
	url
	createdAt
}
fragment NodeFragment on Node {
	id
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
`

func (c *Client) GetFile(ctx context.Context, id string) (*GetFile, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFile",
		Query:         GetFileDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetFile
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetFilesDocument = `query GetFiles ($filter: FileFilter, $order: FileOrder, $first: Int, $offset: Int) {
	queryFile(filter: $filter, order: $order, first: $first, offset: $offset) {
		... FileFragment
	}
}
fragment FileFragment on File {
	... NodeFragment
	... CrawlerMetaFragment
	name
	path
	mimeType
	url
	createdAt
}
fragment NodeFragment on Node {
	id
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
`

func (c *Client) GetFiles(ctx context.Context, filter *models.FileFilter, order *models.FileOrder, first *int64, offset *int64) (*GetFiles, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFiles",
		Query:         GetFilesDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetFiles
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveFilesDocument = `mutation SaveFiles ($input: [AddFileInput!]!, $deleteIds: [ID!]!) {
	deleteFile(filter: {id:$deleteIds}) {
		file {
			id
		}
	}
	addFile(input: $input) {
		file {
			id
		}
	}
}
`

func (c *Client) SaveFiles(ctx context.Context, input []*models.AddFileInput, deleteIds []string) (*SaveFiles, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveFiles",
		Query:         SaveFilesDocument,
		Variables: map[string]interface{}{
			"input":     input,
			"deleteIds": deleteIds,
		},
	}

	var resp SaveFiles
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteFileDocument = `mutation DeleteFile ($filter: FileFilter!) {
	deleteFile(filter: $filter) {
		file {
			id
		}
	}
}
`

func (c *Client) DeleteFile(ctx context.Context, filter models.FileFilter) (*DeleteFile, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteFile",
		Query:         DeleteFileDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteFile
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetFloatVDocument = `query GetFloatV ($id: ID!) {
	getFloatV(id: $id) {
		... FloatVFragment
	}
}
fragment FloatVFragment on FloatV {
	... NodeFragment
	value
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetFloatV(ctx context.Context, id string) (*GetFloatV, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFloatV",
		Query:         GetFloatVDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetFloatV
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetFloatVsDocument = `query GetFloatVs ($filter: FloatVFilter, $order: FloatVOrder, $first: Int, $offset: Int) {
	queryFloatV(filter: $filter, order: $order, first: $first, offset: $offset) {
		... FloatVFragment
	}
}
fragment NodeFragment on Node {
	id
}
fragment FloatVFragment on FloatV {
	... NodeFragment
	value
}
`

func (c *Client) GetFloatVs(ctx context.Context, filter *models.FloatVFilter, order *models.FloatVOrder, first *int64, offset *int64) (*GetFloatVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFloatVs",
		Query:         GetFloatVsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetFloatVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveFloatVsDocument = `mutation SaveFloatVs ($input: [AddFloatVInput!]!, $deleteIds: [ID!]!) {
	deleteFloatV(filter: {id:$deleteIds}) {
		floatV {
			id
		}
	}
	addFloatV(input: $input) {
		floatV {
			id
		}
	}
}
`

func (c *Client) SaveFloatVs(ctx context.Context, input []*models.AddFloatVInput, deleteIds []string) (*SaveFloatVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveFloatVs",
		Query:         SaveFloatVsDocument,
		Variables: map[string]interface{}{
			"input":     input,
			"deleteIds": deleteIds,
		},
	}

	var resp SaveFloatVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteFloatVsDocument = `mutation DeleteFloatVs ($filter: FloatVFilter!) {
	deleteFloatV(filter: $filter) {
		floatV {
			id
		}
	}
}
`

func (c *Client) DeleteFloatVs(ctx context.Context, filter models.FloatVFilter) (*DeleteFloatVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteFloatVs",
		Query:         DeleteFloatVsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteFloatVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetHostDocument = `query GetHost ($id: ID, $domain: String) {
	getHost(id: $id, domain: $domain) {
		... HostFragment
	}
}
fragment HostFragment on Host {
	... NodeFragment
	domain
	name
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetHost(ctx context.Context, id *string, domain *string) (*GetHost, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetHost",
		Query:         GetHostDocument,
		Variables: map[string]interface{}{
			"id":     id,
			"domain": domain,
		},
	}

	var resp GetHost
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetHostsDocument = `query GetHosts ($filter: HostFilter, $order: HostOrder, $first: Int, $offset: Int) {
	queryHost(filter: $filter, order: $order, first: $first, offset: $offset) {
		... HostFragment
	}
}
fragment HostFragment on Host {
	... NodeFragment
	domain
	name
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetHosts(ctx context.Context, filter *models.HostFilter, order *models.HostOrder, first *int64, offset *int64) (*GetHosts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetHosts",
		Query:         GetHostsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetHosts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveHostsDocument = `mutation SaveHosts ($hosts: [AddHostInput!]!) {
	addHost(input: $hosts, upsert: true) {
		host {
			id
		}
	}
}
`

func (c *Client) SaveHosts(ctx context.Context, hosts []*models.AddHostInput) (*SaveHosts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveHosts",
		Query:         SaveHostsDocument,
		Variables: map[string]interface{}{
			"hosts": hosts,
		},
	}

	var resp SaveHosts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteHostDocument = `mutation DeleteHost ($filter: HostFilter!) {
	deleteHost(filter: $filter) {
		host {
			id
		}
	}
}
`

func (c *Client) DeleteHost(ctx context.Context, filter models.HostFilter) (*DeleteHost, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteHost",
		Query:         DeleteHostDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteHost
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetKeyValueDocument = `query GetKeyValue ($id: ID!) {
	getKeyValue(id: $id) {
		... KeyValueFragment
	}
}
fragment KeyValueFragment on KeyValue {
	... NodeFragment
	key
	value {
		... on StringV {
			id
			stringValue: value
		}
		... on FloatV {
			id
			floatValue: value
		}
	}
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetKeyValue(ctx context.Context, id string) (*GetKeyValue, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetKeyValue",
		Query:         GetKeyValueDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetKeyValue
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetKeyValuesDocument = `query GetKeyValues ($filter: KeyValueFilter, $order: KeyValueOrder, $first: Int, $offset: Int) {
	queryKeyValue(filter: $filter, order: $order, first: $first, offset: $offset) {
		... KeyValueFragment
	}
}
fragment KeyValueFragment on KeyValue {
	... NodeFragment
	key
	value {
		... on StringV {
			id
			stringValue: value
		}
		... on FloatV {
			id
			floatValue: value
		}
	}
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetKeyValues(ctx context.Context, filter *models.KeyValueFilter, order *models.KeyValueOrder, first *int64, offset *int64) (*GetKeyValues, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetKeyValues",
		Query:         GetKeyValuesDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetKeyValues
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveKeyValuesDocument = `mutation SaveKeyValues ($keyValues: [AddKeyValueInput!]!) {
	addKeyValue(input: $keyValues) {
		keyValue {
			id
		}
	}
}
`

func (c *Client) SaveKeyValues(ctx context.Context, keyValues []*models.AddKeyValueInput) (*SaveKeyValues, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveKeyValues",
		Query:         SaveKeyValuesDocument,
		Variables: map[string]interface{}{
			"keyValues": keyValues,
		},
	}

	var resp SaveKeyValues
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteKeyValueDocument = `mutation DeleteKeyValue ($filter: KeyValueFilter!) {
	deleteKeyValue(filter: $filter) {
		keyValue {
			id
		}
	}
}
`

func (c *Client) DeleteKeyValue(ctx context.Context, filter models.KeyValueFilter) (*DeleteKeyValue, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteKeyValue",
		Query:         DeleteKeyValueDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteKeyValue
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetLicenseDocument = `query GetLicense ($id: ID, $xid: String) {
	getLicense(id: $id, xid: $xid) {
		... LicenseFragment
	}
}
fragment LicenseFragment on License {
	id
	xid
	name
	text
	referenceURL
	detailsURL
	type
	isSpdx
	isDeprecated
	isOsiApproved
	isFsfLibre
	isBlocked
}
`

func (c *Client) GetLicense(ctx context.Context, id *string, xid *string) (*GetLicense, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetLicense",
		Query:         GetLicenseDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetLicense
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetLicensesDocument = `query GetLicenses ($filter: LicenseFilter, $order: LicenseOrder, $first: Int, $offset: Int) {
	queryLicense(filter: $filter, order: $order, first: $first, offset: $offset) {
		... LicenseFragment
	}
}
fragment LicenseFragment on License {
	id
	xid
	name
	text
	referenceURL
	detailsURL
	type
	isSpdx
	isDeprecated
	isOsiApproved
	isFsfLibre
	isBlocked
}
`

func (c *Client) GetLicenses(ctx context.Context, filter *models.LicenseFilter, order *models.LicenseOrder, first *int64, offset *int64) (*GetLicenses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetLicenses",
		Query:         GetLicensesDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetLicenses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveLicensesDocument = `mutation SaveLicenses ($licenses: [AddLicenseInput!]!) {
	addLicense(input: $licenses, upsert: true) {
		license {
			id
		}
	}
}
`

func (c *Client) SaveLicenses(ctx context.Context, licenses []*models.AddLicenseInput) (*SaveLicenses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveLicenses",
		Query:         SaveLicensesDocument,
		Variables: map[string]interface{}{
			"licenses": licenses,
		},
	}

	var resp SaveLicenses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteLicenseDocument = `mutation DeleteLicense ($filter: LicenseFilter!) {
	deleteLicense(filter: $filter) {
		license {
			id
		}
	}
}
`

func (c *Client) DeleteLicense(ctx context.Context, filter models.LicenseFilter) (*DeleteLicense, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteLicense",
		Query:         DeleteLicenseDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteLicense
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetManufacturingProcessDocument = `query GetManufacturingProcess ($id: ID!) {
	getManufacturingProcess(id: $id) {
		... ManufacturingProcessFragment
	}
}
fragment ManufacturingProcessFragment on ManufacturingProcess {
	... NodeFragment
	name
	description
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetManufacturingProcess(ctx context.Context, id string) (*GetManufacturingProcess, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetManufacturingProcess",
		Query:         GetManufacturingProcessDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetManufacturingProcess
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetManufacturingProcessesDocument = `query GetManufacturingProcesses ($filter: ManufacturingProcessFilter, $order: ManufacturingProcessOrder, $first: Int, $offset: Int) {
	queryManufacturingProcess(filter: $filter, order: $order, first: $first, offset: $offset) {
		... ManufacturingProcessFragment
	}
}
fragment ManufacturingProcessFragment on ManufacturingProcess {
	... NodeFragment
	name
	description
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetManufacturingProcesses(ctx context.Context, filter *models.ManufacturingProcessFilter, order *models.ManufacturingProcessOrder, first *int64, offset *int64) (*GetManufacturingProcesses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetManufacturingProcesses",
		Query:         GetManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetManufacturingProcesses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveManufacturingProcessesDocument = `mutation SaveManufacturingProcesses ($input: [AddManufacturingProcessInput!]!, $deleteIds: [ID!]!) {
	deleteManufacturingProcess(filter: {id:$deleteIds}) {
		manufacturingProcess {
			id
		}
	}
	addManufacturingProcess(input: $input) {
		manufacturingProcess {
			id
		}
	}
}
`

func (c *Client) SaveManufacturingProcesses(ctx context.Context, input []*models.AddManufacturingProcessInput, deleteIds []string) (*SaveManufacturingProcesses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveManufacturingProcesses",
		Query:         SaveManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"input":     input,
			"deleteIds": deleteIds,
		},
	}

	var resp SaveManufacturingProcesses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteManufacturingProcessesDocument = `mutation DeleteManufacturingProcesses ($filter: ManufacturingProcessFilter!) {
	deleteManufacturingProcess(filter: $filter) {
		manufacturingProcess {
			id
		}
	}
}
`

func (c *Client) DeleteManufacturingProcesses(ctx context.Context, filter models.ManufacturingProcessFilter) (*DeleteManufacturingProcesses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteManufacturingProcesses",
		Query:         DeleteManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteManufacturingProcesses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetMaterialDocument = `query GetMaterial ($id: ID!) {
	getMaterial(id: $id) {
		... MaterialFragment
	}
}
fragment MaterialFragment on Material {
	... NodeFragment
	name
	description
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetMaterial(ctx context.Context, id string) (*GetMaterial, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetMaterial",
		Query:         GetMaterialDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetMaterial
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetMaterialsDocument = `query GetMaterials ($filter: MaterialFilter, $order: MaterialOrder, $first: Int, $offset: Int) {
	queryMaterial(filter: $filter, order: $order, first: $first, offset: $offset) {
		... MaterialFragment
	}
}
fragment MaterialFragment on Material {
	... NodeFragment
	name
	description
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetMaterials(ctx context.Context, filter *models.MaterialFilter, order *models.MaterialOrder, first *int64, offset *int64) (*GetMaterials, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetMaterials",
		Query:         GetMaterialsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetMaterials
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveMaterialsDocument = `mutation SaveMaterials ($input: [AddMaterialInput!]!, $deleteIds: [ID!]!) {
	deleteMaterial(filter: {id:$deleteIds}) {
		material {
			id
		}
	}
	addMaterial(input: $input) {
		material {
			id
		}
	}
}
`

func (c *Client) SaveMaterials(ctx context.Context, input []*models.AddMaterialInput, deleteIds []string) (*SaveMaterials, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveMaterials",
		Query:         SaveMaterialsDocument,
		Variables: map[string]interface{}{
			"input":     input,
			"deleteIds": deleteIds,
		},
	}

	var resp SaveMaterials
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteMaterialsDocument = `mutation DeleteMaterials ($filter: MaterialFilter!) {
	deleteMaterial(filter: $filter) {
		material {
			id
		}
	}
}
`

func (c *Client) DeleteMaterials(ctx context.Context, filter models.MaterialFilter) (*DeleteMaterials, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteMaterials",
		Query:         DeleteMaterialsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteMaterials
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetNodeDocument = `query GetNode ($id: ID!) {
	getNode(id: $id) {
		... NodeFragment
	}
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetNode(ctx context.Context, id string) (*GetNode, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetNode",
		Query:         GetNodeDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetNode
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetNodesDocument = `query GetNodes ($filter: NodeFilter, $first: Int, $offset: Int) {
	queryNode(filter: $filter, first: $first, offset: $offset) {
		id
	}
}
`

func (c *Client) GetNodes(ctx context.Context, filter *models.NodeFilter, first *int64, offset *int64) (*GetNodes, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetNodes",
		Query:         GetNodesDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetNodes
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteNodeDocument = `mutation DeleteNode ($filter: NodeFilter!) {
	deleteNode(filter: $filter) {
		node {
			id
		}
	}
}
`

func (c *Client) DeleteNode(ctx context.Context, filter models.NodeFilter) (*DeleteNode, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteNode",
		Query:         DeleteNodeDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteNode
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetOpenSCADDimensionsDocument = `query GetOpenSCADDimensions ($id: ID!) {
	getOpenSCADDimensions(id: $id) {
		... OpenSCADDimensionsFragment
	}
}
fragment NodeFragment on Node {
	id
}
fragment OpenSCADDimensionsFragment on OpenSCADDimensions {
	... NodeFragment
	openscad
	unit
}
`

func (c *Client) GetOpenSCADDimensions(ctx context.Context, id string) (*GetOpenSCADDimensions, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetOpenSCADDimensions",
		Query:         GetOpenSCADDimensionsDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetOpenSCADDimensions
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetOpenSCADDimensionssDocument = `query GetOpenSCADDimensionss ($filter: OpenSCADDimensionsFilter, $order: OpenSCADDimensionsOrder, $first: Int, $offset: Int) {
	queryOpenSCADDimensions(filter: $filter, order: $order, first: $first, offset: $offset) {
		... OpenSCADDimensionsFragment
	}
}
fragment OpenSCADDimensionsFragment on OpenSCADDimensions {
	... NodeFragment
	openscad
	unit
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetOpenSCADDimensionss(ctx context.Context, filter *models.OpenSCADDimensionsFilter, order *models.OpenSCADDimensionsOrder, first *int64, offset *int64) (*GetOpenSCADDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetOpenSCADDimensionss",
		Query:         GetOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetOpenSCADDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveOpenSCADDimensionssDocument = `mutation SaveOpenSCADDimensionss ($input: [AddOpenSCADDimensionsInput!]!, $deleteIds: [ID!]!) {
	deleteOpenSCADDimensions(filter: {id:$deleteIds}) {
		openSCADDimensions {
			id
		}
	}
	addOpenSCADDimensions(input: $input) {
		openSCADDimensions {
			id
		}
	}
}
`

func (c *Client) SaveOpenSCADDimensionss(ctx context.Context, input []*models.AddOpenSCADDimensionsInput, deleteIds []string) (*SaveOpenSCADDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveOpenSCADDimensionss",
		Query:         SaveOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"input":     input,
			"deleteIds": deleteIds,
		},
	}

	var resp SaveOpenSCADDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteOpenSCADDimensionssDocument = `mutation DeleteOpenSCADDimensionss ($filter: OpenSCADDimensionsFilter!) {
	deleteOpenSCADDimensions(filter: $filter) {
		openSCADDimensions {
			id
		}
	}
}
`

func (c *Client) DeleteOpenSCADDimensionss(ctx context.Context, filter models.OpenSCADDimensionsFilter) (*DeleteOpenSCADDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteOpenSCADDimensionss",
		Query:         DeleteOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteOpenSCADDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetProductDocument = `query GetProduct ($id: ID, $xid: String) {
	getProduct(id: $id, xid: $xid) {
		... ProductFragment
	}
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
fragment ProductFragment on Product {
	... NodeFragment
	... CrawlerMetaFragment
	xid
	name
	owner {
		id
	}
	description
	website
	version
	release {
		id
	}
	releases {
		id
	}
	renamedTo {
		id
	}
	renamedFrom {
		id
	}
	forkOf {
		id
	}
	forks {
		id
	}
	tags {
		id
	}
	category {
		id
	}
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetProduct(ctx context.Context, id *string, xid *string) (*GetProduct, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProduct",
		Query:         GetProductDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetProduct
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetProductsDocument = `query GetProducts ($filter: ProductFilter, $order: ProductOrder, $first: Int, $offset: Int) {
	queryProduct(filter: $filter, order: $order, first: $first, offset: $offset) {
		... ProductFragment
	}
}
fragment ProductFragment on Product {
	... NodeFragment
	... CrawlerMetaFragment
	xid
	name
	owner {
		id
	}
	description
	website
	version
	release {
		id
	}
	releases {
		id
	}
	renamedTo {
		id
	}
	renamedFrom {
		id
	}
	forkOf {
		id
	}
	forks {
		id
	}
	tags {
		id
	}
	category {
		id
	}
}
fragment NodeFragment on Node {
	id
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
`

func (c *Client) GetProducts(ctx context.Context, filter *models.ProductFilter, order *models.ProductOrder, first *int64, offset *int64) (*GetProducts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProducts",
		Query:         GetProductsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetProducts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveProductsDocument = `mutation SaveProducts ($products: [AddProductInput!]!) {
	addProduct(input: $products, upsert: true) {
		product {
			id
		}
	}
}
`

func (c *Client) SaveProducts(ctx context.Context, products []*models.AddProductInput) (*SaveProducts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveProducts",
		Query:         SaveProductsDocument,
		Variables: map[string]interface{}{
			"products": products,
		},
	}

	var resp SaveProducts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteProductDocument = `mutation DeleteProduct ($filter: ProductFilter!) {
	deleteProduct(filter: $filter) {
		product {
			id
		}
	}
}
`

func (c *Client) DeleteProduct(ctx context.Context, filter models.ProductFilter) (*DeleteProduct, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteProduct",
		Query:         DeleteProductDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteProduct
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetSoftwareDocument = `query GetSoftware ($id: ID!) {
	getSoftware(id: $id) {
		... SoftwareFragment
	}
}
fragment SoftwareFragment on Software {
	... NodeFragment
	... CrawlerMetaFragment
	release
	installationGuide {
		id
	}
	documentationLanguage
	license {
		id
	}
	licensor
}
fragment NodeFragment on Node {
	id
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
`

func (c *Client) GetSoftware(ctx context.Context, id string) (*GetSoftware, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetSoftware",
		Query:         GetSoftwareDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetSoftware
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetSoftwaresDocument = `query GetSoftwares ($filter: SoftwareFilter, $order: SoftwareOrder, $first: Int, $offset: Int) {
	querySoftware(filter: $filter, order: $order, first: $first, offset: $offset) {
		... SoftwareFragment
	}
}
fragment NodeFragment on Node {
	id
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
fragment SoftwareFragment on Software {
	... NodeFragment
	... CrawlerMetaFragment
	release
	installationGuide {
		id
	}
	documentationLanguage
	license {
		id
	}
	licensor
}
`

func (c *Client) GetSoftwares(ctx context.Context, filter *models.SoftwareFilter, order *models.SoftwareOrder, first *int64, offset *int64) (*GetSoftwares, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetSoftwares",
		Query:         GetSoftwaresDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetSoftwares
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveSoftwaresDocument = `mutation SaveSoftwares ($input: [AddSoftwareInput!]!, $deleteIds: [ID!]!) {
	deleteSoftware(filter: {id:$deleteIds}) {
		software {
			id
		}
	}
	addSoftware(input: $input) {
		software {
			id
		}
	}
}
`

func (c *Client) SaveSoftwares(ctx context.Context, input []*models.AddSoftwareInput, deleteIds []string) (*SaveSoftwares, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveSoftwares",
		Query:         SaveSoftwaresDocument,
		Variables: map[string]interface{}{
			"input":     input,
			"deleteIds": deleteIds,
		},
	}

	var resp SaveSoftwares
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteSoftwareDocument = `mutation DeleteSoftware ($filter: SoftwareFilter!) {
	deleteSoftware(filter: $filter) {
		software {
			id
		}
	}
}
`

func (c *Client) DeleteSoftware(ctx context.Context, filter models.SoftwareFilter) (*DeleteSoftware, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteSoftware",
		Query:         DeleteSoftwareDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteSoftware
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetStringVDocument = `query GetStringV ($id: ID!) {
	getStringV(id: $id) {
		... StringVFragment
	}
}
fragment StringVFragment on StringV {
	... NodeFragment
	value
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetStringV(ctx context.Context, id string) (*GetStringV, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetStringV",
		Query:         GetStringVDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetStringV
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetStringVsDocument = `query GetStringVs ($filter: StringVFilter, $order: StringVOrder, $first: Int, $offset: Int) {
	queryStringV(filter: $filter, order: $order, first: $first, offset: $offset) {
		... StringVFragment
	}
}
fragment StringVFragment on StringV {
	... NodeFragment
	value
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetStringVs(ctx context.Context, filter *models.StringVFilter, order *models.StringVOrder, first *int64, offset *int64) (*GetStringVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetStringVs",
		Query:         GetStringVsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetStringVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveStringVsDocument = `mutation SaveStringVs ($input: [AddStringVInput!]!, $deleteIds: [ID!]!) {
	deleteStringV(filter: {id:$deleteIds}) {
		stringV {
			id
		}
	}
	addStringV(input: $input) {
		stringV {
			id
		}
	}
}
`

func (c *Client) SaveStringVs(ctx context.Context, input []*models.AddStringVInput, deleteIds []string) (*SaveStringVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveStringVs",
		Query:         SaveStringVsDocument,
		Variables: map[string]interface{}{
			"input":     input,
			"deleteIds": deleteIds,
		},
	}

	var resp SaveStringVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteStringVsDocument = `mutation DeleteStringVs ($filter: StringVFilter!) {
	deleteStringV(filter: $filter) {
		stringV {
			id
		}
	}
}
`

func (c *Client) DeleteStringVs(ctx context.Context, filter models.StringVFilter) (*DeleteStringVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteStringVs",
		Query:         DeleteStringVsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteStringVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetTagDocument = `query GetTag ($id: ID, $xid: String) {
	getTag(id: $id, xid: $xid) {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	xid
	name
	aliases {
		id
	}
	related {
		id
	}
}
`

func (c *Client) GetTag(ctx context.Context, id *string, xid *string) (*GetTag, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTag",
		Query:         GetTagDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetTag
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetTagsDocument = `query GetTags ($filter: TagFilter, $order: TagOrder, $first: Int, $offset: Int) {
	queryTag(filter: $filter, order: $order, first: $first, offset: $offset) {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	xid
	name
	aliases {
		id
	}
	related {
		id
	}
}
`

func (c *Client) GetTags(ctx context.Context, filter *models.TagFilter, order *models.TagOrder, first *int64, offset *int64) (*GetTags, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTags",
		Query:         GetTagsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetTags
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveTagsDocument = `mutation SaveTags ($input: [AddTagInput!]!) {
	addTag(input: $input, upsert: true) {
		tag {
			id
		}
	}
}
`

func (c *Client) SaveTags(ctx context.Context, input []*models.AddTagInput) (*SaveTags, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveTags",
		Query:         SaveTagsDocument,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	var resp SaveTags
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteTagDocument = `mutation DeleteTag ($filter: TagFilter!) {
	deleteTag(filter: $filter) {
		tag {
			id
		}
	}
}
`

func (c *Client) DeleteTag(ctx context.Context, filter models.TagFilter) (*DeleteTag, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteTag",
		Query:         DeleteTagDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteTag
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetTechnicalStandardDocument = `query GetTechnicalStandard ($id: ID, $xid: String) {
	getTechnicalStandard(id: $id, xid: $xid) {
		... TechnicalStandardFragment
	}
}
fragment TechnicalStandardFragment on TechnicalStandard {
	... NodeFragment
	xid
	name
	description
	components {
		id
	}
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetTechnicalStandard(ctx context.Context, id *string, xid *string) (*GetTechnicalStandard, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnicalStandard",
		Query:         GetTechnicalStandardDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetTechnicalStandard
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetTechnicalStandardsDocument = `query GetTechnicalStandards ($filter: TechnicalStandardFilter, $order: TechnicalStandardOrder, $first: Int, $offset: Int) {
	queryTechnicalStandard(filter: $filter, order: $order, first: $first, offset: $offset) {
		... TechnicalStandardFragment
	}
}
fragment TechnicalStandardFragment on TechnicalStandard {
	... NodeFragment
	xid
	name
	description
	components {
		id
	}
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetTechnicalStandards(ctx context.Context, filter *models.TechnicalStandardFilter, order *models.TechnicalStandardOrder, first *int64, offset *int64) (*GetTechnicalStandards, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnicalStandards",
		Query:         GetTechnicalStandardsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetTechnicalStandards
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveTechnicalStandardsDocument = `mutation SaveTechnicalStandards ($input: [AddTechnicalStandardInput!]!) {
	addTechnicalStandard(input: $input, upsert: true) {
		technicalStandard {
			id
		}
	}
}
`

func (c *Client) SaveTechnicalStandards(ctx context.Context, input []*models.AddTechnicalStandardInput) (*SaveTechnicalStandards, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveTechnicalStandards",
		Query:         SaveTechnicalStandardsDocument,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	var resp SaveTechnicalStandards
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteTechnicalStandardDocument = `mutation DeleteTechnicalStandard ($filter: TechnicalStandardFilter!) {
	deleteTechnicalStandard(filter: $filter) {
		technicalStandard {
			id
		}
	}
}
`

func (c *Client) DeleteTechnicalStandard(ctx context.Context, filter models.TechnicalStandardFilter) (*DeleteTechnicalStandard, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteTechnicalStandard",
		Query:         DeleteTechnicalStandardDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteTechnicalStandard
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetTechnologySpecificDocumentationCriteriaDocument = `query GetTechnologySpecificDocumentationCriteria ($id: ID, $xid: String) {
	getTechnologySpecificDocumentationCriteria(id: $id, xid: $xid) {
		... TechnologySpecificDocumentationCriteriaFragment
	}
}
fragment TechnologySpecificDocumentationCriteriaFragment on TechnologySpecificDocumentationCriteria {
	... NodeFragment
	xid
	name
	comment
	requirementsUri
	components {
		id
	}
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetTechnologySpecificDocumentationCriteria(ctx context.Context, id *string, xid *string) (*GetTechnologySpecificDocumentationCriteria, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnologySpecificDocumentationCriteria",
		Query:         GetTechnologySpecificDocumentationCriteriaDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetTechnologySpecificDocumentationCriteria
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetTechnologySpecificDocumentationCriteriasDocument = `query GetTechnologySpecificDocumentationCriterias ($filter: TechnologySpecificDocumentationCriteriaFilter, $order: TechnologySpecificDocumentationCriteriaOrder, $first: Int, $offset: Int) {
	queryTechnologySpecificDocumentationCriteria(filter: $filter, order: $order, first: $first, offset: $offset) {
		... TechnologySpecificDocumentationCriteriaFragment
	}
}
fragment TechnologySpecificDocumentationCriteriaFragment on TechnologySpecificDocumentationCriteria {
	... NodeFragment
	xid
	name
	comment
	requirementsUri
	components {
		id
	}
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetTechnologySpecificDocumentationCriterias(ctx context.Context, filter *models.TechnologySpecificDocumentationCriteriaFilter, order *models.TechnologySpecificDocumentationCriteriaOrder, first *int64, offset *int64) (*GetTechnologySpecificDocumentationCriterias, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnologySpecificDocumentationCriterias",
		Query:         GetTechnologySpecificDocumentationCriteriasDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetTechnologySpecificDocumentationCriterias
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveTechnologySpecificDocumentationCriteriasDocument = `mutation SaveTechnologySpecificDocumentationCriterias ($input: [AddTechnologySpecificDocumentationCriteriaInput!]!) {
	addTechnologySpecificDocumentationCriteria(input: $input, upsert: true) {
		technologySpecificDocumentationCriteria {
			id
		}
	}
}
`

func (c *Client) SaveTechnologySpecificDocumentationCriterias(ctx context.Context, input []*models.AddTechnologySpecificDocumentationCriteriaInput) (*SaveTechnologySpecificDocumentationCriterias, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveTechnologySpecificDocumentationCriterias",
		Query:         SaveTechnologySpecificDocumentationCriteriasDocument,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	var resp SaveTechnologySpecificDocumentationCriterias
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteTechnologySpecificDocumentationCriteriaDocument = `mutation DeleteTechnologySpecificDocumentationCriteria ($filter: TechnologySpecificDocumentationCriteriaFilter!) {
	deleteTechnologySpecificDocumentationCriteria(filter: $filter) {
		technologySpecificDocumentationCriteria {
			id
		}
	}
}
`

func (c *Client) DeleteTechnologySpecificDocumentationCriteria(ctx context.Context, filter models.TechnologySpecificDocumentationCriteriaFilter) (*DeleteTechnologySpecificDocumentationCriteria, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteTechnologySpecificDocumentationCriteria",
		Query:         DeleteTechnologySpecificDocumentationCriteriaDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteTechnologySpecificDocumentationCriteria
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetUserOrGroupDocument = `query GetUserOrGroup ($id: ID, $xid: String) {
	getUserOrGroup(id: $id, xid: $xid) {
		... on User {
			... UserFragment
		}
		... on Group {
			... GroupFragment
		}
	}
}
fragment GroupFragment on Group {
	... NodeFragment
	... UserOrGroupFragment
	members {
		... on User {
			id
		}
		... on Group {
			id
		}
	}
}
fragment UserFragment on User {
	... NodeFragment
	... UserOrGroupFragment
	fullName
	locale
}
fragment NodeFragment on Node {
	id
}
fragment UserOrGroupFragment on UserOrGroup {
	... on User {
		id
	}
	... on Group {
		id
	}
	xid
	host {
		id
	}
	name
	email
	avatar {
		id
	}
	url
	memberOf {
		id
	}
	products {
		id
	}
}
`

func (c *Client) GetUserOrGroup(ctx context.Context, id *string, xid *string) (*GetUserOrGroup, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserOrGroup",
		Query:         GetUserOrGroupDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetUserOrGroup
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetUserOrGroupsDocument = `query GetUserOrGroups ($filter: UserOrGroupFilter, $order: UserOrGroupOrder, $first: Int, $offset: Int) {
	queryUserOrGroup(filter: $filter, order: $order, first: $first, offset: $offset) {
		... on User {
			... UserFragment
		}
		... on Group {
			... GroupFragment
		}
	}
}
fragment GroupFragment on Group {
	... NodeFragment
	... UserOrGroupFragment
	members {
		... on User {
			id
		}
		... on Group {
			id
		}
	}
}
fragment UserFragment on User {
	... NodeFragment
	... UserOrGroupFragment
	fullName
	locale
}
fragment NodeFragment on Node {
	id
}
fragment UserOrGroupFragment on UserOrGroup {
	... on User {
		id
	}
	... on Group {
		id
	}
	xid
	host {
		id
	}
	name
	email
	avatar {
		id
	}
	url
	memberOf {
		id
	}
	products {
		id
	}
}
`

func (c *Client) GetUserOrGroups(ctx context.Context, filter *models.UserOrGroupFilter, order *models.UserOrGroupOrder, first *int64, offset *int64) (*GetUserOrGroups, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserOrGroups",
		Query:         GetUserOrGroupsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetUserOrGroups
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteUserOrGroupDocument = `mutation DeleteUserOrGroup ($filter: UserOrGroupFilter!) {
	deleteUserOrGroup(filter: $filter) {
		userOrGroup {
			id
		}
	}
}
`

func (c *Client) DeleteUserOrGroup(ctx context.Context, filter models.UserOrGroupFilter) (*DeleteUserOrGroup, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteUserOrGroup",
		Query:         DeleteUserOrGroupDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteUserOrGroup
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetUserDocument = `query GetUser ($id: ID, $xid: String) {
	getUser(id: $id, xid: $xid) {
		... UserFragment
	}
}
fragment UserOrGroupFragment on UserOrGroup {
	... on User {
		id
	}
	... on Group {
		id
	}
	xid
	host {
		id
	}
	name
	email
	avatar {
		id
	}
	url
	memberOf {
		id
	}
	products {
		id
	}
}
fragment UserFragment on User {
	... NodeFragment
	... UserOrGroupFragment
	fullName
	locale
}
fragment NodeFragment on Node {
	id
}
`

func (c *Client) GetUser(ctx context.Context, id *string, xid *string) (*GetUser, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUser",
		Query:         GetUserDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetUser
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetUsersDocument = `query GetUsers ($filter: UserFilter, $order: UserOrder, $first: Int, $offset: Int) {
	queryUser(filter: $filter, order: $order, first: $first, offset: $offset) {
		... UserFragment
	}
}
fragment UserFragment on User {
	... NodeFragment
	... UserOrGroupFragment
	fullName
	locale
}
fragment NodeFragment on Node {
	id
}
fragment UserOrGroupFragment on UserOrGroup {
	... on User {
		id
	}
	... on Group {
		id
	}
	xid
	host {
		id
	}
	name
	email
	avatar {
		id
	}
	url
	memberOf {
		id
	}
	products {
		id
	}
}
`

func (c *Client) GetUsers(ctx context.Context, filter *models.UserFilter, order *models.UserOrder, first *int64, offset *int64) (*GetUsers, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUsers",
		Query:         GetUsersDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetUsers
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveUsersDocument = `mutation SaveUsers ($input: [AddUserInput!]!) {
	addUser(input: $input, upsert: true) {
		user {
			id
		}
	}
}
`

func (c *Client) SaveUsers(ctx context.Context, input []*models.AddUserInput) (*SaveUsers, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveUsers",
		Query:         SaveUsersDocument,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	var resp SaveUsers
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteUserDocument = `mutation DeleteUser ($filter: UserFilter!) {
	deleteUser(filter: $filter) {
		user {
			id
		}
	}
}
`

func (c *Client) DeleteUser(ctx context.Context, filter models.UserFilter) (*DeleteUser, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteUser",
		Query:         DeleteUserDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteUser
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetGroupDocument = `query GetGroup ($id: ID, $xid: String) {
	getGroup(id: $id, xid: $xid) {
		... GroupFragment
	}
}
fragment GroupFragment on Group {
	... NodeFragment
	... UserOrGroupFragment
	members {
		... on User {
			id
		}
		... on Group {
			id
		}
	}
}
fragment NodeFragment on Node {
	id
}
fragment UserOrGroupFragment on UserOrGroup {
	... on User {
		id
	}
	... on Group {
		id
	}
	xid
	host {
		id
	}
	name
	email
	avatar {
		id
	}
	url
	memberOf {
		id
	}
	products {
		id
	}
}
`

func (c *Client) GetGroup(ctx context.Context, id *string, xid *string) (*GetGroup, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroup",
		Query:         GetGroupDocument,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}

	var resp GetGroup
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const GetGroupsDocument = `query GetGroups ($filter: GroupFilter, $order: GroupOrder, $first: Int, $offset: Int) {
	queryGroup(filter: $filter, order: $order, first: $first, offset: $offset) {
		... GroupFragment
	}
}
fragment GroupFragment on Group {
	... NodeFragment
	... UserOrGroupFragment
	members {
		... on User {
			id
		}
		... on Group {
			id
		}
	}
}
fragment NodeFragment on Node {
	id
}
fragment UserOrGroupFragment on UserOrGroup {
	... on User {
		id
	}
	... on Group {
		id
	}
	xid
	host {
		id
	}
	name
	email
	avatar {
		id
	}
	url
	memberOf {
		id
	}
	products {
		id
	}
}
`

func (c *Client) GetGroups(ctx context.Context, filter *models.GroupFilter, order *models.GroupOrder, first *int64, offset *int64) (*GetGroups, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroups",
		Query:         GetGroupsDocument,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}

	var resp GetGroups
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const SaveGroupsDocument = `mutation SaveGroups ($input: [AddGroupInput!]!) {
	addGroup(input: $input, upsert: true) {
		group {
			id
		}
	}
}
`

func (c *Client) SaveGroups(ctx context.Context, input []*models.AddGroupInput) (*SaveGroups, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SaveGroups",
		Query:         SaveGroupsDocument,
		Variables: map[string]interface{}{
			"input": input,
		},
	}

	var resp SaveGroups
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

const DeleteGroupDocument = `mutation DeleteGroup ($filter: GroupFilter!) {
	deleteGroup(filter: $filter) {
		group {
			id
		}
	}
}
`

func (c *Client) DeleteGroup(ctx context.Context, filter models.GroupFilter) (*DeleteGroup, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteGroup",
		Query:         DeleteGroupDocument,
		Variables: map[string]interface{}{
			"filter": filter,
		},
	}

	var resp DeleteGroup
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

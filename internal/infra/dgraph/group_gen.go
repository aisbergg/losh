// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ GroupRepository = (*DgraphRepository)(nil)

// GroupRepository is an interface for getting and saving `Group` objects to a repository.
type GroupRepository interface {
	GetGroup(ctx context.Context, id, xid *string) (*models.Group, error)
	GetGroups(ctx context.Context, filter *dgclient.GroupFilter, order *dgclient.GroupOrder, first *int64, offset *int64) ([]*models.Group, int64, error)
	GetAllGroups(ctx context.Context) ([]*models.Group, int64, error)
	CreateGroup(ctx context.Context, input *models.Group) error
	CreateGroups(ctx context.Context, input []*models.Group) error
	UpdateGroup(ctx context.Context, input *models.Group) error
	DeleteGroup(ctx context.Context, id, xid *string) error
	DeleteAllGroups(ctx context.Context) error
}

var (
	errGetGroupStr    = "failed to get group(s)"
	errSaveGroupStr   = "failed to save group(s)"
	errDeleteGroupStr = "failed to delete group(s)"
)

// GetGroup returns a `Group` object by its ID.
func (dr *DgraphRepository) GetGroup(ctx context.Context, id, xid *string) (*models.Group, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get Group", "id", *id)
		rsp, err := dr.client.GetGroupByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetGroupStr).Add("groupId", id)
		}
		rspData = rsp.GetGroup
	} else if xid != nil {
		dr.log.Debugw("get Group", "xid", *xid)
		rsp, err := dr.client.GetGroupByXid(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetGroupStr).Add("groupXid", xid)
		}
		rspData = rsp.GetGroup
	} else {
		panic("must specify id or xid")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.Group{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetGroupID returns the ID of an existing `Group` object.
func (dr *DgraphRepository) GetGroupID(ctx context.Context, xid *string) (*string, error) {
	if xid != nil {
		dr.log.Debugw("get Group", "xid", *xid)
		rsp, err := dr.client.GetGroupID(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetGroupStr).Add("groupXid", xid)
		}
		if rsp.GetGroup == nil {
			return nil, nil
		}
		return &rsp.GetGroup.ID, nil
	}

	panic("must specify xid")
}

// GetGroups returns a list of `Group` objects matching the filter criteria.
func (dr *DgraphRepository) GetGroups(ctx context.Context, filter *dgclient.GroupFilter, order *dgclient.GroupOrder, first *int64, offset *int64) ([]*models.Group, int64, error) {
	dr.log.Debugw("get Groups")
	rsp, err := dr.client.GetGroups(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetGroupStr)
	}
	ret := make([]*models.Group, 0, len(rsp.QueryGroup))
	if err = dr.copier.CopyTo(rsp.QueryGroup, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateGroup.Count, nil
}

// GetAllGroups returns a list of all `Group` objects.
func (dr *DgraphRepository) GetAllGroups(ctx context.Context) ([]*models.Group, int64, error) {
	return dr.GetGroups(ctx, nil, nil, nil, nil)
}

// GetGroupWithCustomQuery returns a `Group` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetGroupWithCustomQuery(ctx context.Context, operationName, query string, id, xid *string) (*models.Group, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}
	rsp := struct {
		Group *models.Group "json:\"getGroup\" graphql:\"getGroup\""
	}{}
	dr.log.Debugw("get Group with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetGroupStr)
	}
	return rsp.Group, nil
}

// GetGroupsWithCustomQuery returns a list of `Group` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetGroupsWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.GroupFilter, order *dgclient.GroupOrder, first *int64, offset *int64) ([]*models.Group, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		Groups []*models.Group "json:\"queryGroup\" graphql:\"queryGroup\""
	}{}
	dr.log.Debugw("get Groups with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetGroupStr)
	}
	return rsp.Groups, nil
}

// GetAllGroupsWithCustomQuery returns a list of all `Group` objects.
func (dr *DgraphRepository) GetAllGroupsWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.Group, error) {
	return dr.GetGroupsWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateGroup creates a new `Group` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateGroup(ctx context.Context, input *models.Group) error {
	dr.log.Debugw("create Group", []interface{}{"xid", *input.Xid}...)
	inputData := dgclient.AddGroupInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateGroups(ctx, []*dgclient.AddGroupInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create group").
			Add("groupId", input.ID).Add("groupXid", input.Xid)
	}
	// save ID from response
	input.ID = &rsp.AddGroup.Group[0].ID
	return nil
}

// CreateGroups creates new `Group` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateGroups(ctx context.Context, input []*models.Group) error {
	inputData := make([]*dgclient.AddGroupInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddGroupInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create Groups")
	rsp, err := dr.client.CreateGroups(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create groups")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddGroup.Group[i].ID
	}

	return nil
}

// UpdateGroup updates an existing `Group` object.
func (dr *DgraphRepository) UpdateGroup(ctx context.Context, input *models.Group) error {
	dr.log.Debugw("update Group", []interface{}{"id", *input.ID, "xid", *input.Xid}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID").Add("groupXid", input.Xid)
	}
	patch := &dgclient.GroupPatch{}
	dr.copyORMStruct(input, patch)
	patch.Xid = nil
	inputData := dgclient.UpdateGroupInput{
		Filter: dgclient.GroupFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateGroups(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update group").
			Add("groupId", *input.ID).Add("groupXid", input.Xid)
	}
	return nil
}

// DeleteGroup deletes a `Group` object.
func (dr *DgraphRepository) DeleteGroup(ctx context.Context, id, xid *string) error {
	delFilter := dgclient.GroupFilter{}
	if id != nil && xid != nil {
		return NewRepoError("must specify either id or xid")
	}
	if id != nil {
		delFilter.ID = []string{*id}
	}
	if xid != nil {
		delFilter.Xid = &dgclient.StringHashFilter{Eq: xid}
	}

	dr.log.Debugw("delete Group")
	if _, err := dr.client.DeleteGroups(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteGroupStr).
			Add("groupId", id).Add("groupXid", xid)
	}
	return nil
}

// DeleteAllGroups deletes all `Group` objects.
func (dr *DgraphRepository) DeleteAllGroups(ctx context.Context) error {
	delFilter := dgclient.GroupFilter{}
	dr.log.Debugw("delete all Group")
	if _, err := dr.client.DeleteGroups(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteGroupStr)
	}
	return nil
}

// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ FloatVRepository = (*DgraphRepository)(nil)

// FloatVRepository is an interface for getting and saving `FloatV` objects to a repository.
type FloatVRepository interface {
	GetFloatV(ctx context.Context, id *string) (*models.FloatV, error)
	GetFloatVs(ctx context.Context, filter *dgclient.FloatVFilter, order *dgclient.FloatVOrder, first *int64, offset *int64) ([]*models.FloatV, int64, error)
	GetAllFloatVs(ctx context.Context) ([]*models.FloatV, int64, error)
	CreateFloatV(ctx context.Context, input *models.FloatV) error
	CreateFloatVs(ctx context.Context, input []*models.FloatV) error
	UpdateFloatV(ctx context.Context, input *models.FloatV) error
	DeleteFloatV(ctx context.Context, id *string) error
	DeleteAllFloatVs(ctx context.Context) error
}

var (
	errGetFloatVStr    = "failed to get float v(s)"
	errSaveFloatVStr   = "failed to save float v(s)"
	errDeleteFloatVStr = "failed to delete float v(s)"
)

// GetFloatV returns a `FloatV` object by its ID.
func (dr *DgraphRepository) GetFloatV(ctx context.Context, id *string) (*models.FloatV, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get FloatV", "id", *id)
		rsp, err := dr.client.GetFloatVByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetFloatVStr).Add("floatVId", id)
		}
		rspData = rsp.GetFloatV
	} else {
		panic("must specify id")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.FloatV{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetFloatVs returns a list of `FloatV` objects matching the filter criteria.
func (dr *DgraphRepository) GetFloatVs(ctx context.Context, filter *dgclient.FloatVFilter, order *dgclient.FloatVOrder, first *int64, offset *int64) ([]*models.FloatV, int64, error) {
	dr.log.Debugw("get FloatVs")
	rsp, err := dr.client.GetFloatVs(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetFloatVStr)
	}
	ret := make([]*models.FloatV, 0, len(rsp.QueryFloatV))
	if err = dr.copier.CopyTo(rsp.QueryFloatV, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateFloatV.Count, nil
}

// GetAllFloatVs returns a list of all `FloatV` objects.
func (dr *DgraphRepository) GetAllFloatVs(ctx context.Context) ([]*models.FloatV, int64, error) {
	return dr.GetFloatVs(ctx, nil, nil, nil, nil)
}

// GetFloatVWithCustomQuery returns a `FloatV` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetFloatVWithCustomQuery(ctx context.Context, operationName, query string, id *string) (*models.FloatV, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id": id,
		},
	}
	rsp := struct {
		FloatV *models.FloatV "json:\"getFloatV\" graphql:\"getFloatV\""
	}{}
	dr.log.Debugw("get FloatV with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetFloatVStr)
	}
	return rsp.FloatV, nil
}

// GetFloatVsWithCustomQuery returns a list of `FloatV` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetFloatVsWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.FloatVFilter, order *dgclient.FloatVOrder, first *int64, offset *int64) ([]*models.FloatV, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		FloatVs []*models.FloatV "json:\"queryFloatV\" graphql:\"queryFloatV\""
	}{}
	dr.log.Debugw("get FloatVs with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetFloatVStr)
	}
	return rsp.FloatVs, nil
}

// GetAllFloatVsWithCustomQuery returns a list of all `FloatV` objects.
func (dr *DgraphRepository) GetAllFloatVsWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.FloatV, error) {
	return dr.GetFloatVsWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateFloatV creates a new `FloatV` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateFloatV(ctx context.Context, input *models.FloatV) error {
	dr.log.Debugw("create FloatV", []interface{}{}...)
	inputData := dgclient.AddFloatVInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateFloatVs(ctx, []*dgclient.AddFloatVInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create floatV").
			Add("floatVId", input.ID)
	}
	// save ID from response
	input.ID = &rsp.AddFloatV.FloatV[0].ID
	return nil
}

// CreateFloatVs creates new `FloatV` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateFloatVs(ctx context.Context, input []*models.FloatV) error {
	inputData := make([]*dgclient.AddFloatVInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddFloatVInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create FloatVs")
	rsp, err := dr.client.CreateFloatVs(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create floatVs")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddFloatV.FloatV[i].ID
	}

	return nil
}

// UpdateFloatV updates an existing `FloatV` object.
func (dr *DgraphRepository) UpdateFloatV(ctx context.Context, input *models.FloatV) error {
	dr.log.Debugw("update FloatV", []interface{}{"id", *input.ID}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID")
	}
	patch := &dgclient.FloatVPatch{}
	dr.copyORMStruct(input, patch)
	inputData := dgclient.UpdateFloatVInput{
		Filter: dgclient.FloatVFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateFloatVs(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update floatV").
			Add("floatVId", *input.ID)
	}
	return nil
}

// DeleteFloatV deletes a `FloatV` object.
func (dr *DgraphRepository) DeleteFloatV(ctx context.Context, id *string) error {
	delFilter := dgclient.FloatVFilter{}
	if id == nil {
		return NewRepoError("must specify id")
	}
	delFilter.ID = []string{*id}

	dr.log.Debugw("delete FloatV")
	if _, err := dr.client.DeleteFloatVs(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteFloatVStr).
			Add("floatVId", id)
	}
	return nil
}

// DeleteAllFloatVs deletes all `FloatV` objects.
func (dr *DgraphRepository) DeleteAllFloatVs(ctx context.Context) error {
	delFilter := dgclient.FloatVFilter{}
	dr.log.Debugw("delete all FloatV")
	if _, err := dr.client.DeleteFloatVs(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteFloatVStr)
	}
	return nil
}

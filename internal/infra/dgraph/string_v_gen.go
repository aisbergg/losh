// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ StringVRepository = (*DgraphRepository)(nil)

// StringVRepository is an interface for getting and saving `StringV` objects to a repository.
type StringVRepository interface {
	GetStringV(ctx context.Context, id *string) (*models.StringV, error)
	GetStringVs(ctx context.Context, filter *dgclient.StringVFilter, order *dgclient.StringVOrder, first *int64, offset *int64) ([]*models.StringV, int64, error)
	GetAllStringVs(ctx context.Context) ([]*models.StringV, int64, error)
	CreateStringV(ctx context.Context, input *models.StringV) error
	CreateStringVs(ctx context.Context, input []*models.StringV) error
	UpdateStringV(ctx context.Context, input *models.StringV) error
	DeleteStringV(ctx context.Context, id *string) error
	DeleteAllStringVs(ctx context.Context) error
}

var (
	errGetStringVStr    = "failed to get string v(s)"
	errSaveStringVStr   = "failed to save string v(s)"
	errDeleteStringVStr = "failed to delete string v(s)"
)

// GetStringV returns a `StringV` object by its ID.
func (dr *DgraphRepository) GetStringV(ctx context.Context, id *string) (*models.StringV, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get StringV", "id", *id)
		rsp, err := dr.client.GetStringVByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetStringVStr).Add("stringVId", id)
		}
		rspData = rsp.GetStringV
	} else {
		panic("must specify id")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.StringV{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetStringVs returns a list of `StringV` objects matching the filter criteria.
func (dr *DgraphRepository) GetStringVs(ctx context.Context, filter *dgclient.StringVFilter, order *dgclient.StringVOrder, first *int64, offset *int64) ([]*models.StringV, int64, error) {
	dr.log.Debugw("get StringVs")
	rsp, err := dr.client.GetStringVs(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetStringVStr)
	}
	ret := make([]*models.StringV, 0, len(rsp.QueryStringV))
	if err = dr.copier.CopyTo(rsp.QueryStringV, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateStringV.Count, nil
}

// GetAllStringVs returns a list of all `StringV` objects.
func (dr *DgraphRepository) GetAllStringVs(ctx context.Context) ([]*models.StringV, int64, error) {
	return dr.GetStringVs(ctx, nil, nil, nil, nil)
}

// GetStringVWithCustomQuery returns a `StringV` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetStringVWithCustomQuery(ctx context.Context, operationName, query string, id *string) (*models.StringV, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id": id,
		},
	}
	rsp := struct {
		StringV *models.StringV "json:\"getStringV\" graphql:\"getStringV\""
	}{}
	dr.log.Debugw("get StringV with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetStringVStr)
	}
	return rsp.StringV, nil
}

// GetStringVsWithCustomQuery returns a list of `StringV` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetStringVsWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.StringVFilter, order *dgclient.StringVOrder, first *int64, offset *int64) ([]*models.StringV, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		StringVs []*models.StringV "json:\"queryStringV\" graphql:\"queryStringV\""
	}{}
	dr.log.Debugw("get StringVs with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetStringVStr)
	}
	return rsp.StringVs, nil
}

// GetAllStringVsWithCustomQuery returns a list of all `StringV` objects.
func (dr *DgraphRepository) GetAllStringVsWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.StringV, error) {
	return dr.GetStringVsWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateStringV creates a new `StringV` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateStringV(ctx context.Context, input *models.StringV) error {
	dr.log.Debugw("create StringV", []interface{}{}...)
	inputData := dgclient.AddStringVInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateStringVs(ctx, []*dgclient.AddStringVInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create stringV").
			Add("stringVId", input.ID)
	}
	// save ID from response
	input.ID = &rsp.AddStringV.StringV[0].ID
	return nil
}

// CreateStringVs creates new `StringV` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateStringVs(ctx context.Context, input []*models.StringV) error {
	inputData := make([]*dgclient.AddStringVInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddStringVInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create StringVs")
	rsp, err := dr.client.CreateStringVs(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create stringVs")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddStringV.StringV[i].ID
	}

	return nil
}

// UpdateStringV updates an existing `StringV` object.
func (dr *DgraphRepository) UpdateStringV(ctx context.Context, input *models.StringV) error {
	dr.log.Debugw("update StringV", []interface{}{"id", *input.ID}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID")
	}
	patch := &dgclient.StringVPatch{}
	dr.copyORMStruct(input, patch)
	inputData := dgclient.UpdateStringVInput{
		Filter: dgclient.StringVFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateStringVs(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update stringV").
			Add("stringVId", *input.ID)
	}
	return nil
}

// DeleteStringV deletes a `StringV` object.
func (dr *DgraphRepository) DeleteStringV(ctx context.Context, id *string) error {
	delFilter := dgclient.StringVFilter{}
	if id == nil {
		return NewRepoError("must specify id")
	}
	delFilter.ID = []string{*id}

	dr.log.Debugw("delete StringV")
	if _, err := dr.client.DeleteStringVs(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteStringVStr).
			Add("stringVId", id)
	}
	return nil
}

// DeleteAllStringVs deletes all `StringV` objects.
func (dr *DgraphRepository) DeleteAllStringVs(ctx context.Context) error {
	delFilter := dgclient.StringVFilter{}
	dr.log.Debugw("delete all StringV")
	if _, err := dr.client.DeleteStringVs(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteStringVStr)
	}
	return nil
}

// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ BoundingBoxDimensionsRepository = (*DgraphRepository)(nil)

// BoundingBoxDimensionsRepository is an interface for getting and saving `BoundingBoxDimensions` objects to a repository.
type BoundingBoxDimensionsRepository interface {
	GetBoundingBoxDimensions(ctx context.Context, id *string) (*models.BoundingBoxDimensions, error)
	GetBoundingBoxDimensionss(ctx context.Context, filter *dgclient.BoundingBoxDimensionsFilter, order *dgclient.BoundingBoxDimensionsOrder, first *int64, offset *int64) ([]*models.BoundingBoxDimensions, int64, error)
	GetAllBoundingBoxDimensionss(ctx context.Context) ([]*models.BoundingBoxDimensions, int64, error)
	CreateBoundingBoxDimensions(ctx context.Context, input *models.BoundingBoxDimensions) error
	CreateBoundingBoxDimensionss(ctx context.Context, input []*models.BoundingBoxDimensions) error
	UpdateBoundingBoxDimensions(ctx context.Context, input *models.BoundingBoxDimensions) error
	DeleteBoundingBoxDimensions(ctx context.Context, id *string) error
	DeleteAllBoundingBoxDimensionss(ctx context.Context) error
}

var (
	errGetBoundingBoxDimensionsStr    = "failed to get bounding box dimensions(s)"
	errSaveBoundingBoxDimensionsStr   = "failed to save bounding box dimensions(s)"
	errDeleteBoundingBoxDimensionsStr = "failed to delete bounding box dimensions(s)"
)

// GetBoundingBoxDimensions returns a `BoundingBoxDimensions` object by its ID.
func (dr *DgraphRepository) GetBoundingBoxDimensions(ctx context.Context, id *string) (*models.BoundingBoxDimensions, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get BoundingBoxDimensions", "id", *id)
		rsp, err := dr.client.GetBoundingBoxDimensionsByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetBoundingBoxDimensionsStr).Add("boundingBoxDimensionsId", id)
		}
		rspData = rsp.GetBoundingBoxDimensions
	} else {
		panic("must specify id")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.BoundingBoxDimensions{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetBoundingBoxDimensionss returns a list of `BoundingBoxDimensions` objects matching the filter criteria.
func (dr *DgraphRepository) GetBoundingBoxDimensionss(ctx context.Context, filter *dgclient.BoundingBoxDimensionsFilter, order *dgclient.BoundingBoxDimensionsOrder, first *int64, offset *int64) ([]*models.BoundingBoxDimensions, int64, error) {
	dr.log.Debugw("get BoundingBoxDimensionss")
	rsp, err := dr.client.GetBoundingBoxDimensionss(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetBoundingBoxDimensionsStr)
	}
	ret := make([]*models.BoundingBoxDimensions, 0, len(rsp.QueryBoundingBoxDimensions))
	if err = dr.copier.CopyTo(rsp.QueryBoundingBoxDimensions, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateBoundingBoxDimensions.Count, nil
}

// GetAllBoundingBoxDimensionss returns a list of all `BoundingBoxDimensions` objects.
func (dr *DgraphRepository) GetAllBoundingBoxDimensionss(ctx context.Context) ([]*models.BoundingBoxDimensions, int64, error) {
	return dr.GetBoundingBoxDimensionss(ctx, nil, nil, nil, nil)
}

// GetBoundingBoxDimensionsWithCustomQuery returns a `BoundingBoxDimensions` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetBoundingBoxDimensionsWithCustomQuery(ctx context.Context, operationName, query string, id *string) (*models.BoundingBoxDimensions, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id": id,
		},
	}
	rsp := struct {
		BoundingBoxDimensions *models.BoundingBoxDimensions "json:\"getBoundingBoxDimensions\" graphql:\"getBoundingBoxDimensions\""
	}{}
	dr.log.Debugw("get BoundingBoxDimensions with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetBoundingBoxDimensionsStr)
	}
	return rsp.BoundingBoxDimensions, nil
}

// GetBoundingBoxDimensionssWithCustomQuery returns a list of `BoundingBoxDimensions` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetBoundingBoxDimensionssWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.BoundingBoxDimensionsFilter, order *dgclient.BoundingBoxDimensionsOrder, first *int64, offset *int64) ([]*models.BoundingBoxDimensions, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		BoundingBoxDimensionss []*models.BoundingBoxDimensions "json:\"queryBoundingBoxDimensions\" graphql:\"queryBoundingBoxDimensions\""
	}{}
	dr.log.Debugw("get BoundingBoxDimensionss with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetBoundingBoxDimensionsStr)
	}
	return rsp.BoundingBoxDimensionss, nil
}

// GetAllBoundingBoxDimensionssWithCustomQuery returns a list of all `BoundingBoxDimensions` objects.
func (dr *DgraphRepository) GetAllBoundingBoxDimensionssWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.BoundingBoxDimensions, error) {
	return dr.GetBoundingBoxDimensionssWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateBoundingBoxDimensions creates a new `BoundingBoxDimensions` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateBoundingBoxDimensions(ctx context.Context, input *models.BoundingBoxDimensions) error {
	dr.log.Debugw("create BoundingBoxDimensions", []interface{}{}...)
	inputData := dgclient.AddBoundingBoxDimensionsInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateBoundingBoxDimensionss(ctx, []*dgclient.AddBoundingBoxDimensionsInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create boundingBoxDimensions").
			Add("boundingBoxDimensionsId", input.ID)
	}
	// save ID from response
	input.ID = &rsp.AddBoundingBoxDimensions.BoundingBoxDimensions[0].ID
	return nil
}

// CreateBoundingBoxDimensionss creates new `BoundingBoxDimensions` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateBoundingBoxDimensionss(ctx context.Context, input []*models.BoundingBoxDimensions) error {
	inputData := make([]*dgclient.AddBoundingBoxDimensionsInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddBoundingBoxDimensionsInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create BoundingBoxDimensionss")
	rsp, err := dr.client.CreateBoundingBoxDimensionss(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create boundingBoxDimensionss")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddBoundingBoxDimensions.BoundingBoxDimensions[i].ID
	}

	return nil
}

// UpdateBoundingBoxDimensions updates an existing `BoundingBoxDimensions` object.
func (dr *DgraphRepository) UpdateBoundingBoxDimensions(ctx context.Context, input *models.BoundingBoxDimensions) error {
	dr.log.Debugw("update BoundingBoxDimensions", []interface{}{"id", *input.ID}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID")
	}
	patch := &dgclient.BoundingBoxDimensionsPatch{}
	dr.copyORMStruct(input, patch)
	inputData := dgclient.UpdateBoundingBoxDimensionsInput{
		Filter: dgclient.BoundingBoxDimensionsFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateBoundingBoxDimensionss(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update boundingBoxDimensions").
			Add("boundingBoxDimensionsId", *input.ID)
	}
	return nil
}

// DeleteBoundingBoxDimensions deletes a `BoundingBoxDimensions` object.
func (dr *DgraphRepository) DeleteBoundingBoxDimensions(ctx context.Context, id *string) error {
	delFilter := dgclient.BoundingBoxDimensionsFilter{}
	if id == nil {
		return NewRepoError("must specify id")
	}
	delFilter.ID = []string{*id}

	dr.log.Debugw("delete BoundingBoxDimensions")
	if _, err := dr.client.DeleteBoundingBoxDimensionss(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteBoundingBoxDimensionsStr).
			Add("boundingBoxDimensionsId", id)
	}
	return nil
}

// DeleteAllBoundingBoxDimensionss deletes all `BoundingBoxDimensions` objects.
func (dr *DgraphRepository) DeleteAllBoundingBoxDimensionss(ctx context.Context) error {
	delFilter := dgclient.BoundingBoxDimensionsFilter{}
	dr.log.Debugw("delete all BoundingBoxDimensions")
	if _, err := dr.client.DeleteBoundingBoxDimensionss(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteBoundingBoxDimensionsStr)
	}
	return nil
}

fragment KeyValueFragment on KeyValue {
	id
	key
	value {
		... on StringV {id, stringValue: value}
		... on FloatV {id, floatValue: value}
	}
}

fragment FloatVFragment on FloatV {
	id
	value
}

fragment StringVFragment on StringV {
	id
	value
}

# ------------------------------------------------------------------------------

query GetStringVByID($id: ID!) {
	getStringV(id: $id) {...StringVFragment}
}

query GetStringVs($getFilter: StringVFilter, $order: StringVOrder, $first: Int, $offset: Int) {
	queryStringV(filter: $getFilter, order: $order, first: $first, offset: $offset) {...StringVFragment}
	aggregateStringV(filter: $getFilter) {count}
}

mutation CreateStringVs($createInput: [AddStringVInput!]!) {
	addStringV(input: $createInput) {stringV {id}}
}

mutation UpdateStringVs($updateInput: UpdateStringVInput!) {
	updateStringV(input: $updateInput) {stringV {id}}
}

mutation DeleteStringVs($delFilter: StringVFilter!) {
	deleteStringV(filter: $delFilter) {stringV {id}}
}

# ------------------------------------------------------------------------------

query GetFloatVByID($id: ID!) {
	getFloatV(id: $id) {...FloatVFragment}
}

query GetFloatVs($getFilter: FloatVFilter, $order: FloatVOrder, $first: Int, $offset: Int) {
	queryFloatV(filter: $getFilter, order: $order, first: $first, offset: $offset) {...FloatVFragment}
	aggregateFloatV(filter: $getFilter) {count}
}

mutation CreateFloatVs($createInput: [AddFloatVInput!]!) {
	addFloatV(input: $createInput) {floatV {id}}
}

mutation UpdateFloatVs($updateInput: UpdateFloatVInput!) {
	updateFloatV(input: $updateInput) {floatV {id}}
}

mutation DeleteFloatVs($delFilter: FloatVFilter!) {
	deleteFloatV(filter: $delFilter) {floatV {id}}
}

# ------------------------------------------------------------------------------

query GetKeyValueByID($id: ID!) {
	getKeyValue(id: $id) {...KeyValueFragment}
}

query GetKeyValues($getFilter: KeyValueFilter, $order: KeyValueOrder, $first: Int, $offset: Int) {
	queryKeyValue(filter: $getFilter, order: $order, first: $first, offset: $offset) {...KeyValueFragment}
	aggregateKeyValue(filter: $getFilter) {count}
}

mutation CreateKeyValues($createInput: [AddKeyValueInput!]!) {
	addKeyValue(input: $createInput) {keyValue {id}}
}

mutation UpdateKeyValues($updateInput: UpdateKeyValueInput!) {
	updateKeyValue(input: $updateInput) {keyValue {id}}
}

mutation DeleteKeyValues($delFilter: KeyValueFilter!) {
	deleteKeyValue(filter: $delFilter) {keyValue {id}}
}

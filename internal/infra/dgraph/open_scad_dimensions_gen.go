// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ OpenSCADDimensionsRepository = (*DgraphRepository)(nil)

// OpenSCADDimensionsRepository is an interface for getting and saving `OpenSCADDimensions` objects to a repository.
type OpenSCADDimensionsRepository interface {
	GetOpenSCADDimensions(ctx context.Context, id *string) (*models.OpenSCADDimensions, error)
	GetOpenSCADDimensionss(ctx context.Context, filter *dgclient.OpenSCADDimensionsFilter, order *dgclient.OpenSCADDimensionsOrder, first *int64, offset *int64) ([]*models.OpenSCADDimensions, int64, error)
	GetAllOpenSCADDimensionss(ctx context.Context) ([]*models.OpenSCADDimensions, int64, error)
	CreateOpenSCADDimensions(ctx context.Context, input *models.OpenSCADDimensions) error
	CreateOpenSCADDimensionss(ctx context.Context, input []*models.OpenSCADDimensions) error
	UpdateOpenSCADDimensions(ctx context.Context, input *models.OpenSCADDimensions) error
	DeleteOpenSCADDimensions(ctx context.Context, id *string) error
	DeleteAllOpenSCADDimensionss(ctx context.Context) error
}

var (
	errGetOpenSCADDimensionsStr    = "failed to get open scad dimensions(s)"
	errSaveOpenSCADDimensionsStr   = "failed to save open scad dimensions(s)"
	errDeleteOpenSCADDimensionsStr = "failed to delete open scad dimensions(s)"
)

// GetOpenSCADDimensions returns a `OpenSCADDimensions` object by its ID.
func (dr *DgraphRepository) GetOpenSCADDimensions(ctx context.Context, id *string) (*models.OpenSCADDimensions, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get OpenSCADDimensions", "id", *id)
		rsp, err := dr.client.GetOpenSCADDimensionsByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetOpenSCADDimensionsStr).Add("openSCADDimensionsId", id)
		}
		rspData = rsp.GetOpenSCADDimensions
	} else {
		panic("must specify id")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.OpenSCADDimensions{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetOpenSCADDimensionss returns a list of `OpenSCADDimensions` objects matching the filter criteria.
func (dr *DgraphRepository) GetOpenSCADDimensionss(ctx context.Context, filter *dgclient.OpenSCADDimensionsFilter, order *dgclient.OpenSCADDimensionsOrder, first *int64, offset *int64) ([]*models.OpenSCADDimensions, int64, error) {
	dr.log.Debugw("get OpenSCADDimensionss")
	rsp, err := dr.client.GetOpenSCADDimensionss(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetOpenSCADDimensionsStr)
	}
	ret := make([]*models.OpenSCADDimensions, 0, len(rsp.QueryOpenSCADDimensions))
	if err = dr.copier.CopyTo(rsp.QueryOpenSCADDimensions, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateOpenSCADDimensions.Count, nil
}

// GetAllOpenSCADDimensionss returns a list of all `OpenSCADDimensions` objects.
func (dr *DgraphRepository) GetAllOpenSCADDimensionss(ctx context.Context) ([]*models.OpenSCADDimensions, int64, error) {
	return dr.GetOpenSCADDimensionss(ctx, nil, nil, nil, nil)
}

// GetOpenSCADDimensionsWithCustomQuery returns a `OpenSCADDimensions` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetOpenSCADDimensionsWithCustomQuery(ctx context.Context, operationName, query string, id *string) (*models.OpenSCADDimensions, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id": id,
		},
	}
	rsp := struct {
		OpenSCADDimensions *models.OpenSCADDimensions "json:\"getOpenSCADDimensions\" graphql:\"getOpenSCADDimensions\""
	}{}
	dr.log.Debugw("get OpenSCADDimensions with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetOpenSCADDimensionsStr)
	}
	return rsp.OpenSCADDimensions, nil
}

// GetOpenSCADDimensionssWithCustomQuery returns a list of `OpenSCADDimensions` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetOpenSCADDimensionssWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.OpenSCADDimensionsFilter, order *dgclient.OpenSCADDimensionsOrder, first *int64, offset *int64) ([]*models.OpenSCADDimensions, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		OpenSCADDimensionss []*models.OpenSCADDimensions "json:\"queryOpenSCADDimensions\" graphql:\"queryOpenSCADDimensions\""
	}{}
	dr.log.Debugw("get OpenSCADDimensionss with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetOpenSCADDimensionsStr)
	}
	return rsp.OpenSCADDimensionss, nil
}

// GetAllOpenSCADDimensionssWithCustomQuery returns a list of all `OpenSCADDimensions` objects.
func (dr *DgraphRepository) GetAllOpenSCADDimensionssWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.OpenSCADDimensions, error) {
	return dr.GetOpenSCADDimensionssWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateOpenSCADDimensions creates a new `OpenSCADDimensions` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateOpenSCADDimensions(ctx context.Context, input *models.OpenSCADDimensions) error {
	dr.log.Debugw("create OpenSCADDimensions", []interface{}{}...)
	inputData := dgclient.AddOpenSCADDimensionsInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateOpenSCADDimensionss(ctx, []*dgclient.AddOpenSCADDimensionsInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create openSCADDimensions").
			Add("openSCADDimensionsId", input.ID)
	}
	// save ID from response
	input.ID = &rsp.AddOpenSCADDimensions.OpenSCADDimensions[0].ID
	return nil
}

// CreateOpenSCADDimensionss creates new `OpenSCADDimensions` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateOpenSCADDimensionss(ctx context.Context, input []*models.OpenSCADDimensions) error {
	inputData := make([]*dgclient.AddOpenSCADDimensionsInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddOpenSCADDimensionsInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create OpenSCADDimensionss")
	rsp, err := dr.client.CreateOpenSCADDimensionss(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create openSCADDimensionss")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddOpenSCADDimensions.OpenSCADDimensions[i].ID
	}

	return nil
}

// UpdateOpenSCADDimensions updates an existing `OpenSCADDimensions` object.
func (dr *DgraphRepository) UpdateOpenSCADDimensions(ctx context.Context, input *models.OpenSCADDimensions) error {
	dr.log.Debugw("update OpenSCADDimensions", []interface{}{"id", *input.ID}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID")
	}
	patch := &dgclient.OpenSCADDimensionsPatch{}
	dr.copyORMStruct(input, patch)
	inputData := dgclient.UpdateOpenSCADDimensionsInput{
		Filter: dgclient.OpenSCADDimensionsFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateOpenSCADDimensionss(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update openSCADDimensions").
			Add("openSCADDimensionsId", *input.ID)
	}
	return nil
}

// DeleteOpenSCADDimensions deletes a `OpenSCADDimensions` object.
func (dr *DgraphRepository) DeleteOpenSCADDimensions(ctx context.Context, id *string) error {
	delFilter := dgclient.OpenSCADDimensionsFilter{}
	if id == nil {
		return NewRepoError("must specify id")
	}
	delFilter.ID = []string{*id}

	dr.log.Debugw("delete OpenSCADDimensions")
	if _, err := dr.client.DeleteOpenSCADDimensionss(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteOpenSCADDimensionsStr).
			Add("openSCADDimensionsId", id)
	}
	return nil
}

// DeleteAllOpenSCADDimensionss deletes all `OpenSCADDimensions` objects.
func (dr *DgraphRepository) DeleteAllOpenSCADDimensionss(ctx context.Context) error {
	delFilter := dgclient.OpenSCADDimensionsFilter{}
	dr.log.Debugw("delete all OpenSCADDimensions")
	if _, err := dr.client.DeleteOpenSCADDimensionss(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteOpenSCADDimensionsStr)
	}
	return nil
}

// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ ManufacturingProcessRepository = (*DgraphRepository)(nil)

// ManufacturingProcessRepository is an interface for getting and saving `ManufacturingProcess` objects to a repository.
type ManufacturingProcessRepository interface {
	GetManufacturingProcess(ctx context.Context, id *string) (*models.ManufacturingProcess, error)
	GetManufacturingProcesses(ctx context.Context, filter *dgclient.ManufacturingProcessFilter, order *dgclient.ManufacturingProcessOrder, first *int64, offset *int64) ([]*models.ManufacturingProcess, int64, error)
	GetAllManufacturingProcesses(ctx context.Context) ([]*models.ManufacturingProcess, int64, error)
	CreateManufacturingProcess(ctx context.Context, input *models.ManufacturingProcess) error
	CreateManufacturingProcesses(ctx context.Context, input []*models.ManufacturingProcess) error
	UpdateManufacturingProcess(ctx context.Context, input *models.ManufacturingProcess) error
	DeleteManufacturingProcess(ctx context.Context, id *string) error
	DeleteAllManufacturingProcesses(ctx context.Context) error
}

var (
	errGetManufacturingProcessStr    = "failed to get manufacturing process(s)"
	errSaveManufacturingProcessStr   = "failed to save manufacturing process(s)"
	errDeleteManufacturingProcessStr = "failed to delete manufacturing process(s)"
)

// GetManufacturingProcess returns a `ManufacturingProcess` object by its ID.
func (dr *DgraphRepository) GetManufacturingProcess(ctx context.Context, id *string) (*models.ManufacturingProcess, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get ManufacturingProcess", "id", *id)
		rsp, err := dr.client.GetManufacturingProcessByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetManufacturingProcessStr).Add("manufacturingProcessId", id)
		}
		rspData = rsp.GetManufacturingProcess
	} else {
		panic("must specify id")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.ManufacturingProcess{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetManufacturingProcesses returns a list of `ManufacturingProcess` objects matching the filter criteria.
func (dr *DgraphRepository) GetManufacturingProcesses(ctx context.Context, filter *dgclient.ManufacturingProcessFilter, order *dgclient.ManufacturingProcessOrder, first *int64, offset *int64) ([]*models.ManufacturingProcess, int64, error) {
	dr.log.Debugw("get ManufacturingProcesses")
	rsp, err := dr.client.GetManufacturingProcesses(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetManufacturingProcessStr)
	}
	ret := make([]*models.ManufacturingProcess, 0, len(rsp.QueryManufacturingProcess))
	if err = dr.copier.CopyTo(rsp.QueryManufacturingProcess, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateManufacturingProcess.Count, nil
}

// GetAllManufacturingProcesses returns a list of all `ManufacturingProcess` objects.
func (dr *DgraphRepository) GetAllManufacturingProcesses(ctx context.Context) ([]*models.ManufacturingProcess, int64, error) {
	return dr.GetManufacturingProcesses(ctx, nil, nil, nil, nil)
}

// GetManufacturingProcessWithCustomQuery returns a `ManufacturingProcess` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetManufacturingProcessWithCustomQuery(ctx context.Context, operationName, query string, id *string) (*models.ManufacturingProcess, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id": id,
		},
	}
	rsp := struct {
		ManufacturingProcess *models.ManufacturingProcess "json:\"getManufacturingProcess\" graphql:\"getManufacturingProcess\""
	}{}
	dr.log.Debugw("get ManufacturingProcess with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetManufacturingProcessStr)
	}
	return rsp.ManufacturingProcess, nil
}

// GetManufacturingProcessesWithCustomQuery returns a list of `ManufacturingProcess` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetManufacturingProcessesWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.ManufacturingProcessFilter, order *dgclient.ManufacturingProcessOrder, first *int64, offset *int64) ([]*models.ManufacturingProcess, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		ManufacturingProcesses []*models.ManufacturingProcess "json:\"queryManufacturingProcess\" graphql:\"queryManufacturingProcess\""
	}{}
	dr.log.Debugw("get ManufacturingProcesses with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetManufacturingProcessStr)
	}
	return rsp.ManufacturingProcesses, nil
}

// GetAllManufacturingProcessesWithCustomQuery returns a list of all `ManufacturingProcess` objects.
func (dr *DgraphRepository) GetAllManufacturingProcessesWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.ManufacturingProcess, error) {
	return dr.GetManufacturingProcessesWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateManufacturingProcess creates a new `ManufacturingProcess` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateManufacturingProcess(ctx context.Context, input *models.ManufacturingProcess) error {
	dr.log.Debugw("create ManufacturingProcess", []interface{}{}...)
	inputData := dgclient.AddManufacturingProcessInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateManufacturingProcesses(ctx, []*dgclient.AddManufacturingProcessInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create manufacturingProcess").
			Add("manufacturingProcessId", input.ID)
	}
	// save ID from response
	input.ID = &rsp.AddManufacturingProcess.ManufacturingProcess[0].ID
	return nil
}

// CreateManufacturingProcesses creates new `ManufacturingProcess` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateManufacturingProcesses(ctx context.Context, input []*models.ManufacturingProcess) error {
	inputData := make([]*dgclient.AddManufacturingProcessInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddManufacturingProcessInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create ManufacturingProcesses")
	rsp, err := dr.client.CreateManufacturingProcesses(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create manufacturingProcesses")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddManufacturingProcess.ManufacturingProcess[i].ID
	}

	return nil
}

// UpdateManufacturingProcess updates an existing `ManufacturingProcess` object.
func (dr *DgraphRepository) UpdateManufacturingProcess(ctx context.Context, input *models.ManufacturingProcess) error {
	dr.log.Debugw("update ManufacturingProcess", []interface{}{"id", *input.ID}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID")
	}
	patch := &dgclient.ManufacturingProcessPatch{}
	dr.copyORMStruct(input, patch)
	inputData := dgclient.UpdateManufacturingProcessInput{
		Filter: dgclient.ManufacturingProcessFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateManufacturingProcesses(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update manufacturingProcess").
			Add("manufacturingProcessId", *input.ID)
	}
	return nil
}

// DeleteManufacturingProcess deletes a `ManufacturingProcess` object.
func (dr *DgraphRepository) DeleteManufacturingProcess(ctx context.Context, id *string) error {
	delFilter := dgclient.ManufacturingProcessFilter{}
	if id == nil {
		return NewRepoError("must specify id")
	}
	delFilter.ID = []string{*id}

	dr.log.Debugw("delete ManufacturingProcess")
	if _, err := dr.client.DeleteManufacturingProcesses(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteManufacturingProcessStr).
			Add("manufacturingProcessId", id)
	}
	return nil
}

// DeleteAllManufacturingProcesses deletes all `ManufacturingProcess` objects.
func (dr *DgraphRepository) DeleteAllManufacturingProcesses(ctx context.Context) error {
	delFilter := dgclient.ManufacturingProcessFilter{}
	dr.log.Debugw("delete all ManufacturingProcess")
	if _, err := dr.client.DeleteManufacturingProcesses(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteManufacturingProcessStr)
	}
	return nil
}

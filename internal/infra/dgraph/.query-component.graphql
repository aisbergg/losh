fragment ComponentFragment on Component {
	id
	xid
	name
	description
	version
	createdAt
	releases {
		id
		name
	}
	isLatest
	repository {
		id
		name
	}
	license {
		id
		xid
	}
	additionalLicenses {
		id
		xid
	}
	licensor {...UserOrGroupBasicFragment}
	documentationLanguage
	technologyReadinessLevel
	documentationReadinessLevel
	attestation
	publication
	compliesWith {
		id
		name
	}
	cpcPatentClass
	tsdc {
		id
		name
	}
	components {
		id
		name
	}
	software {id}
	image {
		id
		path
	}
	readme {
		id
		path
	}
	contributionGuide {
		id
		path
	}
	bom {
		id
		path
	}
	manufacturingInstructions {
		id
		path
	}
	userManual {
		id
		path
	}
	product {
		id
		name
	}
	usedIn {
		id
		name
	}
	source {
		id
		path
	}
	export {
		id
		path
	}
	auxiliary {
		id
		path
	}
	organization {
		id
		name
	}
	mass
	outerDimensions {...OuterDimensionsFragment}
	material {
		id
		name
	}
	manufacturingProcess {
		id
		name
	}
	productionMetadata {...KeyValueFragment}
}

# ------------------------------------------------------------------------------

query GetComponentByID($id: ID!) {
	getComponent(id: $id) {...ComponentFragment}
}

query GetComponentByXid($xid: String!) {
	getComponent(xid: $xid) {...ComponentFragment}
}

query GetComponentID($xid: String!) {
	getComponent(xid: $xid) {id}
}

query GetComponents($getFilter: ComponentFilter, $order: ComponentOrder, $first: Int, $offset: Int) {
	queryComponent(filter: $getFilter, order: $order, first: $first, offset: $offset) {...ComponentFragment}
	aggregateComponent(filter: $getFilter) {count}
}

mutation CreateComponents($createInput: [AddComponentInput!]!) {
	addComponent(input: $createInput, upsert: true) {component {id}}
}

mutation UpdateComponents($updateInput: UpdateComponentInput!) {
	updateComponent(input: $updateInput) {component {id}}
}

mutation DeleteComponents($delFilter: ComponentFilter!) {
	deleteComponent(filter: $delFilter) {component {id}}
}

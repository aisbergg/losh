// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ RepositoryRepository = (*DgraphRepository)(nil)

// RepositoryRepository is an interface for getting and saving `Repository` objects to a repository.
type RepositoryRepository interface {
	GetRepository(ctx context.Context, id, xid *string) (*models.Repository, error)
	GetRepositories(ctx context.Context, filter *dgclient.RepositoryFilter, order *dgclient.RepositoryOrder, first *int64, offset *int64) ([]*models.Repository, int64, error)
	GetAllRepositories(ctx context.Context) ([]*models.Repository, int64, error)
	CreateRepository(ctx context.Context, input *models.Repository) error
	CreateRepositories(ctx context.Context, input []*models.Repository) error
	UpdateRepository(ctx context.Context, input *models.Repository) error
	DeleteRepository(ctx context.Context, id, xid *string) error
	DeleteAllRepositories(ctx context.Context) error
}

var (
	errGetRepositoryStr    = "failed to get repository(s)"
	errSaveRepositoryStr   = "failed to save repository(s)"
	errDeleteRepositoryStr = "failed to delete repository(s)"
)

// GetRepository returns a `Repository` object by its ID.
func (dr *DgraphRepository) GetRepository(ctx context.Context, id, xid *string) (*models.Repository, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get Repository", "id", *id)
		rsp, err := dr.client.GetRepositoryByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetRepositoryStr).Add("repositoryId", id)
		}
		rspData = rsp.GetRepository
	} else if xid != nil {
		dr.log.Debugw("get Repository", "xid", *xid)
		rsp, err := dr.client.GetRepositoryByXid(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetRepositoryStr).Add("repositoryXid", xid)
		}
		rspData = rsp.GetRepository
	} else {
		panic("must specify id or xid")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.Repository{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetRepositoryID returns the ID of an existing `Repository` object.
func (dr *DgraphRepository) GetRepositoryID(ctx context.Context, xid *string) (*string, error) {
	if xid != nil {
		dr.log.Debugw("get Repository", "xid", *xid)
		rsp, err := dr.client.GetRepositoryID(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetRepositoryStr).Add("repositoryXid", xid)
		}
		if rsp.GetRepository == nil {
			return nil, nil
		}
		return &rsp.GetRepository.ID, nil
	}

	panic("must specify xid")
}

// GetRepositories returns a list of `Repository` objects matching the filter criteria.
func (dr *DgraphRepository) GetRepositories(ctx context.Context, filter *dgclient.RepositoryFilter, order *dgclient.RepositoryOrder, first *int64, offset *int64) ([]*models.Repository, int64, error) {
	dr.log.Debugw("get Repositories")
	rsp, err := dr.client.GetRepositories(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetRepositoryStr)
	}
	ret := make([]*models.Repository, 0, len(rsp.QueryRepository))
	if err = dr.copier.CopyTo(rsp.QueryRepository, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateRepository.Count, nil
}

// GetAllRepositories returns a list of all `Repository` objects.
func (dr *DgraphRepository) GetAllRepositories(ctx context.Context) ([]*models.Repository, int64, error) {
	return dr.GetRepositories(ctx, nil, nil, nil, nil)
}

// GetRepositoryWithCustomQuery returns a `Repository` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetRepositoryWithCustomQuery(ctx context.Context, operationName, query string, id, xid *string) (*models.Repository, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}
	rsp := struct {
		Repository *models.Repository "json:\"getRepository\" graphql:\"getRepository\""
	}{}
	dr.log.Debugw("get Repository with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetRepositoryStr)
	}
	return rsp.Repository, nil
}

// GetRepositoriesWithCustomQuery returns a list of `Repository` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetRepositoriesWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.RepositoryFilter, order *dgclient.RepositoryOrder, first *int64, offset *int64) ([]*models.Repository, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		Repositories []*models.Repository "json:\"queryRepository\" graphql:\"queryRepository\""
	}{}
	dr.log.Debugw("get Repositories with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetRepositoryStr)
	}
	return rsp.Repositories, nil
}

// GetAllRepositoriesWithCustomQuery returns a list of all `Repository` objects.
func (dr *DgraphRepository) GetAllRepositoriesWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.Repository, error) {
	return dr.GetRepositoriesWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateRepository creates a new `Repository` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateRepository(ctx context.Context, input *models.Repository) error {
	dr.log.Debugw("create Repository", []interface{}{"xid", *input.Xid}...)
	inputData := dgclient.AddRepositoryInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateRepositories(ctx, []*dgclient.AddRepositoryInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create repository").
			Add("repositoryId", input.ID).Add("repositoryXid", input.Xid)
	}
	// save ID from response
	input.ID = &rsp.AddRepository.Repository[0].ID
	return nil
}

// CreateRepositories creates new `Repository` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateRepositories(ctx context.Context, input []*models.Repository) error {
	inputData := make([]*dgclient.AddRepositoryInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddRepositoryInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create Repositories")
	rsp, err := dr.client.CreateRepositories(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create repositories")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddRepository.Repository[i].ID
	}

	return nil
}

// UpdateRepository updates an existing `Repository` object.
func (dr *DgraphRepository) UpdateRepository(ctx context.Context, input *models.Repository) error {
	dr.log.Debugw("update Repository", []interface{}{"id", *input.ID, "xid", *input.Xid}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID").Add("repositoryXid", input.Xid)
	}
	patch := &dgclient.RepositoryPatch{}
	dr.copyORMStruct(input, patch)
	patch.Xid = nil
	inputData := dgclient.UpdateRepositoryInput{
		Filter: dgclient.RepositoryFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateRepositories(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update repository").
			Add("repositoryId", *input.ID).Add("repositoryXid", input.Xid)
	}
	return nil
}

// DeleteRepository deletes a `Repository` object.
func (dr *DgraphRepository) DeleteRepository(ctx context.Context, id, xid *string) error {
	delFilter := dgclient.RepositoryFilter{}
	if id != nil && xid != nil {
		return NewRepoError("must specify either id or xid")
	}
	if id != nil {
		delFilter.ID = []string{*id}
	}
	if xid != nil {
		delFilter.Xid = &dgclient.StringHashFilter{Eq: xid}
	}

	dr.log.Debugw("delete Repository")
	if _, err := dr.client.DeleteRepositories(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteRepositoryStr).
			Add("repositoryId", id).Add("repositoryXid", xid)
	}
	return nil
}

// DeleteAllRepositories deletes all `Repository` objects.
func (dr *DgraphRepository) DeleteAllRepositories(ctx context.Context) error {
	delFilter := dgclient.RepositoryFilter{}
	dr.log.Debugw("delete all Repository")
	if _, err := dr.client.DeleteRepositories(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteRepositoryStr)
	}
	return nil
}

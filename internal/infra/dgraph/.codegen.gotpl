// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ {{ .name }}Repository = (*DgraphRepository)(nil)

// {{ .name }}Repository is an interface for getting and saving `{{ .name }}` objects to a repository.
type {{ .name }}Repository interface {
	Get{{ .name }}(ctx context.Context, id{{ if .extraIds }}, {{ .extraIds | join ", " }}{{ end }} *string) (*models.{{ .name }}, error)
	Get{{ .namePlural }}(ctx context.Context, filter *dgclient.{{ .name }}Filter, order *dgclient.{{ .name }}Order, first *int64, offset *int64) ([]*models.{{ .name }}, int64, error)
	GetAll{{ .namePlural }}(ctx context.Context) ([]*models.{{ .name }}, int64, error)
	Create{{ .name }}(ctx context.Context, input *models.{{ .name }}) error
	Create{{ .namePlural }}(ctx context.Context, input []*models.{{ .name }}) error
	Update{{ .name }}(ctx context.Context, input *models.{{ .name }}) error
	Delete{{ .name }}(ctx context.Context, id{{ if .extraIds }}, {{ .extraIds | join ", " }}{{ end }} *string) error
	DeleteAll{{ .namePlural }}(ctx context.Context) error
}

var (
	errGet{{ .name }}Str    = "failed to get {{ (snakecase .name) | replace "_" " " }}(s)"
	errSave{{ .name }}Str   = "failed to save {{ (snakecase .name) | replace "_" " " }}(s)"
	errDelete{{ .name }}Str = "failed to delete {{ (snakecase .name) | replace "_" " " }}(s)"
)

// Get{{ .name }} returns a `{{ .name }}` object by its ID.
func (dr *DgraphRepository) Get{{ .name }}(ctx context.Context, id{{ if .extraIds }}, {{ .extraIds | join ", " }}{{ end }} *string) (*models.{{ .name }}, error) {
    var rspData interface{}
	if id != nil{
        dr.log.Debugw("get {{ .name }}", "id", *id)
		rsp, err := dr.client.Get{{ .name }}ByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGet{{ .name }}Str).Add("{{ untitle .name }}Id", id)
		}
		rspData = rsp.Get{{ .name }}
	}{{ range .extraIds }}else if {{ . }} != nil {
        dr.log.Debugw("get {{ $.name }}", "{{ . }}", *{{ . }})
		rsp, err := dr.client.Get{{ $.name }}By{{ title . }}(ctx, *{{ . }})
		if err != nil {
			return nil, WrapRepoError(err, errGet{{ $.name }}Str).Add("{{ untitle $.name }}{{ title . }}", {{ . }})
		}
		rspData = rsp.Get{{ $.name }}
	}{{ end }} else {
        panic("must specify id{{ range .extraIds }} or {{ . }}{{ end }}")
    }

	if rspData == nil {
		return nil, nil
	}
    ret := &models.{{ .name }}{}
    if err := dr.copier.CopyTo(rspData, ret) ;err != nil {
        panic(err)
    }
    return ret, nil
}

{{ if .extraIds }}
// Get{{ .name }}ID returns the ID of an existing `{{ .name }}` object.
func (dr *DgraphRepository) Get{{ .name }}ID(ctx context.Context, {{ .extraIds | join ", " }} *string) (*string, error) {
	{{- range .extraIds }}
    if {{ . }} != nil {
        dr.log.Debugw("get {{ $.name }}", "{{ . }}", *{{ . }})
		rsp, err := dr.client.Get{{ $.name }}ID(ctx, *{{ . }})
		if err != nil {
			return nil, WrapRepoError(err, errGet{{ $.name }}Str).Add("{{ untitle $.name }}{{ title . }}", {{ . }})
		}
        if rsp.Get{{ $.name }} == nil {
			return nil, nil
		}
		return &rsp.Get{{ $.name }}.ID, nil
	}
	{{ end }}

	panic("must specify {{ .extraIds | join " or " }}")
}
{{ end }}

// Get{{ .namePlural }} returns a list of `{{ .name }}` objects matching the filter criteria.
func (dr *DgraphRepository) Get{{ .namePlural }}(ctx context.Context, filter *dgclient.{{ .name }}Filter, order *dgclient.{{ .name }}Order, first *int64, offset *int64) ([]*models.{{ .name }}, int64, error) {
	dr.log.Debugw("get {{ .namePlural }}")
    rsp, err := dr.client.Get{{ .namePlural }}(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGet{{ .name }}Str)
	}
    ret := make([]*models.{{ .name }}, 0, len(rsp.Query{{ .name }}))
	if err = dr.copier.CopyTo(rsp.Query{{ $.name }}, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.Aggregate{{ $.name }}.Count, nil
}

// GetAll{{ .namePlural }} returns a list of all `{{ .name }}` objects.
func (dr *DgraphRepository) GetAll{{ .namePlural }}(ctx context.Context) ([]*models.{{ .name }}, int64, error) {
	return dr.Get{{ .namePlural }}(ctx, nil, nil, nil, nil)
}

// Get{{ .name }}WithCustomQuery returns a `{{ .name }}` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) Get{{ .name }}WithCustomQuery(ctx context.Context, operationName, query string, id{{ if .extraIds }}, {{ .extraIds | join ", " }}{{ end }} *string) (*models.{{ .name }}, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id":  id,
			{{- if .extraIds }}
			{{- range .extraIds }}
			"{{ . }}": {{ . }},
			{{- end }}
			{{- end }}
		},
	}
	rsp := struct {
		{{ .name }} *models.{{ .name }} "json:\"get{{ .name }}\" graphql:\"get{{ .name }}\""
	}{}
	dr.log.Debugw("get {{ .name }} with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGet{{ .name }}Str)
	}
	return rsp.{{ .name }}, nil
}

// Get{{ .namePlural }}WithCustomQuery returns a list of `{{ .name }}` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) Get{{ .namePlural }}WithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.{{ .name }}Filter, order *dgclient.{{ .name }}Order, first *int64, offset *int64) ([]*models.{{ .name }}, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		{{ .namePlural }} []*models.{{ .name }} "json:\"query{{ .name }}\" graphql:\"query{{ .name }}\""
	}{}
	dr.log.Debugw("get {{ .namePlural }} with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGet{{ .name }}Str)
	}
	return rsp.{{ .namePlural }}, nil
}

// GetAll{{ .namePlural }}WithCustomQuery returns a list of all `{{ .name }}` objects.
func (dr *DgraphRepository) GetAll{{ .namePlural }}WithCustomQuery(ctx context.Context, operationName, query string) ([]*models.{{ .name }}, error) {
	return dr.Get{{ .namePlural }}WithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// Create{{ .name }} creates a new `{{ .name }}` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) Create{{ .name }}(ctx context.Context, input *models.{{ .name }}) error {
	dr.log.Debugw("create {{ .name }}", []interface{}{ {{ range .extraIds }}"{{ untitle . }}", *input.{{ title . }}{{ end }}}...)
	inputData := dgclient.Add{{ .name }}Input{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.Create{{ .namePlural }}(ctx, []*dgclient.Add{{ .name }}Input{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create {{ untitle .name }}").
			Add("{{ untitle .name }}Id", input.ID){{ if .extraIds }}{{ range .extraIds }}.Add("{{ untitle $.name }}{{ title . }}", input.{{ title . }}){{ end }}{{ end }}
	}
	// save ID from response
	input.ID = &rsp.Add{{ .name }}.{{ .name }}[0].ID
	return nil
}

// Create{{ .namePlural }} creates new `{{ .name }}` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) Create{{ .namePlural }}(ctx context.Context, input []*models.{{ .name }}) error {
	inputData := make([]*dgclient.Add{{ .name }}Input, 0, len(input))
	for _, v := range input {
		iv := &dgclient.Add{{ .name }}Input{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create {{ .namePlural }}")
	rsp, err := dr.client.Create{{ .namePlural }}(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create {{ untitle .namePlural }}")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.Add{{ .name }}.{{ .name }}[i].ID
	}

	return nil
}

// Update{{ .name }} updates an existing `{{ .name }}` object.
func (dr *DgraphRepository) Update{{ .name }}(ctx context.Context, input *models.{{ .name }}) error {
	dr.log.Debugw("update {{ .name }}", []interface{}{"id", *input.ID{{ range .extraIds }}, "{{ untitle . }}", *input.{{ title . }}{{ end }}}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID"){{ if .extraIds }}{{ range .extraIds }}.Add("{{ untitle $.name }}{{ title . }}", input.{{ title . }}){{ end }}{{ end }}
	}
	patch := &dgclient.{{ .name }}Patch{}
	dr.copyORMStruct(input, patch)
	{{- range .extraIds }}
	patch.{{ title . }} = nil
	{{- end }}
	inputData := dgclient.Update{{ .name }}Input{
		Filter: dgclient.{{ .name }}Filter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.Update{{ .namePlural }}(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update {{ untitle .name }}").
			Add("{{ untitle .name }}Id", *input.ID){{ if .extraIds }}{{ range .extraIds }}.Add("{{ untitle $.name }}{{ title . }}", input.{{ title . }}){{ end }}{{ end }}
	}
	return nil
}

// Delete{{ .name }} deletes a `{{ .name }}` object.
func (dr *DgraphRepository) Delete{{ .name }}(ctx context.Context, id{{ if .extraIds }}, {{ .extraIds | join ", " }}{{ end }} *string) error {
	delFilter := dgclient.{{ .name }}Filter{}
	{{- if .extraIds }}
	if id != nil{{ range .extraIds }} && {{ . }} != nil{{ end }} {
		return NewRepoError("must specify either id{{ range .extraIds }} or {{ . }}{{ end }}")
	}
	if id != nil {
		delFilter.ID = []string{*id}
	}
	{{- range .extraIds }}
	if {{ . }} != nil {
		delFilter.{{ title . }} = &dgclient.{{ $.filter }}{Eq: {{ . }}}
	}
	{{- end }}
	{{- else }}
	if id == nil {
		return NewRepoError("must specify id")
	}
	delFilter.ID = []string{*id}
	{{- end }}

	dr.log.Debugw("delete {{ .name }}")
	if _, err := dr.client.Delete{{ .namePlural }}(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDelete{{ .name }}Str).
			Add("{{ untitle .name }}Id", id){{ if .extraIds }}{{ range .extraIds }}.Add("{{ untitle $.name }}{{ title . }}", {{ . }}){{ end }}{{ end }}
	}
	return nil
}

// DeleteAll{{ .namePlural }} deletes all `{{ .name }}` objects.
func (dr *DgraphRepository) DeleteAll{{ .namePlural }}(ctx context.Context) error {
	delFilter := dgclient.{{ .name }}Filter{}
	dr.log.Debugw("delete all {{ .name }}")
	if _, err := dr.client.Delete{{ .namePlural }}(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDelete{{ .name }}Str)
	}
	return nil
}

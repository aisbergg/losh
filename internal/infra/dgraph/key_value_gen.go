// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ KeyValueRepository = (*DgraphRepository)(nil)

// KeyValueRepository is an interface for getting and saving `KeyValue` objects to a repository.
type KeyValueRepository interface {
	GetKeyValue(ctx context.Context, id *string) (*models.KeyValue, error)
	GetKeyValues(ctx context.Context, filter *dgclient.KeyValueFilter, order *dgclient.KeyValueOrder, first *int64, offset *int64) ([]*models.KeyValue, int64, error)
	GetAllKeyValues(ctx context.Context) ([]*models.KeyValue, int64, error)
	CreateKeyValue(ctx context.Context, input *models.KeyValue) error
	CreateKeyValues(ctx context.Context, input []*models.KeyValue) error
	UpdateKeyValue(ctx context.Context, input *models.KeyValue) error
	DeleteKeyValue(ctx context.Context, id *string) error
	DeleteAllKeyValues(ctx context.Context) error
}

var (
	errGetKeyValueStr    = "failed to get key value(s)"
	errSaveKeyValueStr   = "failed to save key value(s)"
	errDeleteKeyValueStr = "failed to delete key value(s)"
)

// GetKeyValue returns a `KeyValue` object by its ID.
func (dr *DgraphRepository) GetKeyValue(ctx context.Context, id *string) (*models.KeyValue, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get KeyValue", "id", *id)
		rsp, err := dr.client.GetKeyValueByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetKeyValueStr).Add("keyValueId", id)
		}
		rspData = rsp.GetKeyValue
	} else {
		panic("must specify id")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.KeyValue{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetKeyValues returns a list of `KeyValue` objects matching the filter criteria.
func (dr *DgraphRepository) GetKeyValues(ctx context.Context, filter *dgclient.KeyValueFilter, order *dgclient.KeyValueOrder, first *int64, offset *int64) ([]*models.KeyValue, int64, error) {
	dr.log.Debugw("get KeyValues")
	rsp, err := dr.client.GetKeyValues(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetKeyValueStr)
	}
	ret := make([]*models.KeyValue, 0, len(rsp.QueryKeyValue))
	if err = dr.copier.CopyTo(rsp.QueryKeyValue, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateKeyValue.Count, nil
}

// GetAllKeyValues returns a list of all `KeyValue` objects.
func (dr *DgraphRepository) GetAllKeyValues(ctx context.Context) ([]*models.KeyValue, int64, error) {
	return dr.GetKeyValues(ctx, nil, nil, nil, nil)
}

// GetKeyValueWithCustomQuery returns a `KeyValue` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetKeyValueWithCustomQuery(ctx context.Context, operationName, query string, id *string) (*models.KeyValue, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id": id,
		},
	}
	rsp := struct {
		KeyValue *models.KeyValue "json:\"getKeyValue\" graphql:\"getKeyValue\""
	}{}
	dr.log.Debugw("get KeyValue with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetKeyValueStr)
	}
	return rsp.KeyValue, nil
}

// GetKeyValuesWithCustomQuery returns a list of `KeyValue` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetKeyValuesWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.KeyValueFilter, order *dgclient.KeyValueOrder, first *int64, offset *int64) ([]*models.KeyValue, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		KeyValues []*models.KeyValue "json:\"queryKeyValue\" graphql:\"queryKeyValue\""
	}{}
	dr.log.Debugw("get KeyValues with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetKeyValueStr)
	}
	return rsp.KeyValues, nil
}

// GetAllKeyValuesWithCustomQuery returns a list of all `KeyValue` objects.
func (dr *DgraphRepository) GetAllKeyValuesWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.KeyValue, error) {
	return dr.GetKeyValuesWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateKeyValue creates a new `KeyValue` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateKeyValue(ctx context.Context, input *models.KeyValue) error {
	dr.log.Debugw("create KeyValue", []interface{}{}...)
	inputData := dgclient.AddKeyValueInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateKeyValues(ctx, []*dgclient.AddKeyValueInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create keyValue").
			Add("keyValueId", input.ID)
	}
	// save ID from response
	input.ID = &rsp.AddKeyValue.KeyValue[0].ID
	return nil
}

// CreateKeyValues creates new `KeyValue` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateKeyValues(ctx context.Context, input []*models.KeyValue) error {
	inputData := make([]*dgclient.AddKeyValueInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddKeyValueInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create KeyValues")
	rsp, err := dr.client.CreateKeyValues(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create keyValues")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddKeyValue.KeyValue[i].ID
	}

	return nil
}

// UpdateKeyValue updates an existing `KeyValue` object.
func (dr *DgraphRepository) UpdateKeyValue(ctx context.Context, input *models.KeyValue) error {
	dr.log.Debugw("update KeyValue", []interface{}{"id", *input.ID}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID")
	}
	patch := &dgclient.KeyValuePatch{}
	dr.copyORMStruct(input, patch)
	inputData := dgclient.UpdateKeyValueInput{
		Filter: dgclient.KeyValueFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateKeyValues(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update keyValue").
			Add("keyValueId", *input.ID)
	}
	return nil
}

// DeleteKeyValue deletes a `KeyValue` object.
func (dr *DgraphRepository) DeleteKeyValue(ctx context.Context, id *string) error {
	delFilter := dgclient.KeyValueFilter{}
	if id == nil {
		return NewRepoError("must specify id")
	}
	delFilter.ID = []string{*id}

	dr.log.Debugw("delete KeyValue")
	if _, err := dr.client.DeleteKeyValues(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteKeyValueStr).
			Add("keyValueId", id)
	}
	return nil
}

// DeleteAllKeyValues deletes all `KeyValue` objects.
func (dr *DgraphRepository) DeleteAllKeyValues(ctx context.Context) error {
	delFilter := dgclient.KeyValueFilter{}
	dr.log.Debugw("delete all KeyValue")
	if _, err := dr.client.DeleteKeyValues(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteKeyValueStr)
	}
	return nil
}

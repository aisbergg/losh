// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ CategoryRepository = (*DgraphRepository)(nil)

// CategoryRepository is an interface for getting and saving `Category` objects to a repository.
type CategoryRepository interface {
	GetCategory(ctx context.Context, id, xid *string) (*models.Category, error)
	GetCategories(ctx context.Context, filter *dgclient.CategoryFilter, order *dgclient.CategoryOrder, first *int64, offset *int64) ([]*models.Category, int64, error)
	GetAllCategories(ctx context.Context) ([]*models.Category, int64, error)
	CreateCategory(ctx context.Context, input *models.Category) error
	CreateCategories(ctx context.Context, input []*models.Category) error
	UpdateCategory(ctx context.Context, input *models.Category) error
	DeleteCategory(ctx context.Context, id, xid *string) error
	DeleteAllCategories(ctx context.Context) error
}

var (
	errGetCategoryStr    = "failed to get category(s)"
	errSaveCategoryStr   = "failed to save category(s)"
	errDeleteCategoryStr = "failed to delete category(s)"
)

// GetCategory returns a `Category` object by its ID.
func (dr *DgraphRepository) GetCategory(ctx context.Context, id, xid *string) (*models.Category, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get Category", "id", *id)
		rsp, err := dr.client.GetCategoryByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetCategoryStr).Add("categoryId", id)
		}
		rspData = rsp.GetCategory
	} else if xid != nil {
		dr.log.Debugw("get Category", "xid", *xid)
		rsp, err := dr.client.GetCategoryByXid(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetCategoryStr).Add("categoryXid", xid)
		}
		rspData = rsp.GetCategory
	} else {
		panic("must specify id or xid")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.Category{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetCategoryID returns the ID of an existing `Category` object.
func (dr *DgraphRepository) GetCategoryID(ctx context.Context, xid *string) (*string, error) {
	if xid != nil {
		dr.log.Debugw("get Category", "xid", *xid)
		rsp, err := dr.client.GetCategoryID(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetCategoryStr).Add("categoryXid", xid)
		}
		if rsp.GetCategory == nil {
			return nil, nil
		}
		return &rsp.GetCategory.ID, nil
	}

	panic("must specify xid")
}

// GetCategories returns a list of `Category` objects matching the filter criteria.
func (dr *DgraphRepository) GetCategories(ctx context.Context, filter *dgclient.CategoryFilter, order *dgclient.CategoryOrder, first *int64, offset *int64) ([]*models.Category, int64, error) {
	dr.log.Debugw("get Categories")
	rsp, err := dr.client.GetCategories(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetCategoryStr)
	}
	ret := make([]*models.Category, 0, len(rsp.QueryCategory))
	if err = dr.copier.CopyTo(rsp.QueryCategory, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateCategory.Count, nil
}

// GetAllCategories returns a list of all `Category` objects.
func (dr *DgraphRepository) GetAllCategories(ctx context.Context) ([]*models.Category, int64, error) {
	return dr.GetCategories(ctx, nil, nil, nil, nil)
}

// GetCategoryWithCustomQuery returns a `Category` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetCategoryWithCustomQuery(ctx context.Context, operationName, query string, id, xid *string) (*models.Category, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}
	rsp := struct {
		Category *models.Category "json:\"getCategory\" graphql:\"getCategory\""
	}{}
	dr.log.Debugw("get Category with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetCategoryStr)
	}
	return rsp.Category, nil
}

// GetCategoriesWithCustomQuery returns a list of `Category` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetCategoriesWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.CategoryFilter, order *dgclient.CategoryOrder, first *int64, offset *int64) ([]*models.Category, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		Categories []*models.Category "json:\"queryCategory\" graphql:\"queryCategory\""
	}{}
	dr.log.Debugw("get Categories with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetCategoryStr)
	}
	return rsp.Categories, nil
}

// GetAllCategoriesWithCustomQuery returns a list of all `Category` objects.
func (dr *DgraphRepository) GetAllCategoriesWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.Category, error) {
	return dr.GetCategoriesWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateCategory creates a new `Category` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateCategory(ctx context.Context, input *models.Category) error {
	dr.log.Debugw("create Category", []interface{}{"xid", *input.Xid}...)
	inputData := dgclient.AddCategoryInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateCategories(ctx, []*dgclient.AddCategoryInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create category").
			Add("categoryId", input.ID).Add("categoryXid", input.Xid)
	}
	// save ID from response
	input.ID = &rsp.AddCategory.Category[0].ID
	return nil
}

// CreateCategories creates new `Category` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateCategories(ctx context.Context, input []*models.Category) error {
	inputData := make([]*dgclient.AddCategoryInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddCategoryInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create Categories")
	rsp, err := dr.client.CreateCategories(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create categories")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddCategory.Category[i].ID
	}

	return nil
}

// UpdateCategory updates an existing `Category` object.
func (dr *DgraphRepository) UpdateCategory(ctx context.Context, input *models.Category) error {
	dr.log.Debugw("update Category", []interface{}{"id", *input.ID, "xid", *input.Xid}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID").Add("categoryXid", input.Xid)
	}
	patch := &dgclient.CategoryPatch{}
	dr.copyORMStruct(input, patch)
	patch.Xid = nil
	inputData := dgclient.UpdateCategoryInput{
		Filter: dgclient.CategoryFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateCategories(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update category").
			Add("categoryId", *input.ID).Add("categoryXid", input.Xid)
	}
	return nil
}

// DeleteCategory deletes a `Category` object.
func (dr *DgraphRepository) DeleteCategory(ctx context.Context, id, xid *string) error {
	delFilter := dgclient.CategoryFilter{}
	if id != nil && xid != nil {
		return NewRepoError("must specify either id or xid")
	}
	if id != nil {
		delFilter.ID = []string{*id}
	}
	if xid != nil {
		delFilter.Xid = &dgclient.StringHashFilter{Eq: xid}
	}

	dr.log.Debugw("delete Category")
	if _, err := dr.client.DeleteCategories(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteCategoryStr).
			Add("categoryId", id).Add("categoryXid", xid)
	}
	return nil
}

// DeleteAllCategories deletes all `Category` objects.
func (dr *DgraphRepository) DeleteAllCategories(ctx context.Context) error {
	delFilter := dgclient.CategoryFilter{}
	dr.log.Debugw("delete all Category")
	if _, err := dr.client.DeleteCategories(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteCategoryStr)
	}
	return nil
}

// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ TechnicalStandardRepository = (*DgraphRepository)(nil)

// TechnicalStandardRepository is an interface for getting and saving `TechnicalStandard` objects to a repository.
type TechnicalStandardRepository interface {
	GetTechnicalStandard(ctx context.Context, id, xid *string) (*models.TechnicalStandard, error)
	GetTechnicalStandards(ctx context.Context, filter *dgclient.TechnicalStandardFilter, order *dgclient.TechnicalStandardOrder, first *int64, offset *int64) ([]*models.TechnicalStandard, int64, error)
	GetAllTechnicalStandards(ctx context.Context) ([]*models.TechnicalStandard, int64, error)
	CreateTechnicalStandard(ctx context.Context, input *models.TechnicalStandard) error
	CreateTechnicalStandards(ctx context.Context, input []*models.TechnicalStandard) error
	UpdateTechnicalStandard(ctx context.Context, input *models.TechnicalStandard) error
	DeleteTechnicalStandard(ctx context.Context, id, xid *string) error
	DeleteAllTechnicalStandards(ctx context.Context) error
}

var (
	errGetTechnicalStandardStr    = "failed to get technical standard(s)"
	errSaveTechnicalStandardStr   = "failed to save technical standard(s)"
	errDeleteTechnicalStandardStr = "failed to delete technical standard(s)"
)

// GetTechnicalStandard returns a `TechnicalStandard` object by its ID.
func (dr *DgraphRepository) GetTechnicalStandard(ctx context.Context, id, xid *string) (*models.TechnicalStandard, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get TechnicalStandard", "id", *id)
		rsp, err := dr.client.GetTechnicalStandardByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetTechnicalStandardStr).Add("technicalStandardId", id)
		}
		rspData = rsp.GetTechnicalStandard
	} else if xid != nil {
		dr.log.Debugw("get TechnicalStandard", "xid", *xid)
		rsp, err := dr.client.GetTechnicalStandardByXid(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetTechnicalStandardStr).Add("technicalStandardXid", xid)
		}
		rspData = rsp.GetTechnicalStandard
	} else {
		panic("must specify id or xid")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.TechnicalStandard{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetTechnicalStandardID returns the ID of an existing `TechnicalStandard` object.
func (dr *DgraphRepository) GetTechnicalStandardID(ctx context.Context, xid *string) (*string, error) {
	if xid != nil {
		dr.log.Debugw("get TechnicalStandard", "xid", *xid)
		rsp, err := dr.client.GetTechnicalStandardID(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetTechnicalStandardStr).Add("technicalStandardXid", xid)
		}
		if rsp.GetTechnicalStandard == nil {
			return nil, nil
		}
		return &rsp.GetTechnicalStandard.ID, nil
	}

	panic("must specify xid")
}

// GetTechnicalStandards returns a list of `TechnicalStandard` objects matching the filter criteria.
func (dr *DgraphRepository) GetTechnicalStandards(ctx context.Context, filter *dgclient.TechnicalStandardFilter, order *dgclient.TechnicalStandardOrder, first *int64, offset *int64) ([]*models.TechnicalStandard, int64, error) {
	dr.log.Debugw("get TechnicalStandards")
	rsp, err := dr.client.GetTechnicalStandards(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetTechnicalStandardStr)
	}
	ret := make([]*models.TechnicalStandard, 0, len(rsp.QueryTechnicalStandard))
	if err = dr.copier.CopyTo(rsp.QueryTechnicalStandard, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateTechnicalStandard.Count, nil
}

// GetAllTechnicalStandards returns a list of all `TechnicalStandard` objects.
func (dr *DgraphRepository) GetAllTechnicalStandards(ctx context.Context) ([]*models.TechnicalStandard, int64, error) {
	return dr.GetTechnicalStandards(ctx, nil, nil, nil, nil)
}

// GetTechnicalStandardWithCustomQuery returns a `TechnicalStandard` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetTechnicalStandardWithCustomQuery(ctx context.Context, operationName, query string, id, xid *string) (*models.TechnicalStandard, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}
	rsp := struct {
		TechnicalStandard *models.TechnicalStandard "json:\"getTechnicalStandard\" graphql:\"getTechnicalStandard\""
	}{}
	dr.log.Debugw("get TechnicalStandard with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetTechnicalStandardStr)
	}
	return rsp.TechnicalStandard, nil
}

// GetTechnicalStandardsWithCustomQuery returns a list of `TechnicalStandard` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetTechnicalStandardsWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.TechnicalStandardFilter, order *dgclient.TechnicalStandardOrder, first *int64, offset *int64) ([]*models.TechnicalStandard, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		TechnicalStandards []*models.TechnicalStandard "json:\"queryTechnicalStandard\" graphql:\"queryTechnicalStandard\""
	}{}
	dr.log.Debugw("get TechnicalStandards with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetTechnicalStandardStr)
	}
	return rsp.TechnicalStandards, nil
}

// GetAllTechnicalStandardsWithCustomQuery returns a list of all `TechnicalStandard` objects.
func (dr *DgraphRepository) GetAllTechnicalStandardsWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.TechnicalStandard, error) {
	return dr.GetTechnicalStandardsWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateTechnicalStandard creates a new `TechnicalStandard` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateTechnicalStandard(ctx context.Context, input *models.TechnicalStandard) error {
	dr.log.Debugw("create TechnicalStandard", []interface{}{"xid", *input.Xid}...)
	inputData := dgclient.AddTechnicalStandardInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateTechnicalStandards(ctx, []*dgclient.AddTechnicalStandardInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create technicalStandard").
			Add("technicalStandardId", input.ID).Add("technicalStandardXid", input.Xid)
	}
	// save ID from response
	input.ID = &rsp.AddTechnicalStandard.TechnicalStandard[0].ID
	return nil
}

// CreateTechnicalStandards creates new `TechnicalStandard` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateTechnicalStandards(ctx context.Context, input []*models.TechnicalStandard) error {
	inputData := make([]*dgclient.AddTechnicalStandardInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddTechnicalStandardInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create TechnicalStandards")
	rsp, err := dr.client.CreateTechnicalStandards(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create technicalStandards")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddTechnicalStandard.TechnicalStandard[i].ID
	}

	return nil
}

// UpdateTechnicalStandard updates an existing `TechnicalStandard` object.
func (dr *DgraphRepository) UpdateTechnicalStandard(ctx context.Context, input *models.TechnicalStandard) error {
	dr.log.Debugw("update TechnicalStandard", []interface{}{"id", *input.ID, "xid", *input.Xid}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID").Add("technicalStandardXid", input.Xid)
	}
	patch := &dgclient.TechnicalStandardPatch{}
	dr.copyORMStruct(input, patch)
	patch.Xid = nil
	inputData := dgclient.UpdateTechnicalStandardInput{
		Filter: dgclient.TechnicalStandardFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateTechnicalStandards(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update technicalStandard").
			Add("technicalStandardId", *input.ID).Add("technicalStandardXid", input.Xid)
	}
	return nil
}

// DeleteTechnicalStandard deletes a `TechnicalStandard` object.
func (dr *DgraphRepository) DeleteTechnicalStandard(ctx context.Context, id, xid *string) error {
	delFilter := dgclient.TechnicalStandardFilter{}
	if id != nil && xid != nil {
		return NewRepoError("must specify either id or xid")
	}
	if id != nil {
		delFilter.ID = []string{*id}
	}
	if xid != nil {
		delFilter.Xid = &dgclient.StringHashFilter{Eq: xid}
	}

	dr.log.Debugw("delete TechnicalStandard")
	if _, err := dr.client.DeleteTechnicalStandards(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteTechnicalStandardStr).
			Add("technicalStandardId", id).Add("technicalStandardXid", xid)
	}
	return nil
}

// DeleteAllTechnicalStandards deletes all `TechnicalStandard` objects.
func (dr *DgraphRepository) DeleteAllTechnicalStandards(ctx context.Context) error {
	delFilter := dgclient.TechnicalStandardFilter{}
	dr.log.Debugw("delete all TechnicalStandard")
	if _, err := dr.client.DeleteTechnicalStandards(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteTechnicalStandardStr)
	}
	return nil
}

// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package dgclient

import (
	"context"
	"losh/internal/lib/net/request"
	"time"
)

type DgraphGraphQLClient interface {
	GetCategoryByID(ctx context.Context, id string) (*GetCategoryByID, error)
	GetCategoryByXid(ctx context.Context, xid string) (*GetCategoryByXid, error)
	GetCategoryID(ctx context.Context, xid string) (*GetCategoryID, error)
	GetCategories(ctx context.Context, getFilter *CategoryFilter, order *CategoryOrder, first *int64, offset *int64) (*GetCategories, error)
	CreateCategories(ctx context.Context, createInput []*AddCategoryInput) (*CreateCategories, error)
	UpdateCategories(ctx context.Context, updateInput UpdateCategoryInput) (*UpdateCategories, error)
	DeleteCategories(ctx context.Context, delFilter CategoryFilter) (*DeleteCategories, error)
	GetComponentByID(ctx context.Context, id string) (*GetComponentByID, error)
	GetComponentByXid(ctx context.Context, xid string) (*GetComponentByXid, error)
	GetComponentID(ctx context.Context, xid string) (*GetComponentID, error)
	GetComponents(ctx context.Context, getFilter *ComponentFilter, order *ComponentOrder, first *int64, offset *int64) (*GetComponents, error)
	CreateComponents(ctx context.Context, createInput []*AddComponentInput) (*CreateComponents, error)
	UpdateComponents(ctx context.Context, updateInput UpdateComponentInput) (*UpdateComponents, error)
	DeleteComponents(ctx context.Context, delFilter ComponentFilter) (*DeleteComponents, error)
	GetDatabaseByID(ctx context.Context, id string) (*GetDatabaseByID, error)
	GetDatabases(ctx context.Context, getFilter *DatabaseFilter, order *DatabaseOrder, first *int64, offset *int64) (*GetDatabases, error)
	CreateDatabases(ctx context.Context, createInput []*AddDatabaseInput) (*CreateDatabases, error)
	UpdateDatabases(ctx context.Context, updateInput UpdateDatabaseInput) (*UpdateDatabases, error)
	DeleteDatabases(ctx context.Context, delFilter DatabaseFilter) (*DeleteDatabases, error)
	GetFileByID(ctx context.Context, id string) (*GetFileByID, error)
	GetFileByXid(ctx context.Context, xid string) (*GetFileByXid, error)
	GetFileID(ctx context.Context, xid string) (*GetFileID, error)
	GetFiles(ctx context.Context, getFilter *FileFilter, order *FileOrder, first *int64, offset *int64) (*GetFiles, error)
	CreateFiles(ctx context.Context, createInput []*AddFileInput) (*CreateFiles, error)
	UpdateFiles(ctx context.Context, updateInput UpdateFileInput) (*UpdateFiles, error)
	DeleteFiles(ctx context.Context, delFilter FileFilter) (*DeleteFiles, error)
	GetHostByID(ctx context.Context, id string) (*GetHostByID, error)
	GetHostByDomain(ctx context.Context, domain string) (*GetHostByDomain, error)
	GetHostID(ctx context.Context, domain string) (*GetHostID, error)
	GetHosts(ctx context.Context, getFilter *HostFilter, order *HostOrder, first *int64, offset *int64) (*GetHosts, error)
	CreateHosts(ctx context.Context, createInput []*AddHostInput) (*CreateHosts, error)
	UpdateHosts(ctx context.Context, updateInput UpdateHostInput) (*UpdateHosts, error)
	DeleteHosts(ctx context.Context, delFilter HostFilter) (*DeleteHosts, error)
	GetStringVByID(ctx context.Context, id string) (*GetStringVByID, error)
	GetStringVs(ctx context.Context, getFilter *StringVFilter, order *StringVOrder, first *int64, offset *int64) (*GetStringVs, error)
	CreateStringVs(ctx context.Context, createInput []*AddStringVInput) (*CreateStringVs, error)
	UpdateStringVs(ctx context.Context, updateInput UpdateStringVInput) (*UpdateStringVs, error)
	DeleteStringVs(ctx context.Context, delFilter StringVFilter) (*DeleteStringVs, error)
	GetFloatVByID(ctx context.Context, id string) (*GetFloatVByID, error)
	GetFloatVs(ctx context.Context, getFilter *FloatVFilter, order *FloatVOrder, first *int64, offset *int64) (*GetFloatVs, error)
	CreateFloatVs(ctx context.Context, createInput []*AddFloatVInput) (*CreateFloatVs, error)
	UpdateFloatVs(ctx context.Context, updateInput UpdateFloatVInput) (*UpdateFloatVs, error)
	DeleteFloatVs(ctx context.Context, delFilter FloatVFilter) (*DeleteFloatVs, error)
	GetKeyValueByID(ctx context.Context, id string) (*GetKeyValueByID, error)
	GetKeyValues(ctx context.Context, getFilter *KeyValueFilter, order *KeyValueOrder, first *int64, offset *int64) (*GetKeyValues, error)
	CreateKeyValues(ctx context.Context, createInput []*AddKeyValueInput) (*CreateKeyValues, error)
	UpdateKeyValues(ctx context.Context, updateInput UpdateKeyValueInput) (*UpdateKeyValues, error)
	DeleteKeyValues(ctx context.Context, delFilter KeyValueFilter) (*DeleteKeyValues, error)
	GetLicenseByID(ctx context.Context, id string) (*GetLicenseByID, error)
	GetLicenseByXid(ctx context.Context, xid string) (*GetLicenseByXid, error)
	GetLicenseID(ctx context.Context, xid string) (*GetLicenseID, error)
	GetLicenses(ctx context.Context, getFilter *LicenseFilter, order *LicenseOrder, first *int64, offset *int64) (*GetLicenses, error)
	GetAllLicensesBasic(ctx context.Context) (*GetAllLicensesBasic, error)
	CreateLicenses(ctx context.Context, createInput []*AddLicenseInput) (*CreateLicenses, error)
	UpdateLicenses(ctx context.Context, updateInput UpdateLicenseInput) (*UpdateLicenses, error)
	DeleteLicenses(ctx context.Context, delFilter LicenseFilter) (*DeleteLicenses, error)
	GetManufacturingProcessByID(ctx context.Context, id string) (*GetManufacturingProcessByID, error)
	GetManufacturingProcesses(ctx context.Context, getFilter *ManufacturingProcessFilter, order *ManufacturingProcessOrder, first *int64, offset *int64) (*GetManufacturingProcesses, error)
	CreateManufacturingProcesses(ctx context.Context, createInput []*AddManufacturingProcessInput) (*CreateManufacturingProcesses, error)
	UpdateManufacturingProcesses(ctx context.Context, updateInput UpdateManufacturingProcessInput) (*UpdateManufacturingProcesses, error)
	DeleteManufacturingProcesses(ctx context.Context, delFilter ManufacturingProcessFilter) (*DeleteManufacturingProcesses, error)
	GetMaterialByID(ctx context.Context, id string) (*GetMaterialByID, error)
	GetMaterials(ctx context.Context, getFilter *MaterialFilter, order *MaterialOrder, first *int64, offset *int64) (*GetMaterials, error)
	CreateMaterials(ctx context.Context, createInput []*AddMaterialInput) (*CreateMaterials, error)
	UpdateMaterials(ctx context.Context, updateInput UpdateMaterialInput) (*UpdateMaterials, error)
	DeleteMaterials(ctx context.Context, delFilter MaterialFilter) (*DeleteMaterials, error)
	CheckNode(ctx context.Context, id string) (*CheckNode, error)
	GetNodeDetails(ctx context.Context, id string) (*GetNodeDetails, error)
	GetNodeByID(ctx context.Context, id string) (*GetNodeByID, error)
	GetNodes(ctx context.Context, getFilter *NodeFilter, first *int64, offset *int64) (*GetNodes, error)
	DeleteNodes(ctx context.Context, delFilter NodeFilter) (*DeleteNodes, error)
	GetBoundingBoxDimensionsByID(ctx context.Context, id string) (*GetBoundingBoxDimensionsByID, error)
	GetBoundingBoxDimensionss(ctx context.Context, getFilter *BoundingBoxDimensionsFilter, order *BoundingBoxDimensionsOrder, first *int64, offset *int64) (*GetBoundingBoxDimensionss, error)
	CreateBoundingBoxDimensionss(ctx context.Context, createInput []*AddBoundingBoxDimensionsInput) (*CreateBoundingBoxDimensionss, error)
	UpdateBoundingBoxDimensionss(ctx context.Context, updateInput UpdateBoundingBoxDimensionsInput) (*UpdateBoundingBoxDimensionss, error)
	DeleteBoundingBoxDimensionss(ctx context.Context, delFilter BoundingBoxDimensionsFilter) (*DeleteBoundingBoxDimensionss, error)
	GetOpenSCADDimensionsByID(ctx context.Context, id string) (*GetOpenSCADDimensionsByID, error)
	GetOpenSCADDimensionss(ctx context.Context, getFilter *OpenSCADDimensionsFilter, order *OpenSCADDimensionsOrder, first *int64, offset *int64) (*GetOpenSCADDimensionss, error)
	CreateOpenSCADDimensionss(ctx context.Context, createInput []*AddOpenSCADDimensionsInput) (*CreateOpenSCADDimensionss, error)
	UpdateOpenSCADDimensionss(ctx context.Context, updateInput UpdateOpenSCADDimensionsInput) (*UpdateOpenSCADDimensionss, error)
	DeleteOpenSCADDimensionss(ctx context.Context, delFilter OpenSCADDimensionsFilter) (*DeleteOpenSCADDimensionss, error)
	GetProductByID(ctx context.Context, id string) (*GetProductByID, error)
	GetProductByXid(ctx context.Context, xid string) (*GetProductByXid, error)
	GetProductID(ctx context.Context, xid string) (*GetProductID, error)
	GetProducts(ctx context.Context, getFilter *ProductFilter, order *ProductOrder, first *int64, offset *int64) (*GetProducts, error)
	SearchProducts(ctx context.Context, getFilter *ProductFilter, order *ProductOrder, first *int64, offset *int64) (*SearchProducts, error)
	CreateProducts(ctx context.Context, createInput []*AddProductInput) (*CreateProducts, error)
	UpdateProducts(ctx context.Context, updateInput UpdateProductInput) (*UpdateProducts, error)
	DeleteProducts(ctx context.Context, delFilter ProductFilter) (*DeleteProducts, error)
	GetRepositoryByID(ctx context.Context, id string) (*GetRepositoryByID, error)
	GetRepositoryByXid(ctx context.Context, xid string) (*GetRepositoryByXid, error)
	GetRepositoryID(ctx context.Context, xid string) (*GetRepositoryID, error)
	GetRepositories(ctx context.Context, getFilter *RepositoryFilter, order *RepositoryOrder, first *int64, offset *int64) (*GetRepositories, error)
	CreateRepositories(ctx context.Context, createInput []*AddRepositoryInput) (*CreateRepositories, error)
	UpdateRepositories(ctx context.Context, updateInput UpdateRepositoryInput) (*UpdateRepositories, error)
	DeleteRepositories(ctx context.Context, delFilter RepositoryFilter) (*DeleteRepositories, error)
	GetSoftwareByID(ctx context.Context, id string) (*GetSoftwareByID, error)
	GetSoftwares(ctx context.Context, getFilter *SoftwareFilter, order *SoftwareOrder, first *int64, offset *int64) (*GetSoftwares, error)
	CreateSoftwares(ctx context.Context, createInput []*AddSoftwareInput) (*CreateSoftwares, error)
	UpdateSoftwares(ctx context.Context, updateInput UpdateSoftwareInput) (*UpdateSoftwares, error)
	DeleteSoftwares(ctx context.Context, delFilter SoftwareFilter) (*DeleteSoftwares, error)
	GetTagByID(ctx context.Context, id string) (*GetTagByID, error)
	GetTagByName(ctx context.Context, name string) (*GetTagByName, error)
	GetTagID(ctx context.Context, name string) (*GetTagID, error)
	GetTags(ctx context.Context, getFilter *TagFilter, order *TagOrder, first *int64, offset *int64) (*GetTags, error)
	CreateTags(ctx context.Context, createInput []*AddTagInput) (*CreateTags, error)
	UpdateTags(ctx context.Context, updateInput UpdateTagInput) (*UpdateTags, error)
	DeleteTags(ctx context.Context, delFilter TagFilter) (*DeleteTags, error)
	GetTechnicalStandardByID(ctx context.Context, id string) (*GetTechnicalStandardByID, error)
	GetTechnicalStandardByXid(ctx context.Context, xid string) (*GetTechnicalStandardByXid, error)
	GetTechnicalStandardID(ctx context.Context, xid string) (*GetTechnicalStandardID, error)
	GetTechnicalStandards(ctx context.Context, getFilter *TechnicalStandardFilter, order *TechnicalStandardOrder, first *int64, offset *int64) (*GetTechnicalStandards, error)
	CreateTechnicalStandards(ctx context.Context, createInput []*AddTechnicalStandardInput) (*CreateTechnicalStandards, error)
	UpdateTechnicalStandards(ctx context.Context, updateInput UpdateTechnicalStandardInput) (*UpdateTechnicalStandards, error)
	DeleteTechnicalStandards(ctx context.Context, delFilter TechnicalStandardFilter) (*DeleteTechnicalStandards, error)
	GetTechnologySpecificDocumentationCriteriaByID(ctx context.Context, id string) (*GetTechnologySpecificDocumentationCriteriaByID, error)
	GetTechnologySpecificDocumentationCriteriaByXid(ctx context.Context, xid string) (*GetTechnologySpecificDocumentationCriteriaByXid, error)
	GetTechnologySpecificDocumentationCriteriaID(ctx context.Context, xid string) (*GetTechnologySpecificDocumentationCriteriaID, error)
	GetTechnologySpecificDocumentationCriterias(ctx context.Context, getFilter *TechnologySpecificDocumentationCriteriaFilter, order *TechnologySpecificDocumentationCriteriaOrder, first *int64, offset *int64) (*GetTechnologySpecificDocumentationCriterias, error)
	CreateTechnologySpecificDocumentationCriterias(ctx context.Context, createInput []*AddTechnologySpecificDocumentationCriteriaInput) (*CreateTechnologySpecificDocumentationCriterias, error)
	UpdateTechnologySpecificDocumentationCriterias(ctx context.Context, updateInput UpdateTechnologySpecificDocumentationCriteriaInput) (*UpdateTechnologySpecificDocumentationCriterias, error)
	DeleteTechnologySpecificDocumentationCriterias(ctx context.Context, delFilter TechnologySpecificDocumentationCriteriaFilter) (*DeleteTechnologySpecificDocumentationCriterias, error)
	TestConnection(ctx context.Context) (*TestConnection, error)
	GetUserOrGroupByID(ctx context.Context, id string) (*GetUserOrGroupByID, error)
	GetUserOrGroupByXid(ctx context.Context, xid string) (*GetUserOrGroupByXid, error)
	GetUserOrGroupID(ctx context.Context, xid string) (*GetUserOrGroupID, error)
	GetUserOrGroups(ctx context.Context, getFilter *UserOrGroupFilter, order *UserOrGroupOrder, first *int64, offset *int64) (*GetUserOrGroups, error)
	UpdateUserOrGroups(ctx context.Context, updateInput UpdateUserOrGroupInput) (*UpdateUserOrGroups, error)
	DeleteUserOrGroups(ctx context.Context, delFilter UserOrGroupFilter) (*DeleteUserOrGroups, error)
	GetUserByID(ctx context.Context, id string) (*GetUserByID, error)
	GetUserByXid(ctx context.Context, xid string) (*GetUserByXid, error)
	GetUserID(ctx context.Context, xid string) (*GetUserID, error)
	GetUsers(ctx context.Context, getFilter *UserFilter, order *UserOrder, first *int64, offset *int64) (*GetUsers, error)
	CreateUsers(ctx context.Context, createInput []*AddUserInput) (*CreateUsers, error)
	UpdateUsers(ctx context.Context, updateInput UpdateUserInput) (*UpdateUsers, error)
	DeleteUsers(ctx context.Context, delFilter UserFilter) (*DeleteUsers, error)
	GetGroupByID(ctx context.Context, id string) (*GetGroupByID, error)
	GetGroupByXid(ctx context.Context, xid string) (*GetGroupByXid, error)
	GetGroupID(ctx context.Context, xid string) (*GetGroupID, error)
	GetGroups(ctx context.Context, getFilter *GroupFilter, order *GroupOrder, first *int64, offset *int64) (*GetGroups, error)
	CreateGroups(ctx context.Context, createInput []*AddGroupInput) (*CreateGroups, error)
	UpdateGroups(ctx context.Context, updateInput UpdateGroupInput) (*UpdateGroups, error)
	DeleteGroups(ctx context.Context, delFilter GroupFilter) (*DeleteGroups, error)
}

type Client struct {
	Requester *request.GraphQLRequester
}

func NewClient(requester *request.GraphQLRequester) DgraphGraphQLClient {
	return &Client{
		Requester: requester,
	}
}

type Query struct {
	GetDatabase                                      *Database                                               "json:\"getDatabase,omitempty\" graphql:\"getDatabase\""
	QueryDatabase                                    []*Database                                             "json:\"queryDatabase,omitempty\" graphql:\"queryDatabase\""
	AggregateDatabase                                *DatabaseAggregateResult                                "json:\"aggregateDatabase,omitempty\" graphql:\"aggregateDatabase\""
	GetNode                                          Node                                                    "json:\"getNode,omitempty\" graphql:\"getNode\""
	QueryNode                                        []Node                                                  "json:\"queryNode,omitempty\" graphql:\"queryNode\""
	AggregateNode                                    *NodeAggregateResult                                    "json:\"aggregateNode,omitempty\" graphql:\"aggregateNode\""
	QueryCrawlerMeta                                 []CrawlerMeta                                           "json:\"queryCrawlerMeta,omitempty\" graphql:\"queryCrawlerMeta\""
	AggregateCrawlerMeta                             *CrawlerMetaAggregateResult                             "json:\"aggregateCrawlerMeta,omitempty\" graphql:\"aggregateCrawlerMeta\""
	GetProduct                                       *Product                                                "json:\"getProduct,omitempty\" graphql:\"getProduct\""
	QueryProduct                                     []*Product                                              "json:\"queryProduct,omitempty\" graphql:\"queryProduct\""
	AggregateProduct                                 *ProductAggregateResult                                 "json:\"aggregateProduct,omitempty\" graphql:\"aggregateProduct\""
	GetComponent                                     *Component                                              "json:\"getComponent,omitempty\" graphql:\"getComponent\""
	QueryComponent                                   []*Component                                            "json:\"queryComponent,omitempty\" graphql:\"queryComponent\""
	AggregateComponent                               *ComponentAggregateResult                               "json:\"aggregateComponent,omitempty\" graphql:\"aggregateComponent\""
	GetSoftware                                      *Software                                               "json:\"getSoftware,omitempty\" graphql:\"getSoftware\""
	QuerySoftware                                    []*Software                                             "json:\"querySoftware,omitempty\" graphql:\"querySoftware\""
	AggregateSoftware                                *SoftwareAggregateResult                                "json:\"aggregateSoftware,omitempty\" graphql:\"aggregateSoftware\""
	GetRepository                                    *Repository                                             "json:\"getRepository,omitempty\" graphql:\"getRepository\""
	QueryRepository                                  []*Repository                                           "json:\"queryRepository,omitempty\" graphql:\"queryRepository\""
	AggregateRepository                              *RepositoryAggregateResult                              "json:\"aggregateRepository,omitempty\" graphql:\"aggregateRepository\""
	GetHost                                          *Host                                                   "json:\"getHost,omitempty\" graphql:\"getHost\""
	QueryHost                                        []*Host                                                 "json:\"queryHost,omitempty\" graphql:\"queryHost\""
	AggregateHost                                    *HostAggregateResult                                    "json:\"aggregateHost,omitempty\" graphql:\"aggregateHost\""
	GetLicense                                       *License                                                "json:\"getLicense,omitempty\" graphql:\"getLicense\""
	QueryLicense                                     []*License                                              "json:\"queryLicense,omitempty\" graphql:\"queryLicense\""
	AggregateLicense                                 *LicenseAggregateResult                                 "json:\"aggregateLicense,omitempty\" graphql:\"aggregateLicense\""
	GetTechnologySpecificDocumentationCriteria       *TechnologySpecificDocumentationCriteria                "json:\"getTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"getTechnologySpecificDocumentationCriteria\""
	QueryTechnologySpecificDocumentationCriteria     []*TechnologySpecificDocumentationCriteria              "json:\"queryTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"queryTechnologySpecificDocumentationCriteria\""
	AggregateTechnologySpecificDocumentationCriteria *TechnologySpecificDocumentationCriteriaAggregateResult "json:\"aggregateTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"aggregateTechnologySpecificDocumentationCriteria\""
	GetTechnicalStandard                             *TechnicalStandard                                      "json:\"getTechnicalStandard,omitempty\" graphql:\"getTechnicalStandard\""
	QueryTechnicalStandard                           []*TechnicalStandard                                    "json:\"queryTechnicalStandard,omitempty\" graphql:\"queryTechnicalStandard\""
	AggregateTechnicalStandard                       *TechnicalStandardAggregateResult                       "json:\"aggregateTechnicalStandard,omitempty\" graphql:\"aggregateTechnicalStandard\""
	GetUserOrGroup                                   UserOrGroup                                             "json:\"getUserOrGroup,omitempty\" graphql:\"getUserOrGroup\""
	QueryUserOrGroup                                 []UserOrGroup                                           "json:\"queryUserOrGroup,omitempty\" graphql:\"queryUserOrGroup\""
	AggregateUserOrGroup                             *UserOrGroupAggregateResult                             "json:\"aggregateUserOrGroup,omitempty\" graphql:\"aggregateUserOrGroup\""
	GetUser                                          *User                                                   "json:\"getUser,omitempty\" graphql:\"getUser\""
	QueryUser                                        []*User                                                 "json:\"queryUser,omitempty\" graphql:\"queryUser\""
	AggregateUser                                    *UserAggregateResult                                    "json:\"aggregateUser,omitempty\" graphql:\"aggregateUser\""
	GetGroup                                         *Group                                                  "json:\"getGroup,omitempty\" graphql:\"getGroup\""
	QueryGroup                                       []*Group                                                "json:\"queryGroup,omitempty\" graphql:\"queryGroup\""
	AggregateGroup                                   *GroupAggregateResult                                   "json:\"aggregateGroup,omitempty\" graphql:\"aggregateGroup\""
	GetFile                                          *File                                                   "json:\"getFile,omitempty\" graphql:\"getFile\""
	QueryFile                                        []*File                                                 "json:\"queryFile,omitempty\" graphql:\"queryFile\""
	AggregateFile                                    *FileAggregateResult                                    "json:\"aggregateFile,omitempty\" graphql:\"aggregateFile\""
	GetKeyValue                                      *KeyValue                                               "json:\"getKeyValue,omitempty\" graphql:\"getKeyValue\""
	QueryKeyValue                                    []*KeyValue                                             "json:\"queryKeyValue,omitempty\" graphql:\"queryKeyValue\""
	AggregateKeyValue                                *KeyValueAggregateResult                                "json:\"aggregateKeyValue,omitempty\" graphql:\"aggregateKeyValue\""
	GetStringV                                       *StringV                                                "json:\"getStringV,omitempty\" graphql:\"getStringV\""
	QueryStringV                                     []*StringV                                              "json:\"queryStringV,omitempty\" graphql:\"queryStringV\""
	AggregateStringV                                 *StringVAggregateResult                                 "json:\"aggregateStringV,omitempty\" graphql:\"aggregateStringV\""
	GetFloatV                                        *FloatV                                                 "json:\"getFloatV,omitempty\" graphql:\"getFloatV\""
	QueryFloatV                                      []*FloatV                                               "json:\"queryFloatV,omitempty\" graphql:\"queryFloatV\""
	AggregateFloatV                                  *FloatVAggregateResult                                  "json:\"aggregateFloatV,omitempty\" graphql:\"aggregateFloatV\""
	GetMaterial                                      *Material                                               "json:\"getMaterial,omitempty\" graphql:\"getMaterial\""
	QueryMaterial                                    []*Material                                             "json:\"queryMaterial,omitempty\" graphql:\"queryMaterial\""
	AggregateMaterial                                *MaterialAggregateResult                                "json:\"aggregateMaterial,omitempty\" graphql:\"aggregateMaterial\""
	GetManufacturingProcess                          *ManufacturingProcess                                   "json:\"getManufacturingProcess,omitempty\" graphql:\"getManufacturingProcess\""
	QueryManufacturingProcess                        []*ManufacturingProcess                                 "json:\"queryManufacturingProcess,omitempty\" graphql:\"queryManufacturingProcess\""
	AggregateManufacturingProcess                    *ManufacturingProcessAggregateResult                    "json:\"aggregateManufacturingProcess,omitempty\" graphql:\"aggregateManufacturingProcess\""
	GetBoundingBoxDimensions                         *BoundingBoxDimensions                                  "json:\"getBoundingBoxDimensions,omitempty\" graphql:\"getBoundingBoxDimensions\""
	QueryBoundingBoxDimensions                       []*BoundingBoxDimensions                                "json:\"queryBoundingBoxDimensions,omitempty\" graphql:\"queryBoundingBoxDimensions\""
	AggregateBoundingBoxDimensions                   *BoundingBoxDimensionsAggregateResult                   "json:\"aggregateBoundingBoxDimensions,omitempty\" graphql:\"aggregateBoundingBoxDimensions\""
	GetOpenSCADDimensions                            *OpenSCADDimensions                                     "json:\"getOpenSCADDimensions,omitempty\" graphql:\"getOpenSCADDimensions\""
	QueryOpenSCADDimensions                          []*OpenSCADDimensions                                   "json:\"queryOpenSCADDimensions,omitempty\" graphql:\"queryOpenSCADDimensions\""
	AggregateOpenSCADDimensions                      *OpenSCADDimensionsAggregateResult                      "json:\"aggregateOpenSCADDimensions,omitempty\" graphql:\"aggregateOpenSCADDimensions\""
	GetCategory                                      *Category                                               "json:\"getCategory,omitempty\" graphql:\"getCategory\""
	QueryCategory                                    []*Category                                             "json:\"queryCategory,omitempty\" graphql:\"queryCategory\""
	AggregateCategory                                *CategoryAggregateResult                                "json:\"aggregateCategory,omitempty\" graphql:\"aggregateCategory\""
	GetTag                                           *Tag                                                    "json:\"getTag,omitempty\" graphql:\"getTag\""
	QueryTag                                         []*Tag                                                  "json:\"queryTag,omitempty\" graphql:\"queryTag\""
	AggregateTag                                     *TagAggregateResult                                     "json:\"aggregateTag,omitempty\" graphql:\"aggregateTag\""
}
type Mutation struct {
	AddDatabase                                   *AddDatabasePayload                                   "json:\"addDatabase,omitempty\" graphql:\"addDatabase\""
	UpdateDatabase                                *UpdateDatabasePayload                                "json:\"updateDatabase,omitempty\" graphql:\"updateDatabase\""
	DeleteDatabase                                *DeleteDatabasePayload                                "json:\"deleteDatabase,omitempty\" graphql:\"deleteDatabase\""
	DeleteNode                                    *DeleteNodePayload                                    "json:\"deleteNode,omitempty\" graphql:\"deleteNode\""
	UpdateCrawlerMeta                             *UpdateCrawlerMetaPayload                             "json:\"updateCrawlerMeta,omitempty\" graphql:\"updateCrawlerMeta\""
	DeleteCrawlerMeta                             *DeleteCrawlerMetaPayload                             "json:\"deleteCrawlerMeta,omitempty\" graphql:\"deleteCrawlerMeta\""
	AddProduct                                    *AddProductPayload                                    "json:\"addProduct,omitempty\" graphql:\"addProduct\""
	UpdateProduct                                 *UpdateProductPayload                                 "json:\"updateProduct,omitempty\" graphql:\"updateProduct\""
	DeleteProduct                                 *DeleteProductPayload                                 "json:\"deleteProduct,omitempty\" graphql:\"deleteProduct\""
	AddComponent                                  *AddComponentPayload                                  "json:\"addComponent,omitempty\" graphql:\"addComponent\""
	UpdateComponent                               *UpdateComponentPayload                               "json:\"updateComponent,omitempty\" graphql:\"updateComponent\""
	DeleteComponent                               *DeleteComponentPayload                               "json:\"deleteComponent,omitempty\" graphql:\"deleteComponent\""
	AddSoftware                                   *AddSoftwarePayload                                   "json:\"addSoftware,omitempty\" graphql:\"addSoftware\""
	UpdateSoftware                                *UpdateSoftwarePayload                                "json:\"updateSoftware,omitempty\" graphql:\"updateSoftware\""
	DeleteSoftware                                *DeleteSoftwarePayload                                "json:\"deleteSoftware,omitempty\" graphql:\"deleteSoftware\""
	AddRepository                                 *AddRepositoryPayload                                 "json:\"addRepository,omitempty\" graphql:\"addRepository\""
	UpdateRepository                              *UpdateRepositoryPayload                              "json:\"updateRepository,omitempty\" graphql:\"updateRepository\""
	DeleteRepository                              *DeleteRepositoryPayload                              "json:\"deleteRepository,omitempty\" graphql:\"deleteRepository\""
	AddHost                                       *AddHostPayload                                       "json:\"addHost,omitempty\" graphql:\"addHost\""
	UpdateHost                                    *UpdateHostPayload                                    "json:\"updateHost,omitempty\" graphql:\"updateHost\""
	DeleteHost                                    *DeleteHostPayload                                    "json:\"deleteHost,omitempty\" graphql:\"deleteHost\""
	AddLicense                                    *AddLicensePayload                                    "json:\"addLicense,omitempty\" graphql:\"addLicense\""
	UpdateLicense                                 *UpdateLicensePayload                                 "json:\"updateLicense,omitempty\" graphql:\"updateLicense\""
	DeleteLicense                                 *DeleteLicensePayload                                 "json:\"deleteLicense,omitempty\" graphql:\"deleteLicense\""
	AddTechnologySpecificDocumentationCriteria    *AddTechnologySpecificDocumentationCriteriaPayload    "json:\"addTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"addTechnologySpecificDocumentationCriteria\""
	UpdateTechnologySpecificDocumentationCriteria *UpdateTechnologySpecificDocumentationCriteriaPayload "json:\"updateTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"updateTechnologySpecificDocumentationCriteria\""
	DeleteTechnologySpecificDocumentationCriteria *DeleteTechnologySpecificDocumentationCriteriaPayload "json:\"deleteTechnologySpecificDocumentationCriteria,omitempty\" graphql:\"deleteTechnologySpecificDocumentationCriteria\""
	AddTechnicalStandard                          *AddTechnicalStandardPayload                          "json:\"addTechnicalStandard,omitempty\" graphql:\"addTechnicalStandard\""
	UpdateTechnicalStandard                       *UpdateTechnicalStandardPayload                       "json:\"updateTechnicalStandard,omitempty\" graphql:\"updateTechnicalStandard\""
	DeleteTechnicalStandard                       *DeleteTechnicalStandardPayload                       "json:\"deleteTechnicalStandard,omitempty\" graphql:\"deleteTechnicalStandard\""
	UpdateUserOrGroup                             *UpdateUserOrGroupPayload                             "json:\"updateUserOrGroup,omitempty\" graphql:\"updateUserOrGroup\""
	DeleteUserOrGroup                             *DeleteUserOrGroupPayload                             "json:\"deleteUserOrGroup,omitempty\" graphql:\"deleteUserOrGroup\""
	AddUser                                       *AddUserPayload                                       "json:\"addUser,omitempty\" graphql:\"addUser\""
	UpdateUser                                    *UpdateUserPayload                                    "json:\"updateUser,omitempty\" graphql:\"updateUser\""
	DeleteUser                                    *DeleteUserPayload                                    "json:\"deleteUser,omitempty\" graphql:\"deleteUser\""
	AddGroup                                      *AddGroupPayload                                      "json:\"addGroup,omitempty\" graphql:\"addGroup\""
	UpdateGroup                                   *UpdateGroupPayload                                   "json:\"updateGroup,omitempty\" graphql:\"updateGroup\""
	DeleteGroup                                   *DeleteGroupPayload                                   "json:\"deleteGroup,omitempty\" graphql:\"deleteGroup\""
	AddFile                                       *AddFilePayload                                       "json:\"addFile,omitempty\" graphql:\"addFile\""
	UpdateFile                                    *UpdateFilePayload                                    "json:\"updateFile,omitempty\" graphql:\"updateFile\""
	DeleteFile                                    *DeleteFilePayload                                    "json:\"deleteFile,omitempty\" graphql:\"deleteFile\""
	AddKeyValue                                   *AddKeyValuePayload                                   "json:\"addKeyValue,omitempty\" graphql:\"addKeyValue\""
	UpdateKeyValue                                *UpdateKeyValuePayload                                "json:\"updateKeyValue,omitempty\" graphql:\"updateKeyValue\""
	DeleteKeyValue                                *DeleteKeyValuePayload                                "json:\"deleteKeyValue,omitempty\" graphql:\"deleteKeyValue\""
	AddStringV                                    *AddStringVPayload                                    "json:\"addStringV,omitempty\" graphql:\"addStringV\""
	UpdateStringV                                 *UpdateStringVPayload                                 "json:\"updateStringV,omitempty\" graphql:\"updateStringV\""
	DeleteStringV                                 *DeleteStringVPayload                                 "json:\"deleteStringV,omitempty\" graphql:\"deleteStringV\""
	AddFloatV                                     *AddFloatVPayload                                     "json:\"addFloatV,omitempty\" graphql:\"addFloatV\""
	UpdateFloatV                                  *UpdateFloatVPayload                                  "json:\"updateFloatV,omitempty\" graphql:\"updateFloatV\""
	DeleteFloatV                                  *DeleteFloatVPayload                                  "json:\"deleteFloatV,omitempty\" graphql:\"deleteFloatV\""
	AddMaterial                                   *AddMaterialPayload                                   "json:\"addMaterial,omitempty\" graphql:\"addMaterial\""
	UpdateMaterial                                *UpdateMaterialPayload                                "json:\"updateMaterial,omitempty\" graphql:\"updateMaterial\""
	DeleteMaterial                                *DeleteMaterialPayload                                "json:\"deleteMaterial,omitempty\" graphql:\"deleteMaterial\""
	AddManufacturingProcess                       *AddManufacturingProcessPayload                       "json:\"addManufacturingProcess,omitempty\" graphql:\"addManufacturingProcess\""
	UpdateManufacturingProcess                    *UpdateManufacturingProcessPayload                    "json:\"updateManufacturingProcess,omitempty\" graphql:\"updateManufacturingProcess\""
	DeleteManufacturingProcess                    *DeleteManufacturingProcessPayload                    "json:\"deleteManufacturingProcess,omitempty\" graphql:\"deleteManufacturingProcess\""
	AddBoundingBoxDimensions                      *AddBoundingBoxDimensionsPayload                      "json:\"addBoundingBoxDimensions,omitempty\" graphql:\"addBoundingBoxDimensions\""
	UpdateBoundingBoxDimensions                   *UpdateBoundingBoxDimensionsPayload                   "json:\"updateBoundingBoxDimensions,omitempty\" graphql:\"updateBoundingBoxDimensions\""
	DeleteBoundingBoxDimensions                   *DeleteBoundingBoxDimensionsPayload                   "json:\"deleteBoundingBoxDimensions,omitempty\" graphql:\"deleteBoundingBoxDimensions\""
	AddOpenSCADDimensions                         *AddOpenSCADDimensionsPayload                         "json:\"addOpenSCADDimensions,omitempty\" graphql:\"addOpenSCADDimensions\""
	UpdateOpenSCADDimensions                      *UpdateOpenSCADDimensionsPayload                      "json:\"updateOpenSCADDimensions,omitempty\" graphql:\"updateOpenSCADDimensions\""
	DeleteOpenSCADDimensions                      *DeleteOpenSCADDimensionsPayload                      "json:\"deleteOpenSCADDimensions,omitempty\" graphql:\"deleteOpenSCADDimensions\""
	AddCategory                                   *AddCategoryPayload                                   "json:\"addCategory,omitempty\" graphql:\"addCategory\""
	UpdateCategory                                *UpdateCategoryPayload                                "json:\"updateCategory,omitempty\" graphql:\"updateCategory\""
	DeleteCategory                                *DeleteCategoryPayload                                "json:\"deleteCategory,omitempty\" graphql:\"deleteCategory\""
	AddTag                                        *AddTagPayload                                        "json:\"addTag,omitempty\" graphql:\"addTag\""
	UpdateTag                                     *UpdateTagPayload                                     "json:\"updateTag,omitempty\" graphql:\"updateTag\""
	DeleteTag                                     *DeleteTagPayload                                     "json:\"deleteTag,omitempty\" graphql:\"deleteTag\""
}
type CategoryFragment struct {
	ID          string                       "json:\"id\" graphql:\"id\""
	Xid         string                       "json:\"xid\" graphql:\"xid\""
	FullName    string                       "json:\"fullName\" graphql:\"fullName\""
	Name        string                       "json:\"name\" graphql:\"name\""
	Description *string                      "json:\"description\" graphql:\"description\""
	Parent      *CategoryFragment_Parent     "json:\"parent\" graphql:\"parent\""
	Children    []*CategoryFragment_Children "json:\"children\" graphql:\"children\""
	Products    []*CategoryFragment_Products "json:\"products\" graphql:\"products\""
}
type ComponentFragment struct {
	ID                          string                                       "json:\"id\" graphql:\"id\""
	Xid                         string                                       "json:\"xid\" graphql:\"xid\""
	Name                        string                                       "json:\"name\" graphql:\"name\""
	Description                 string                                       "json:\"description\" graphql:\"description\""
	Version                     string                                       "json:\"version\" graphql:\"version\""
	CreatedAt                   time.Time                                    "json:\"createdAt\" graphql:\"createdAt\""
	Releases                    []*ComponentFragment_Releases                "json:\"releases\" graphql:\"releases\""
	IsLatest                    bool                                         "json:\"isLatest\" graphql:\"isLatest\""
	Repository                  ComponentFragment_Repository                 "json:\"repository\" graphql:\"repository\""
	License                     *ComponentFragment_License                   "json:\"license\" graphql:\"license\""
	AdditionalLicenses          []*ComponentFragment_AdditionalLicenses      "json:\"additionalLicenses\" graphql:\"additionalLicenses\""
	Licensor                    *UserOrGroupBasicFragment                    "json:\"licensor\" graphql:\"licensor\""
	DocumentationLanguage       string                                       "json:\"documentationLanguage\" graphql:\"documentationLanguage\""
	TechnologyReadinessLevel    TechnologyReadinessLevel                     "json:\"technologyReadinessLevel\" graphql:\"technologyReadinessLevel\""
	DocumentationReadinessLevel DocumentationReadinessLevel                  "json:\"documentationReadinessLevel\" graphql:\"documentationReadinessLevel\""
	Attestation                 *string                                      "json:\"attestation\" graphql:\"attestation\""
	Publication                 *string                                      "json:\"publication\" graphql:\"publication\""
	CompliesWith                *ComponentFragment_CompliesWith              "json:\"compliesWith\" graphql:\"compliesWith\""
	CpcPatentClass              *string                                      "json:\"cpcPatentClass\" graphql:\"cpcPatentClass\""
	Tsdc                        *ComponentFragment_Tsdc                      "json:\"tsdc\" graphql:\"tsdc\""
	Components                  []*ComponentFragment_Components              "json:\"components\" graphql:\"components\""
	Software                    []*ComponentFragment_Software                "json:\"software\" graphql:\"software\""
	Image                       *ComponentFragment_Image                     "json:\"image\" graphql:\"image\""
	Readme                      *ComponentFragment_Readme                    "json:\"readme\" graphql:\"readme\""
	ContributionGuide           *ComponentFragment_ContributionGuide         "json:\"contributionGuide\" graphql:\"contributionGuide\""
	Bom                         *ComponentFragment_Bom                       "json:\"bom\" graphql:\"bom\""
	ManufacturingInstructions   *ComponentFragment_ManufacturingInstructions "json:\"manufacturingInstructions\" graphql:\"manufacturingInstructions\""
	UserManual                  *ComponentFragment_UserManual                "json:\"userManual\" graphql:\"userManual\""
	Product                     *ComponentFragment_Product                   "json:\"product\" graphql:\"product\""
	UsedIn                      []*ComponentFragment_UsedIn                  "json:\"usedIn\" graphql:\"usedIn\""
	Source                      *ComponentFragment_Source                    "json:\"source\" graphql:\"source\""
	Export                      []*ComponentFragment_Export                  "json:\"export\" graphql:\"export\""
	Auxiliary                   []*ComponentFragment_Auxiliary               "json:\"auxiliary\" graphql:\"auxiliary\""
	Organization                *ComponentFragment_Organization              "json:\"organization\" graphql:\"organization\""
	Mass                        *float64                                     "json:\"mass\" graphql:\"mass\""
	OuterDimensions             *OuterDimensionsFragment                     "json:\"outerDimensions\" graphql:\"outerDimensions\""
	Material                    *ComponentFragment_Material                  "json:\"material\" graphql:\"material\""
	ManufacturingProcess        *ComponentFragment_ManufacturingProcess      "json:\"manufacturingProcess\" graphql:\"manufacturingProcess\""
	ProductionMetadata          []*KeyValueFragment                          "json:\"productionMetadata\" graphql:\"productionMetadata\""
}
type DatabaseFragment struct {
	ID      string "json:\"id\" graphql:\"id\""
	Version string "json:\"version\" graphql:\"version\""
}
type FileFragment struct {
	DiscoveredAt  time.Time  "json:\"discoveredAt\" graphql:\"discoveredAt\""
	LastIndexedAt time.Time  "json:\"lastIndexedAt\" graphql:\"lastIndexedAt\""
	ID            string     "json:\"id\" graphql:\"id\""
	Name          string     "json:\"name\" graphql:\"name\""
	Path          string     "json:\"path\" graphql:\"path\""
	MimeType      *string    "json:\"mimeType\" graphql:\"mimeType\""
	URL           string     "json:\"url\" graphql:\"url\""
	CreatedAt     *time.Time "json:\"createdAt\" graphql:\"createdAt\""
}
type HostFragment struct {
	ID     string "json:\"id\" graphql:\"id\""
	Domain string "json:\"domain\" graphql:\"domain\""
	Name   string "json:\"name\" graphql:\"name\""
}
type KeyValueFragment struct {
	ID    string                 "json:\"id\" graphql:\"id\""
	Key   string                 "json:\"key\" graphql:\"key\""
	Value KeyValueFragment_Value "json:\"value\" graphql:\"value\""
}
type FloatVFragment struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Value float64 "json:\"value\" graphql:\"value\""
}
type StringVFragment struct {
	ID    string "json:\"id\" graphql:\"id\""
	Value string "json:\"value\" graphql:\"value\""
}
type LicenseFragment struct {
	ID            string      "json:\"id\" graphql:\"id\""
	Xid           string      "json:\"xid\" graphql:\"xid\""
	Name          string      "json:\"name\" graphql:\"name\""
	Text          *string     "json:\"text\" graphql:\"text\""
	TextHTML      *string     "json:\"textHTML\" graphql:\"textHTML\""
	ReferenceURL  *string     "json:\"referenceURL\" graphql:\"referenceURL\""
	DetailsURL    *string     "json:\"detailsURL\" graphql:\"detailsURL\""
	Type          LicenseType "json:\"type\" graphql:\"type\""
	IsSpdx        bool        "json:\"isSpdx\" graphql:\"isSpdx\""
	IsDeprecated  bool        "json:\"isDeprecated\" graphql:\"isDeprecated\""
	IsOsiApproved bool        "json:\"isOsiApproved\" graphql:\"isOsiApproved\""
	IsFsfLibre    bool        "json:\"isFsfLibre\" graphql:\"isFsfLibre\""
	IsBlocked     bool        "json:\"isBlocked\" graphql:\"isBlocked\""
}
type LicenseFragmentBasic struct {
	ID            string "json:\"id\" graphql:\"id\""
	Xid           string "json:\"xid\" graphql:\"xid\""
	Name          string "json:\"name\" graphql:\"name\""
	IsSpdx        bool   "json:\"isSpdx\" graphql:\"isSpdx\""
	IsDeprecated  bool   "json:\"isDeprecated\" graphql:\"isDeprecated\""
	IsOsiApproved bool   "json:\"isOsiApproved\" graphql:\"isOsiApproved\""
	IsFsfLibre    bool   "json:\"isFsfLibre\" graphql:\"isFsfLibre\""
	IsBlocked     bool   "json:\"isBlocked\" graphql:\"isBlocked\""
}
type ManufacturingProcessFragment struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Description *string "json:\"description\" graphql:\"description\""
}
type MaterialFragment struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Description *string "json:\"description\" graphql:\"description\""
}
type NodeFragment struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type CrawlerMetaFragment struct {
	DiscoveredAt  time.Time "json:\"discoveredAt\" graphql:\"discoveredAt\""
	LastIndexedAt time.Time "json:\"lastIndexedAt\" graphql:\"lastIndexedAt\""
}
type OuterDimensionsFragment struct {
	Typename              *string                       "json:\"__typename\" graphql:\"__typename\""
	BoundingBoxDimensions BoundingBoxDimensionsFragment "graphql:\"... on BoundingBoxDimensions\""
	OpenSCADDimensions    OpenSCADDimensionsFragment    "graphql:\"... on OpenSCADDimensions\""
}
type BoundingBoxDimensionsFragment struct {
	ID     string  "json:\"id\" graphql:\"id\""
	Height float64 "json:\"height\" graphql:\"height\""
	Width  float64 "json:\"width\" graphql:\"width\""
	Depth  float64 "json:\"depth\" graphql:\"depth\""
}
type OpenSCADDimensionsFragment struct {
	ID       string "json:\"id\" graphql:\"id\""
	Openscad string "json:\"openscad\" graphql:\"openscad\""
	Unit     string "json:\"unit\" graphql:\"unit\""
}
type ProductFragment struct {
	DiscoveredAt          time.Time                    "json:\"discoveredAt\" graphql:\"discoveredAt\""
	LastIndexedAt         time.Time                    "json:\"lastIndexedAt\" graphql:\"lastIndexedAt\""
	ID                    string                       "json:\"id\" graphql:\"id\""
	Xid                   string                       "json:\"xid\" graphql:\"xid\""
	Name                  string                       "json:\"name\" graphql:\"name\""
	Description           string                       "json:\"description\" graphql:\"description\""
	DocumentationLanguage string                       "json:\"documentationLanguage\" graphql:\"documentationLanguage\""
	Version               string                       "json:\"version\" graphql:\"version\""
	License               *ProductFragment_License     "json:\"license\" graphql:\"license\""
	Licensor              *UserOrGroupBasicFragment    "json:\"licensor\" graphql:\"licensor\""
	Website               *string                      "json:\"website\" graphql:\"website\""
	State                 ProductState                 "json:\"state\" graphql:\"state\""
	LastUpdatedAt         *time.Time                   "json:\"lastUpdatedAt\" graphql:\"lastUpdatedAt\""
	Release               ProductFragment_Release      "json:\"release\" graphql:\"release\""
	Releases              []*ProductFragment_Releases  "json:\"releases\" graphql:\"releases\""
	RenamedTo             *ProductFragment_RenamedTo   "json:\"renamedTo\" graphql:\"renamedTo\""
	RenamedFrom           *ProductFragment_RenamedFrom "json:\"renamedFrom\" graphql:\"renamedFrom\""
	ForkOf                *ProductFragment_ForkOf      "json:\"forkOf\" graphql:\"forkOf\""
	Forks                 []*ProductFragment_Forks     "json:\"forks\" graphql:\"forks\""
	ForkCount             *int64                       "json:\"forkCount\" graphql:\"forkCount\""
	StarCount             *int64                       "json:\"starCount\" graphql:\"starCount\""
	Tags                  []*ProductFragment_Tags      "json:\"tags\" graphql:\"tags\""
	Category              *ProductFragment_Category    "json:\"category\" graphql:\"category\""
}
type ProductSearchFragment struct {
	DiscoveredAt  time.Time                          "json:\"discoveredAt\" graphql:\"discoveredAt\""
	LastIndexedAt time.Time                          "json:\"lastIndexedAt\" graphql:\"lastIndexedAt\""
	ID            string                             "json:\"id\" graphql:\"id\""
	Xid           string                             "json:\"xid\" graphql:\"xid\""
	Name          string                             "json:\"name\" graphql:\"name\""
	Website       *string                            "json:\"website\" graphql:\"website\""
	State         ProductState                       "json:\"state\" graphql:\"state\""
	LastUpdatedAt *time.Time                         "json:\"lastUpdatedAt\" graphql:\"lastUpdatedAt\""
	RenamedTo     *ProductSearchFragment_RenamedTo   "json:\"renamedTo\" graphql:\"renamedTo\""
	RenamedFrom   *ProductSearchFragment_RenamedFrom "json:\"renamedFrom\" graphql:\"renamedFrom\""
	ForkOf        *ProductSearchFragment_ForkOf      "json:\"forkOf\" graphql:\"forkOf\""
	Forks         []*ProductSearchFragment_Forks     "json:\"forks\" graphql:\"forks\""
	ForkCount     *int64                             "json:\"forkCount\" graphql:\"forkCount\""
	StarCount     *int64                             "json:\"starCount\" graphql:\"starCount\""
	Tags          []*TagFragment                     "json:\"tags\" graphql:\"tags\""
	Category      *CategoryFragment                  "json:\"category\" graphql:\"category\""
	Releases      []*ProductSearchFragment_Releases  "json:\"releases\" graphql:\"releases\""
	Release       ProductSearchFragment_Release      "json:\"release\" graphql:\"release\""
}
type RepositoryFragment struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	Xid       string                    "json:\"xid\" graphql:\"xid\""
	URL       string                    "json:\"url\" graphql:\"url\""
	PermaURL  string                    "json:\"permaUrl\" graphql:\"permaUrl\""
	Host      RepositoryFragment_Host   "json:\"host\" graphql:\"host\""
	Owner     *UserOrGroupBasicFragment "json:\"owner\" graphql:\"owner\""
	Name      *string                   "json:\"name\" graphql:\"name\""
	Reference *string                   "json:\"reference\" graphql:\"reference\""
	Path      *string                   "json:\"path\" graphql:\"path\""
}
type SoftwareFragment struct {
	DiscoveredAt          time.Time                           "json:\"discoveredAt\" graphql:\"discoveredAt\""
	LastIndexedAt         time.Time                           "json:\"lastIndexedAt\" graphql:\"lastIndexedAt\""
	ID                    string                              "json:\"id\" graphql:\"id\""
	Release               *string                             "json:\"release\" graphql:\"release\""
	InstallationGuide     *SoftwareFragment_InstallationGuide "json:\"installationGuide\" graphql:\"installationGuide\""
	DocumentationLanguage *string                             "json:\"documentationLanguage\" graphql:\"documentationLanguage\""
	License               *SoftwareFragment_License           "json:\"license\" graphql:\"license\""
	Licensor              *string                             "json:\"licensor\" graphql:\"licensor\""
}
type TagFragment struct {
	ID      string                 "json:\"id\" graphql:\"id\""
	Name    string                 "json:\"name\" graphql:\"name\""
	Aliases []*TagFragment_Aliases "json:\"aliases\" graphql:\"aliases\""
	Related []*TagFragment_Related "json:\"related\" graphql:\"related\""
}
type TechnicalStandardFragment struct {
	ID          string                                  "json:\"id\" graphql:\"id\""
	Xid         string                                  "json:\"xid\" graphql:\"xid\""
	Name        string                                  "json:\"name\" graphql:\"name\""
	Description *string                                 "json:\"description\" graphql:\"description\""
	Components  []*TechnicalStandardFragment_Components "json:\"components\" graphql:\"components\""
}
type TechnologySpecificDocumentationCriteriaFragment struct {
	ID              string                                                        "json:\"id\" graphql:\"id\""
	Xid             string                                                        "json:\"xid\" graphql:\"xid\""
	Name            string                                                        "json:\"name\" graphql:\"name\""
	Comment         *string                                                       "json:\"comment\" graphql:\"comment\""
	RequirementsURI *string                                                       "json:\"requirementsUri\" graphql:\"requirementsUri\""
	Components      []*TechnologySpecificDocumentationCriteriaFragment_Components "json:\"components\" graphql:\"components\""
}
type UserOrGroupFragment struct {
	Typename *string                         "json:\"__typename\" graphql:\"__typename\""
	ID       string                          "json:\"id\" graphql:\"id\""
	Xid      string                          "json:\"xid\" graphql:\"xid\""
	Host     UserOrGroupFragment_Host        "json:\"host\" graphql:\"host\""
	Name     string                          "json:\"name\" graphql:\"name\""
	FullName *string                         "json:\"fullName\" graphql:\"fullName\""
	Email    *string                         "json:\"email\" graphql:\"email\""
	Avatar   *UserOrGroupFragment_Avatar     "json:\"avatar\" graphql:\"avatar\""
	URL      *string                         "json:\"url\" graphql:\"url\""
	MemberOf []*UserOrGroupFragment_MemberOf "json:\"memberOf\" graphql:\"memberOf\""
	Products []*UserOrGroupFragment_Products "json:\"products\" graphql:\"products\""
}
type UserOrGroupBasicFragment struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	Name     string  "json:\"name\" graphql:\"name\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type UserFragment struct {
	Typename *string                                      "json:\"__typename\" graphql:\"__typename\""
	ID       string                                       "json:\"id\" graphql:\"id\""
	Xid      string                                       "json:\"xid\" graphql:\"xid\""
	Host     UserFragment_UserOrGroupFragment_Host        "json:\"host\" graphql:\"host\""
	Name     string                                       "json:\"name\" graphql:\"name\""
	FullName *string                                      "json:\"fullName\" graphql:\"fullName\""
	Email    *string                                      "json:\"email\" graphql:\"email\""
	Avatar   *UserFragment_UserOrGroupFragment_Avatar     "json:\"avatar\" graphql:\"avatar\""
	URL      *string                                      "json:\"url\" graphql:\"url\""
	MemberOf []*UserFragment_UserOrGroupFragment_MemberOf "json:\"memberOf\" graphql:\"memberOf\""
	Products []*UserFragment_UserOrGroupFragment_Products "json:\"products\" graphql:\"products\""
	Locale   *string                                      "json:\"locale\" graphql:\"locale\""
}
type GroupFragment struct {
	Typename *string                                       "json:\"__typename\" graphql:\"__typename\""
	ID       string                                        "json:\"id\" graphql:\"id\""
	Xid      string                                        "json:\"xid\" graphql:\"xid\""
	Host     GroupFragment_UserOrGroupFragment_Host        "json:\"host\" graphql:\"host\""
	Name     string                                        "json:\"name\" graphql:\"name\""
	FullName *string                                       "json:\"fullName\" graphql:\"fullName\""
	Email    *string                                       "json:\"email\" graphql:\"email\""
	Avatar   *GroupFragment_UserOrGroupFragment_Avatar     "json:\"avatar\" graphql:\"avatar\""
	URL      *string                                       "json:\"url\" graphql:\"url\""
	MemberOf []*GroupFragment_UserOrGroupFragment_MemberOf "json:\"memberOf\" graphql:\"memberOf\""
	Products []*GroupFragment_UserOrGroupFragment_Products "json:\"products\" graphql:\"products\""
	Members  []*GroupFragment_Members                      "json:\"members\" graphql:\"members\""
}
type UserOrGroupFullFragment struct {
	Typename *string       "json:\"__typename\" graphql:\"__typename\""
	User     UserFragment  "graphql:\"... on User\""
	Group    GroupFragment "graphql:\"... on Group\""
}
type CategoryFragment_Parent struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type CategoryFragment_Children struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type CategoryFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_Releases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_Repository struct {
	ID   string  "json:\"id\" graphql:\"id\""
	Name *string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type ComponentFragment_AdditionalLicenses struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type ComponentFragment_CompliesWith struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_Tsdc struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ComponentFragment_Image struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type ComponentFragment_Readme struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type ComponentFragment_ContributionGuide struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type ComponentFragment_Bom struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type ComponentFragment_ManufacturingInstructions struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type ComponentFragment_UserManual struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type ComponentFragment_Product struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_UsedIn struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_Source struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type ComponentFragment_Export struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type ComponentFragment_Auxiliary struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type ComponentFragment_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_Material struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_ManufacturingProcess struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ComponentFragment_ProductionMetadata_KeyValueFragment_Value_StringV struct {
	ID          string "json:\"id\" graphql:\"id\""
	StringValue string "json:\"stringValue\" graphql:\"stringValue\""
}
type ComponentFragment_ProductionMetadata_KeyValueFragment_Value_FloatV struct {
	ID         string  "json:\"id\" graphql:\"id\""
	FloatValue float64 "json:\"floatValue\" graphql:\"floatValue\""
}
type ComponentFragment_ProductionMetadata_KeyValueFragment_Value struct {
	StringV ComponentFragment_ProductionMetadata_KeyValueFragment_Value_StringV "graphql:\"... on StringV\""
	FloatV  ComponentFragment_ProductionMetadata_KeyValueFragment_Value_FloatV  "graphql:\"... on FloatV\""
}
type KeyValueFragment_Value_StringV struct {
	ID          string "json:\"id\" graphql:\"id\""
	StringValue string "json:\"stringValue\" graphql:\"stringValue\""
}
type KeyValueFragment_Value_FloatV struct {
	ID         string  "json:\"id\" graphql:\"id\""
	FloatValue float64 "json:\"floatValue\" graphql:\"floatValue\""
}
type KeyValueFragment_Value struct {
	StringV KeyValueFragment_Value_StringV "graphql:\"... on StringV\""
	FloatV  KeyValueFragment_Value_FloatV  "graphql:\"... on FloatV\""
}
type ProductFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type ProductFragment_Release struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductFragment_Releases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductFragment_RenamedTo struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductFragment_RenamedFrom struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductFragment_ForkOf struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductFragment_Forks struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductFragment_Tags struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductFragment_Category struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type ProductSearchFragment_RenamedTo struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_RenamedFrom struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_ForkOf_Release_Repository struct {
	URL string "json:\"url\" graphql:\"url\""
}
type ProductSearchFragment_ForkOf_Release struct {
	Repository ProductSearchFragment_ForkOf_Release_Repository "json:\"repository\" graphql:\"repository\""
}
type ProductSearchFragment_ForkOf struct {
	ID      string                               "json:\"id\" graphql:\"id\""
	Release ProductSearchFragment_ForkOf_Release "json:\"release\" graphql:\"release\""
}
type ProductSearchFragment_Forks struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Tags_TagFragment_Aliases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductSearchFragment_Tags_TagFragment_Related struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductSearchFragment_Category_CategoryFragment_Parent struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type ProductSearchFragment_Category_CategoryFragment_Children struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type ProductSearchFragment_Category_CategoryFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductSearchFragment_Releases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_Releases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_Repository_RepositoryFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_Group_GroupFragment_Members struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_CompliesWith struct {
	Name string "json:\"name\" graphql:\"name\""
}
type ProductSearchFragment_Release_Tsdc struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_Product struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_UsedIn struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release_ProductionMetadata struct {
	ID string "json:\"id\" graphql:\"id\""
}
type ProductSearchFragment_Release struct {
	ID                          string                                              "json:\"id\" graphql:\"id\""
	Xid                         string                                              "json:\"xid\" graphql:\"xid\""
	Name                        string                                              "json:\"name\" graphql:\"name\""
	Description                 string                                              "json:\"description\" graphql:\"description\""
	Version                     string                                              "json:\"version\" graphql:\"version\""
	CreatedAt                   time.Time                                           "json:\"createdAt\" graphql:\"createdAt\""
	Releases                    []*ProductSearchFragment_Release_Releases           "json:\"releases\" graphql:\"releases\""
	IsLatest                    bool                                                "json:\"isLatest\" graphql:\"isLatest\""
	Repository                  *RepositoryFragment                                 "json:\"repository\" graphql:\"repository\""
	License                     *LicenseFragmentBasic                               "json:\"license\" graphql:\"license\""
	AdditionalLicenses          []*LicenseFragmentBasic                             "json:\"additionalLicenses\" graphql:\"additionalLicenses\""
	Licensor                    *UserOrGroupFullFragment                            "json:\"licensor\" graphql:\"licensor\""
	DocumentationLanguage       string                                              "json:\"documentationLanguage\" graphql:\"documentationLanguage\""
	TechnologyReadinessLevel    TechnologyReadinessLevel                            "json:\"technologyReadinessLevel\" graphql:\"technologyReadinessLevel\""
	DocumentationReadinessLevel DocumentationReadinessLevel                         "json:\"documentationReadinessLevel\" graphql:\"documentationReadinessLevel\""
	Attestation                 *string                                             "json:\"attestation\" graphql:\"attestation\""
	Publication                 *string                                             "json:\"publication\" graphql:\"publication\""
	CompliesWith                *ProductSearchFragment_Release_CompliesWith         "json:\"compliesWith\" graphql:\"compliesWith\""
	CpcPatentClass              *string                                             "json:\"cpcPatentClass\" graphql:\"cpcPatentClass\""
	Tsdc                        *ProductSearchFragment_Release_Tsdc                 "json:\"tsdc\" graphql:\"tsdc\""
	Components                  []*ProductSearchFragment_Release_Components         "json:\"components\" graphql:\"components\""
	Software                    []*ProductSearchFragment_Release_Software           "json:\"software\" graphql:\"software\""
	Image                       *FileFragment                                       "json:\"image\" graphql:\"image\""
	Readme                      *FileFragment                                       "json:\"readme\" graphql:\"readme\""
	ContributionGuide           *FileFragment                                       "json:\"contributionGuide\" graphql:\"contributionGuide\""
	Bom                         *FileFragment                                       "json:\"bom\" graphql:\"bom\""
	ManufacturingInstructions   *FileFragment                                       "json:\"manufacturingInstructions\" graphql:\"manufacturingInstructions\""
	UserManual                  *FileFragment                                       "json:\"userManual\" graphql:\"userManual\""
	Product                     *ProductSearchFragment_Release_Product              "json:\"product\" graphql:\"product\""
	UsedIn                      []*ProductSearchFragment_Release_UsedIn             "json:\"usedIn\" graphql:\"usedIn\""
	Source                      *FileFragment                                       "json:\"source\" graphql:\"source\""
	Export                      []*FileFragment                                     "json:\"export\" graphql:\"export\""
	Auxiliary                   []*FileFragment                                     "json:\"auxiliary\" graphql:\"auxiliary\""
	Organization                *ProductSearchFragment_Release_Organization         "json:\"organization\" graphql:\"organization\""
	Mass                        *float64                                            "json:\"mass\" graphql:\"mass\""
	OuterDimensions             *OuterDimensionsFragment                            "json:\"outerDimensions\" graphql:\"outerDimensions\""
	Material                    *ProductSearchFragment_Release_Material             "json:\"material\" graphql:\"material\""
	ManufacturingProcess        *ProductSearchFragment_Release_ManufacturingProcess "json:\"manufacturingProcess\" graphql:\"manufacturingProcess\""
	ProductionMetadata          []*ProductSearchFragment_Release_ProductionMetadata "json:\"productionMetadata\" graphql:\"productionMetadata\""
}
type RepositoryFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type SoftwareFragment_InstallationGuide struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type SoftwareFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type TagFragment_Aliases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type TagFragment_Related struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type TechnicalStandardFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type TechnologySpecificDocumentationCriteriaFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type UserFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type UserFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type UserFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type UserFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GroupFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GroupFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GroupFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GroupFragment_Members struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type UserOrGroupFullFragment_Group_GroupFragment_Members struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type GetCategoryByID_GetCategory_CategoryFragment_Parent struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type GetCategoryByID_GetCategory_CategoryFragment_Children struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type GetCategoryByID_GetCategory_CategoryFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetCategoryByXid_GetCategory_CategoryFragment_Parent struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type GetCategoryByXid_GetCategory_CategoryFragment_Children struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type GetCategoryByXid_GetCategory_CategoryFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetCategoryID_GetCategory struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetCategories_QueryCategory_CategoryFragment_Parent struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type GetCategories_QueryCategory_CategoryFragment_Children struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type GetCategories_QueryCategory_CategoryFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetCategories_AggregateCategory struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateCategories_AddCategory_Category struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateCategories_AddCategory struct {
	Category []*CreateCategories_AddCategory_Category "json:\"category\" graphql:\"category\""
}
type UpdateCategories_UpdateCategory_Category struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateCategories_UpdateCategory struct {
	Category []*UpdateCategories_UpdateCategory_Category "json:\"category\" graphql:\"category\""
}
type DeleteCategories_DeleteCategory_Category struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteCategories_DeleteCategory struct {
	Category []*DeleteCategories_DeleteCategory_Category "json:\"category\" graphql:\"category\""
}
type GetComponentByID_GetComponent_ComponentFragment_Releases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByID_GetComponent_ComponentFragment_Repository struct {
	ID   string  "json:\"id\" graphql:\"id\""
	Name *string "json:\"name\" graphql:\"name\""
}
type GetComponentByID_GetComponent_ComponentFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetComponentByID_GetComponent_ComponentFragment_AdditionalLicenses struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetComponentByID_GetComponent_ComponentFragment_CompliesWith struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByID_GetComponent_ComponentFragment_Tsdc struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByID_GetComponent_ComponentFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByID_GetComponent_ComponentFragment_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponentByID_GetComponent_ComponentFragment_Image struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByID_GetComponent_ComponentFragment_Readme struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByID_GetComponent_ComponentFragment_ContributionGuide struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByID_GetComponent_ComponentFragment_Bom struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByID_GetComponent_ComponentFragment_ManufacturingInstructions struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByID_GetComponent_ComponentFragment_UserManual struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByID_GetComponent_ComponentFragment_Product struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByID_GetComponent_ComponentFragment_UsedIn struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByID_GetComponent_ComponentFragment_Source struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByID_GetComponent_ComponentFragment_Export struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByID_GetComponent_ComponentFragment_Auxiliary struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByID_GetComponent_ComponentFragment_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByID_GetComponent_ComponentFragment_Material struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByID_GetComponent_ComponentFragment_ManufacturingProcess struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByID_GetComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_StringV struct {
	ID          string "json:\"id\" graphql:\"id\""
	StringValue string "json:\"stringValue\" graphql:\"stringValue\""
}
type GetComponentByID_GetComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_FloatV struct {
	ID         string  "json:\"id\" graphql:\"id\""
	FloatValue float64 "json:\"floatValue\" graphql:\"floatValue\""
}
type GetComponentByID_GetComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value struct {
	StringV GetComponentByID_GetComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_StringV "graphql:\"... on StringV\""
	FloatV  GetComponentByID_GetComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_FloatV  "graphql:\"... on FloatV\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Releases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Repository struct {
	ID   string  "json:\"id\" graphql:\"id\""
	Name *string "json:\"name\" graphql:\"name\""
}
type GetComponentByXid_GetComponent_ComponentFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetComponentByXid_GetComponent_ComponentFragment_AdditionalLicenses struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetComponentByXid_GetComponent_ComponentFragment_CompliesWith struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Tsdc struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Image struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Readme struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByXid_GetComponent_ComponentFragment_ContributionGuide struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Bom struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByXid_GetComponent_ComponentFragment_ManufacturingInstructions struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByXid_GetComponent_ComponentFragment_UserManual struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Product struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByXid_GetComponent_ComponentFragment_UsedIn struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Source struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Export struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Auxiliary struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByXid_GetComponent_ComponentFragment_Material struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByXid_GetComponent_ComponentFragment_ManufacturingProcess struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponentByXid_GetComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_StringV struct {
	ID          string "json:\"id\" graphql:\"id\""
	StringValue string "json:\"stringValue\" graphql:\"stringValue\""
}
type GetComponentByXid_GetComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_FloatV struct {
	ID         string  "json:\"id\" graphql:\"id\""
	FloatValue float64 "json:\"floatValue\" graphql:\"floatValue\""
}
type GetComponentByXid_GetComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value struct {
	StringV GetComponentByXid_GetComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_StringV "graphql:\"... on StringV\""
	FloatV  GetComponentByXid_GetComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_FloatV  "graphql:\"... on FloatV\""
}
type GetComponentID_GetComponent struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Releases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponents_QueryComponent_ComponentFragment_Repository struct {
	ID   string  "json:\"id\" graphql:\"id\""
	Name *string "json:\"name\" graphql:\"name\""
}
type GetComponents_QueryComponent_ComponentFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetComponents_QueryComponent_ComponentFragment_AdditionalLicenses struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetComponents_QueryComponent_ComponentFragment_CompliesWith struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponents_QueryComponent_ComponentFragment_Tsdc struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponents_QueryComponent_ComponentFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponents_QueryComponent_ComponentFragment_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetComponents_QueryComponent_ComponentFragment_Image struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponents_QueryComponent_ComponentFragment_Readme struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponents_QueryComponent_ComponentFragment_ContributionGuide struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponents_QueryComponent_ComponentFragment_Bom struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponents_QueryComponent_ComponentFragment_ManufacturingInstructions struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponents_QueryComponent_ComponentFragment_UserManual struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponents_QueryComponent_ComponentFragment_Product struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponents_QueryComponent_ComponentFragment_UsedIn struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponents_QueryComponent_ComponentFragment_Source struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponents_QueryComponent_ComponentFragment_Export struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponents_QueryComponent_ComponentFragment_Auxiliary struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetComponents_QueryComponent_ComponentFragment_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponents_QueryComponent_ComponentFragment_Material struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponents_QueryComponent_ComponentFragment_ManufacturingProcess struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetComponents_QueryComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_StringV struct {
	ID          string "json:\"id\" graphql:\"id\""
	StringValue string "json:\"stringValue\" graphql:\"stringValue\""
}
type GetComponents_QueryComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_FloatV struct {
	ID         string  "json:\"id\" graphql:\"id\""
	FloatValue float64 "json:\"floatValue\" graphql:\"floatValue\""
}
type GetComponents_QueryComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value struct {
	StringV GetComponents_QueryComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_StringV "graphql:\"... on StringV\""
	FloatV  GetComponents_QueryComponent_ComponentFragment_ProductionMetadata_KeyValueFragment_Value_FloatV  "graphql:\"... on FloatV\""
}
type GetComponents_AggregateComponent struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateComponents_AddComponent_Component struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateComponents_AddComponent struct {
	Component []*CreateComponents_AddComponent_Component "json:\"component\" graphql:\"component\""
}
type UpdateComponents_UpdateComponent_Component struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateComponents_UpdateComponent struct {
	Component []*UpdateComponents_UpdateComponent_Component "json:\"component\" graphql:\"component\""
}
type DeleteComponents_DeleteComponent_Component struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteComponents_DeleteComponent struct {
	Component []*DeleteComponents_DeleteComponent_Component "json:\"component\" graphql:\"component\""
}
type GetDatabases_AggregateDatabase struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateDatabases_AddDatabase_Database struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateDatabases_AddDatabase struct {
	Database []*CreateDatabases_AddDatabase_Database "json:\"database\" graphql:\"database\""
}
type UpdateDatabases_UpdateDatabase_Database struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateDatabases_UpdateDatabase struct {
	Database []*UpdateDatabases_UpdateDatabase_Database "json:\"database\" graphql:\"database\""
}
type DeleteDatabases_DeleteDatabase_Database struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteDatabases_DeleteDatabase struct {
	Database []*DeleteDatabases_DeleteDatabase_Database "json:\"database\" graphql:\"database\""
}
type GetFileID_GetFile struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetFiles_AggregateFile struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateFiles_AddFile_File struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateFiles_AddFile struct {
	File []*CreateFiles_AddFile_File "json:\"file\" graphql:\"file\""
}
type UpdateFiles_UpdateFile_File struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateFiles_UpdateFile struct {
	File []*UpdateFiles_UpdateFile_File "json:\"file\" graphql:\"file\""
}
type DeleteFiles_DeleteFile_File struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteFiles_DeleteFile struct {
	File []*DeleteFiles_DeleteFile_File "json:\"file\" graphql:\"file\""
}
type GetHostID_GetHost struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetHosts_AggregateHost struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateHosts_AddHost_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateHosts_AddHost struct {
	Host []*CreateHosts_AddHost_Host "json:\"host\" graphql:\"host\""
}
type UpdateHosts_UpdateHost_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateHosts_UpdateHost struct {
	Host []*UpdateHosts_UpdateHost_Host "json:\"host\" graphql:\"host\""
}
type DeleteHosts_DeleteHost_Host struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteHosts_DeleteHost struct {
	Host []*DeleteHosts_DeleteHost_Host "json:\"host\" graphql:\"host\""
}
type GetStringVs_AggregateStringV struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateStringVs_AddStringV_StringV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateStringVs_AddStringV struct {
	StringV []*CreateStringVs_AddStringV_StringV "json:\"stringV\" graphql:\"stringV\""
}
type UpdateStringVs_UpdateStringV_StringV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateStringVs_UpdateStringV struct {
	StringV []*UpdateStringVs_UpdateStringV_StringV "json:\"stringV\" graphql:\"stringV\""
}
type DeleteStringVs_DeleteStringV_StringV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteStringVs_DeleteStringV struct {
	StringV []*DeleteStringVs_DeleteStringV_StringV "json:\"stringV\" graphql:\"stringV\""
}
type GetFloatVs_AggregateFloatV struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateFloatVs_AddFloatV_FloatV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateFloatVs_AddFloatV struct {
	FloatV []*CreateFloatVs_AddFloatV_FloatV "json:\"floatV\" graphql:\"floatV\""
}
type UpdateFloatVs_UpdateFloatV_FloatV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateFloatVs_UpdateFloatV struct {
	FloatV []*UpdateFloatVs_UpdateFloatV_FloatV "json:\"floatV\" graphql:\"floatV\""
}
type DeleteFloatVs_DeleteFloatV_FloatV struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteFloatVs_DeleteFloatV struct {
	FloatV []*DeleteFloatVs_DeleteFloatV_FloatV "json:\"floatV\" graphql:\"floatV\""
}
type GetKeyValueByID_GetKeyValue_KeyValueFragment_Value_StringV struct {
	ID          string "json:\"id\" graphql:\"id\""
	StringValue string "json:\"stringValue\" graphql:\"stringValue\""
}
type GetKeyValueByID_GetKeyValue_KeyValueFragment_Value_FloatV struct {
	ID         string  "json:\"id\" graphql:\"id\""
	FloatValue float64 "json:\"floatValue\" graphql:\"floatValue\""
}
type GetKeyValueByID_GetKeyValue_KeyValueFragment_Value struct {
	StringV GetKeyValueByID_GetKeyValue_KeyValueFragment_Value_StringV "graphql:\"... on StringV\""
	FloatV  GetKeyValueByID_GetKeyValue_KeyValueFragment_Value_FloatV  "graphql:\"... on FloatV\""
}
type GetKeyValues_QueryKeyValue_KeyValueFragment_Value_StringV struct {
	ID          string "json:\"id\" graphql:\"id\""
	StringValue string "json:\"stringValue\" graphql:\"stringValue\""
}
type GetKeyValues_QueryKeyValue_KeyValueFragment_Value_FloatV struct {
	ID         string  "json:\"id\" graphql:\"id\""
	FloatValue float64 "json:\"floatValue\" graphql:\"floatValue\""
}
type GetKeyValues_QueryKeyValue_KeyValueFragment_Value struct {
	StringV GetKeyValues_QueryKeyValue_KeyValueFragment_Value_StringV "graphql:\"... on StringV\""
	FloatV  GetKeyValues_QueryKeyValue_KeyValueFragment_Value_FloatV  "graphql:\"... on FloatV\""
}
type GetKeyValues_AggregateKeyValue struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateKeyValues_AddKeyValue_KeyValue struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateKeyValues_AddKeyValue struct {
	KeyValue []*CreateKeyValues_AddKeyValue_KeyValue "json:\"keyValue\" graphql:\"keyValue\""
}
type UpdateKeyValues_UpdateKeyValue_KeyValue struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateKeyValues_UpdateKeyValue struct {
	KeyValue []*UpdateKeyValues_UpdateKeyValue_KeyValue "json:\"keyValue\" graphql:\"keyValue\""
}
type DeleteKeyValues_DeleteKeyValue_KeyValue struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteKeyValues_DeleteKeyValue struct {
	KeyValue []*DeleteKeyValues_DeleteKeyValue_KeyValue "json:\"keyValue\" graphql:\"keyValue\""
}
type GetLicenseID_GetLicense struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetLicenses_AggregateLicense struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateLicenses_AddLicense_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateLicenses_AddLicense struct {
	License []*CreateLicenses_AddLicense_License "json:\"license\" graphql:\"license\""
}
type UpdateLicenses_UpdateLicense_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateLicenses_UpdateLicense struct {
	License []*UpdateLicenses_UpdateLicense_License "json:\"license\" graphql:\"license\""
}
type DeleteLicenses_DeleteLicense_License struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteLicenses_DeleteLicense struct {
	License []*DeleteLicenses_DeleteLicense_License "json:\"license\" graphql:\"license\""
}
type GetManufacturingProcesses_AggregateManufacturingProcess struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateManufacturingProcesses_AddManufacturingProcess_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateManufacturingProcesses_AddManufacturingProcess struct {
	ManufacturingProcess []*CreateManufacturingProcesses_AddManufacturingProcess_ManufacturingProcess "json:\"manufacturingProcess\" graphql:\"manufacturingProcess\""
}
type UpdateManufacturingProcesses_UpdateManufacturingProcess_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateManufacturingProcesses_UpdateManufacturingProcess struct {
	ManufacturingProcess []*UpdateManufacturingProcesses_UpdateManufacturingProcess_ManufacturingProcess "json:\"manufacturingProcess\" graphql:\"manufacturingProcess\""
}
type DeleteManufacturingProcesses_DeleteManufacturingProcess_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteManufacturingProcesses_DeleteManufacturingProcess struct {
	ManufacturingProcess []*DeleteManufacturingProcesses_DeleteManufacturingProcess_ManufacturingProcess "json:\"manufacturingProcess\" graphql:\"manufacturingProcess\""
}
type GetMaterials_AggregateMaterial struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateMaterials_AddMaterial_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateMaterials_AddMaterial struct {
	Material []*CreateMaterials_AddMaterial_Material "json:\"material\" graphql:\"material\""
}
type UpdateMaterials_UpdateMaterial_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateMaterials_UpdateMaterial struct {
	Material []*UpdateMaterials_UpdateMaterial_Material "json:\"material\" graphql:\"material\""
}
type DeleteMaterials_DeleteMaterial_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteMaterials_DeleteMaterial struct {
	Material []*DeleteMaterials_DeleteMaterial_Material "json:\"material\" graphql:\"material\""
}
type GetNodes_AggregateNode struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type DeleteNodes_DeleteNode_Node struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteNodes_DeleteNode struct {
	Node []*DeleteNodes_DeleteNode_Node "json:\"node\" graphql:\"node\""
}
type GetBoundingBoxDimensionss_AggregateBoundingBoxDimensions struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateBoundingBoxDimensionss_AddBoundingBoxDimensions_BoundingBoxDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateBoundingBoxDimensionss_AddBoundingBoxDimensions struct {
	BoundingBoxDimensions []*CreateBoundingBoxDimensionss_AddBoundingBoxDimensions_BoundingBoxDimensions "json:\"boundingBoxDimensions\" graphql:\"boundingBoxDimensions\""
}
type UpdateBoundingBoxDimensionss_UpdateBoundingBoxDimensions_BoundingBoxDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateBoundingBoxDimensionss_UpdateBoundingBoxDimensions struct {
	BoundingBoxDimensions []*UpdateBoundingBoxDimensionss_UpdateBoundingBoxDimensions_BoundingBoxDimensions "json:\"boundingBoxDimensions\" graphql:\"boundingBoxDimensions\""
}
type DeleteBoundingBoxDimensionss_DeleteBoundingBoxDimensions_BoundingBoxDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteBoundingBoxDimensionss_DeleteBoundingBoxDimensions struct {
	BoundingBoxDimensions []*DeleteBoundingBoxDimensionss_DeleteBoundingBoxDimensions_BoundingBoxDimensions "json:\"boundingBoxDimensions\" graphql:\"boundingBoxDimensions\""
}
type GetOpenSCADDimensionss_AggregateOpenSCADDimensions struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateOpenSCADDimensionss_AddOpenSCADDimensions_OpenSCADDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateOpenSCADDimensionss_AddOpenSCADDimensions struct {
	OpenSCADDimensions []*CreateOpenSCADDimensionss_AddOpenSCADDimensions_OpenSCADDimensions "json:\"openSCADDimensions\" graphql:\"openSCADDimensions\""
}
type UpdateOpenSCADDimensionss_UpdateOpenSCADDimensions_OpenSCADDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateOpenSCADDimensionss_UpdateOpenSCADDimensions struct {
	OpenSCADDimensions []*UpdateOpenSCADDimensionss_UpdateOpenSCADDimensions_OpenSCADDimensions "json:\"openSCADDimensions\" graphql:\"openSCADDimensions\""
}
type DeleteOpenSCADDimensionss_DeleteOpenSCADDimensions_OpenSCADDimensions struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteOpenSCADDimensionss_DeleteOpenSCADDimensions struct {
	OpenSCADDimensions []*DeleteOpenSCADDimensionss_DeleteOpenSCADDimensions_OpenSCADDimensions "json:\"openSCADDimensions\" graphql:\"openSCADDimensions\""
}
type GetProductByID_GetProduct_ProductFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetProductByID_GetProduct_ProductFragment_Release struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByID_GetProduct_ProductFragment_Releases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByID_GetProduct_ProductFragment_RenamedTo struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByID_GetProduct_ProductFragment_RenamedFrom struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByID_GetProduct_ProductFragment_ForkOf struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByID_GetProduct_ProductFragment_Forks struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByID_GetProduct_ProductFragment_Tags struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByID_GetProduct_ProductFragment_Category struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type GetProductByXid_GetProduct_ProductFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetProductByXid_GetProduct_ProductFragment_Release struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByXid_GetProduct_ProductFragment_Releases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByXid_GetProduct_ProductFragment_RenamedTo struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByXid_GetProduct_ProductFragment_RenamedFrom struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByXid_GetProduct_ProductFragment_ForkOf struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByXid_GetProduct_ProductFragment_Forks struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByXid_GetProduct_ProductFragment_Tags struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProductByXid_GetProduct_ProductFragment_Category struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type GetProductID_GetProduct struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetProducts_QueryProduct_ProductFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetProducts_QueryProduct_ProductFragment_Release struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProducts_QueryProduct_ProductFragment_Releases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProducts_QueryProduct_ProductFragment_RenamedTo struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProducts_QueryProduct_ProductFragment_RenamedFrom struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProducts_QueryProduct_ProductFragment_ForkOf struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProducts_QueryProduct_ProductFragment_Forks struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProducts_QueryProduct_ProductFragment_Tags struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetProducts_QueryProduct_ProductFragment_Category struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type GetProducts_AggregateProduct struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_RenamedTo struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_RenamedFrom struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_ForkOf_Release_Repository struct {
	URL string "json:\"url\" graphql:\"url\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_ForkOf_Release struct {
	Repository SearchProducts_QueryProduct_ProductSearchFragment_ForkOf_Release_Repository "json:\"repository\" graphql:\"repository\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_ForkOf struct {
	ID      string                                                           "json:\"id\" graphql:\"id\""
	Release SearchProducts_QueryProduct_ProductSearchFragment_ForkOf_Release "json:\"release\" graphql:\"release\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Forks struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Tags_TagFragment_Aliases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Tags_TagFragment_Related struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Category_CategoryFragment_Parent struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Category_CategoryFragment_Children struct {
	ID       string "json:\"id\" graphql:\"id\""
	FullName string "json:\"fullName\" graphql:\"fullName\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Category_CategoryFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Releases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Releases struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Repository_RepositoryFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_User_UserFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_Group_GroupFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Licensor_UserOrGroupFullFragment_Group_GroupFragment_Members struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_CompliesWith struct {
	Name string "json:\"name\" graphql:\"name\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Tsdc struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Components struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Product struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_UsedIn struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_Material struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_ManufacturingProcess struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release_ProductionMetadata struct {
	ID string "json:\"id\" graphql:\"id\""
}
type SearchProducts_QueryProduct_ProductSearchFragment_Release struct {
	ID                          string                                                                          "json:\"id\" graphql:\"id\""
	Xid                         string                                                                          "json:\"xid\" graphql:\"xid\""
	Name                        string                                                                          "json:\"name\" graphql:\"name\""
	Description                 string                                                                          "json:\"description\" graphql:\"description\""
	Version                     string                                                                          "json:\"version\" graphql:\"version\""
	CreatedAt                   time.Time                                                                       "json:\"createdAt\" graphql:\"createdAt\""
	Releases                    []*SearchProducts_QueryProduct_ProductSearchFragment_Release_Releases           "json:\"releases\" graphql:\"releases\""
	IsLatest                    bool                                                                            "json:\"isLatest\" graphql:\"isLatest\""
	Repository                  *RepositoryFragment                                                             "json:\"repository\" graphql:\"repository\""
	License                     *LicenseFragmentBasic                                                           "json:\"license\" graphql:\"license\""
	AdditionalLicenses          []*LicenseFragmentBasic                                                         "json:\"additionalLicenses\" graphql:\"additionalLicenses\""
	Licensor                    *UserOrGroupFullFragment                                                        "json:\"licensor\" graphql:\"licensor\""
	DocumentationLanguage       string                                                                          "json:\"documentationLanguage\" graphql:\"documentationLanguage\""
	TechnologyReadinessLevel    TechnologyReadinessLevel                                                        "json:\"technologyReadinessLevel\" graphql:\"technologyReadinessLevel\""
	DocumentationReadinessLevel DocumentationReadinessLevel                                                     "json:\"documentationReadinessLevel\" graphql:\"documentationReadinessLevel\""
	Attestation                 *string                                                                         "json:\"attestation\" graphql:\"attestation\""
	Publication                 *string                                                                         "json:\"publication\" graphql:\"publication\""
	CompliesWith                *SearchProducts_QueryProduct_ProductSearchFragment_Release_CompliesWith         "json:\"compliesWith\" graphql:\"compliesWith\""
	CpcPatentClass              *string                                                                         "json:\"cpcPatentClass\" graphql:\"cpcPatentClass\""
	Tsdc                        *SearchProducts_QueryProduct_ProductSearchFragment_Release_Tsdc                 "json:\"tsdc\" graphql:\"tsdc\""
	Components                  []*SearchProducts_QueryProduct_ProductSearchFragment_Release_Components         "json:\"components\" graphql:\"components\""
	Software                    []*SearchProducts_QueryProduct_ProductSearchFragment_Release_Software           "json:\"software\" graphql:\"software\""
	Image                       *FileFragment                                                                   "json:\"image\" graphql:\"image\""
	Readme                      *FileFragment                                                                   "json:\"readme\" graphql:\"readme\""
	ContributionGuide           *FileFragment                                                                   "json:\"contributionGuide\" graphql:\"contributionGuide\""
	Bom                         *FileFragment                                                                   "json:\"bom\" graphql:\"bom\""
	ManufacturingInstructions   *FileFragment                                                                   "json:\"manufacturingInstructions\" graphql:\"manufacturingInstructions\""
	UserManual                  *FileFragment                                                                   "json:\"userManual\" graphql:\"userManual\""
	Product                     *SearchProducts_QueryProduct_ProductSearchFragment_Release_Product              "json:\"product\" graphql:\"product\""
	UsedIn                      []*SearchProducts_QueryProduct_ProductSearchFragment_Release_UsedIn             "json:\"usedIn\" graphql:\"usedIn\""
	Source                      *FileFragment                                                                   "json:\"source\" graphql:\"source\""
	Export                      []*FileFragment                                                                 "json:\"export\" graphql:\"export\""
	Auxiliary                   []*FileFragment                                                                 "json:\"auxiliary\" graphql:\"auxiliary\""
	Organization                *SearchProducts_QueryProduct_ProductSearchFragment_Release_Organization         "json:\"organization\" graphql:\"organization\""
	Mass                        *float64                                                                        "json:\"mass\" graphql:\"mass\""
	OuterDimensions             *OuterDimensionsFragment                                                        "json:\"outerDimensions\" graphql:\"outerDimensions\""
	Material                    *SearchProducts_QueryProduct_ProductSearchFragment_Release_Material             "json:\"material\" graphql:\"material\""
	ManufacturingProcess        *SearchProducts_QueryProduct_ProductSearchFragment_Release_ManufacturingProcess "json:\"manufacturingProcess\" graphql:\"manufacturingProcess\""
	ProductionMetadata          []*SearchProducts_QueryProduct_ProductSearchFragment_Release_ProductionMetadata "json:\"productionMetadata\" graphql:\"productionMetadata\""
}
type SearchProducts_AggregateProduct struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateProducts_AddProduct_Product struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateProducts_AddProduct struct {
	Product []*CreateProducts_AddProduct_Product "json:\"product\" graphql:\"product\""
}
type UpdateProducts_UpdateProduct_Product struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateProducts_UpdateProduct struct {
	Product []*UpdateProducts_UpdateProduct_Product "json:\"product\" graphql:\"product\""
}
type DeleteProducts_DeleteProduct_Product struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteProducts_DeleteProduct struct {
	Product []*DeleteProducts_DeleteProduct_Product "json:\"product\" graphql:\"product\""
}
type GetRepositoryByID_GetRepository_RepositoryFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetRepositoryByXid_GetRepository_RepositoryFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetRepositoryID_GetRepository struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetRepositories_QueryRepository_RepositoryFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetRepositories_AggregateRepository struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateRepositories_AddRepository_Repository struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateRepositories_AddRepository struct {
	Repository []*CreateRepositories_AddRepository_Repository "json:\"repository\" graphql:\"repository\""
}
type UpdateRepositories_UpdateRepository_Repository struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateRepositories_UpdateRepository struct {
	Repository []*UpdateRepositories_UpdateRepository_Repository "json:\"repository\" graphql:\"repository\""
}
type DeleteRepositories_DeleteRepository_Repository struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteRepositories_DeleteRepository struct {
	Repository []*DeleteRepositories_DeleteRepository_Repository "json:\"repository\" graphql:\"repository\""
}
type GetSoftwareByID_GetSoftware_SoftwareFragment_InstallationGuide struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetSoftwareByID_GetSoftware_SoftwareFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetSoftwares_QuerySoftware_SoftwareFragment_InstallationGuide struct {
	ID   string "json:\"id\" graphql:\"id\""
	Path string "json:\"path\" graphql:\"path\""
}
type GetSoftwares_QuerySoftware_SoftwareFragment_License struct {
	ID  string "json:\"id\" graphql:\"id\""
	Xid string "json:\"xid\" graphql:\"xid\""
}
type GetSoftwares_AggregateSoftware struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateSoftwares_AddSoftware_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateSoftwares_AddSoftware struct {
	Software []*CreateSoftwares_AddSoftware_Software "json:\"software\" graphql:\"software\""
}
type UpdateSoftwares_UpdateSoftware_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateSoftwares_UpdateSoftware struct {
	Software []*UpdateSoftwares_UpdateSoftware_Software "json:\"software\" graphql:\"software\""
}
type DeleteSoftwares_DeleteSoftware_Software struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteSoftwares_DeleteSoftware struct {
	Software []*DeleteSoftwares_DeleteSoftware_Software "json:\"software\" graphql:\"software\""
}
type GetTagByID_GetTag_TagFragment_Aliases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTagByID_GetTag_TagFragment_Related struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTagByName_GetTag_TagFragment_Aliases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTagByName_GetTag_TagFragment_Related struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTagID_GetTag struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetTags_QueryTag_TagFragment_Aliases struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTags_QueryTag_TagFragment_Related struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTags_AggregateTag struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateTags_AddTag_Tag struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateTags_AddTag struct {
	Tag []*CreateTags_AddTag_Tag "json:\"tag\" graphql:\"tag\""
}
type UpdateTags_UpdateTag_Tag struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateTags_UpdateTag struct {
	Tag []*UpdateTags_UpdateTag_Tag "json:\"tag\" graphql:\"tag\""
}
type DeleteTags_DeleteTag_Tag struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteTags_DeleteTag struct {
	Tag []*DeleteTags_DeleteTag_Tag "json:\"tag\" graphql:\"tag\""
}
type GetTechnicalStandardByID_GetTechnicalStandard_TechnicalStandardFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTechnicalStandardByXid_GetTechnicalStandard_TechnicalStandardFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTechnicalStandardID_GetTechnicalStandard struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetTechnicalStandards_QueryTechnicalStandard_TechnicalStandardFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTechnicalStandards_AggregateTechnicalStandard struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateTechnicalStandards_AddTechnicalStandard_TechnicalStandard struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateTechnicalStandards_AddTechnicalStandard struct {
	TechnicalStandard []*CreateTechnicalStandards_AddTechnicalStandard_TechnicalStandard "json:\"technicalStandard\" graphql:\"technicalStandard\""
}
type UpdateTechnicalStandards_UpdateTechnicalStandard_TechnicalStandard struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateTechnicalStandards_UpdateTechnicalStandard struct {
	TechnicalStandard []*UpdateTechnicalStandards_UpdateTechnicalStandard_TechnicalStandard "json:\"technicalStandard\" graphql:\"technicalStandard\""
}
type DeleteTechnicalStandards_DeleteTechnicalStandard_TechnicalStandard struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteTechnicalStandards_DeleteTechnicalStandard struct {
	TechnicalStandard []*DeleteTechnicalStandards_DeleteTechnicalStandard_TechnicalStandard "json:\"technicalStandard\" graphql:\"technicalStandard\""
}
type GetTechnologySpecificDocumentationCriteriaByID_GetTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteriaFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTechnologySpecificDocumentationCriteriaByXid_GetTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteriaFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTechnologySpecificDocumentationCriteriaID_GetTechnologySpecificDocumentationCriteria struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetTechnologySpecificDocumentationCriterias_QueryTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteriaFragment_Components struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetTechnologySpecificDocumentationCriterias_AggregateTechnologySpecificDocumentationCriteria struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateTechnologySpecificDocumentationCriterias_AddTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteria struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateTechnologySpecificDocumentationCriterias_AddTechnologySpecificDocumentationCriteria struct {
	TechnologySpecificDocumentationCriteria []*CreateTechnologySpecificDocumentationCriterias_AddTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteria "json:\"technologySpecificDocumentationCriteria\" graphql:\"technologySpecificDocumentationCriteria\""
}
type UpdateTechnologySpecificDocumentationCriterias_UpdateTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteria struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateTechnologySpecificDocumentationCriterias_UpdateTechnologySpecificDocumentationCriteria struct {
	TechnologySpecificDocumentationCriteria []*UpdateTechnologySpecificDocumentationCriterias_UpdateTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteria "json:\"technologySpecificDocumentationCriteria\" graphql:\"technologySpecificDocumentationCriteria\""
}
type DeleteTechnologySpecificDocumentationCriterias_DeleteTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteria struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteTechnologySpecificDocumentationCriterias_DeleteTechnologySpecificDocumentationCriteria struct {
	TechnologySpecificDocumentationCriteria []*DeleteTechnologySpecificDocumentationCriterias_DeleteTechnologySpecificDocumentationCriteria_TechnologySpecificDocumentationCriteria "json:\"technologySpecificDocumentationCriteria\" graphql:\"technologySpecificDocumentationCriteria\""
}
type TestConnection_Schema_QueryType struct {
	Name *string "json:\"name\" graphql:\"name\""
}
type TestConnection_Schema struct {
	QueryType TestConnection_Schema_QueryType "json:\"queryType\" graphql:\"queryType\""
}
type GetUserOrGroupByID_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroupByID_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetUserOrGroupByID_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetUserOrGroupByID_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroupByID_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroupByID_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetUserOrGroupByID_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetUserOrGroupByID_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroupByID_GetUserOrGroup_Group_GroupFragment_Members struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type GetUserOrGroupByID_GetUserOrGroup struct {
	User  UserFragment  "graphql:\"... on User\""
	Group GroupFragment "graphql:\"... on Group\""
}
type GetUserOrGroupByXid_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroupByXid_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetUserOrGroupByXid_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetUserOrGroupByXid_GetUserOrGroup_User_UserFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroupByXid_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroupByXid_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetUserOrGroupByXid_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetUserOrGroupByXid_GetUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroupByXid_GetUserOrGroup_Group_GroupFragment_Members struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type GetUserOrGroupByXid_GetUserOrGroup struct {
	User  UserFragment  "graphql:\"... on User\""
	Group GroupFragment "graphql:\"... on Group\""
}
type GetUserOrGroupID_GetUserOrGroup struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup_User_UserFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroups_QueryUserOrGroup_User_UserFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetUserOrGroups_QueryUserOrGroup_User_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetUserOrGroups_QueryUserOrGroup_User_UserFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserOrGroups_QueryUserOrGroup_Group_GroupFragment_Members struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type GetUserOrGroups_QueryUserOrGroup struct {
	User  UserFragment  "graphql:\"... on User\""
	Group GroupFragment "graphql:\"... on Group\""
}
type GetUserOrGroups_AggregateUserOrGroup struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type UpdateUserOrGroups_UpdateUserOrGroup_UserOrGroup struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateUserOrGroups_UpdateUserOrGroup struct {
	UserOrGroup []*UpdateUserOrGroups_UpdateUserOrGroup_UserOrGroup "json:\"userOrGroup\" graphql:\"userOrGroup\""
}
type DeleteUserOrGroups_DeleteUserOrGroup_UserOrGroup struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteUserOrGroups_DeleteUserOrGroup struct {
	UserOrGroup []*DeleteUserOrGroups_DeleteUserOrGroup_UserOrGroup "json:\"userOrGroup\" graphql:\"userOrGroup\""
}
type GetUserByID_GetUser_UserFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserByID_GetUser_UserFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetUserByID_GetUser_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetUserByID_GetUser_UserFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserByXid_GetUser_UserFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserByXid_GetUser_UserFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetUserByXid_GetUser_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetUserByXid_GetUser_UserFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUserID_GetUser struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetUsers_QueryUser_UserFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUsers_QueryUser_UserFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetUsers_QueryUser_UserFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetUsers_QueryUser_UserFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetUsers_AggregateUser struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateUsers_AddUser_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateUsers_AddUser struct {
	User []*CreateUsers_AddUser_User "json:\"user\" graphql:\"user\""
}
type UpdateUsers_UpdateUser_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateUsers_UpdateUser struct {
	User []*UpdateUsers_UpdateUser_User "json:\"user\" graphql:\"user\""
}
type DeleteUsers_DeleteUser_User struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteUsers_DeleteUser struct {
	User []*DeleteUsers_DeleteUser_User "json:\"user\" graphql:\"user\""
}
type GetGroupByID_GetGroup_GroupFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetGroupByID_GetGroup_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetGroupByID_GetGroup_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetGroupByID_GetGroup_GroupFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetGroupByID_GetGroup_GroupFragment_Members struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type GetGroupByXid_GetGroup_GroupFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetGroupByXid_GetGroup_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetGroupByXid_GetGroup_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetGroupByXid_GetGroup_GroupFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetGroupByXid_GetGroup_GroupFragment_Members struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type GetGroupID_GetGroup struct {
	ID string "json:\"id\" graphql:\"id\""
}
type GetGroups_QueryGroup_GroupFragment_UserOrGroupFragment_Host struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetGroups_QueryGroup_GroupFragment_UserOrGroupFragment_Avatar struct {
	ID  string "json:\"id\" graphql:\"id\""
	URL string "json:\"url\" graphql:\"url\""
}
type GetGroups_QueryGroup_GroupFragment_UserOrGroupFragment_MemberOf struct {
	ID       string  "json:\"id\" graphql:\"id\""
	FullName *string "json:\"fullName\" graphql:\"fullName\""
}
type GetGroups_QueryGroup_GroupFragment_UserOrGroupFragment_Products struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}
type GetGroups_QueryGroup_GroupFragment_Members struct {
	Typename *string "json:\"__typename\" graphql:\"__typename\""
	ID       string  "json:\"id\" graphql:\"id\""
}
type GetGroups_AggregateGroup struct {
	Count *int64 "json:\"count\" graphql:\"count\""
}
type CreateGroups_AddGroup_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type CreateGroups_AddGroup struct {
	Group []*CreateGroups_AddGroup_Group "json:\"group\" graphql:\"group\""
}
type UpdateGroups_UpdateGroup_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type UpdateGroups_UpdateGroup struct {
	Group []*UpdateGroups_UpdateGroup_Group "json:\"group\" graphql:\"group\""
}
type DeleteGroups_DeleteGroup_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}
type DeleteGroups_DeleteGroup struct {
	Group []*DeleteGroups_DeleteGroup_Group "json:\"group\" graphql:\"group\""
}
type GetCategoryByID struct {
	GetCategory *CategoryFragment "json:\"getCategory\" graphql:\"getCategory\""
}
type GetCategoryByXid struct {
	GetCategory *CategoryFragment "json:\"getCategory\" graphql:\"getCategory\""
}
type GetCategoryID struct {
	GetCategory *GetCategoryID_GetCategory "json:\"getCategory\" graphql:\"getCategory\""
}
type GetCategories struct {
	QueryCategory     []*CategoryFragment              "json:\"queryCategory\" graphql:\"queryCategory\""
	AggregateCategory *GetCategories_AggregateCategory "json:\"aggregateCategory\" graphql:\"aggregateCategory\""
}
type CreateCategories struct {
	AddCategory *CreateCategories_AddCategory "json:\"addCategory\" graphql:\"addCategory\""
}
type UpdateCategories struct {
	UpdateCategory *UpdateCategories_UpdateCategory "json:\"updateCategory\" graphql:\"updateCategory\""
}
type DeleteCategories struct {
	DeleteCategory *DeleteCategories_DeleteCategory "json:\"deleteCategory\" graphql:\"deleteCategory\""
}
type GetComponentByID struct {
	GetComponent *ComponentFragment "json:\"getComponent\" graphql:\"getComponent\""
}
type GetComponentByXid struct {
	GetComponent *ComponentFragment "json:\"getComponent\" graphql:\"getComponent\""
}
type GetComponentID struct {
	GetComponent *GetComponentID_GetComponent "json:\"getComponent\" graphql:\"getComponent\""
}
type GetComponents struct {
	QueryComponent     []*ComponentFragment              "json:\"queryComponent\" graphql:\"queryComponent\""
	AggregateComponent *GetComponents_AggregateComponent "json:\"aggregateComponent\" graphql:\"aggregateComponent\""
}
type CreateComponents struct {
	AddComponent *CreateComponents_AddComponent "json:\"addComponent\" graphql:\"addComponent\""
}
type UpdateComponents struct {
	UpdateComponent *UpdateComponents_UpdateComponent "json:\"updateComponent\" graphql:\"updateComponent\""
}
type DeleteComponents struct {
	DeleteComponent *DeleteComponents_DeleteComponent "json:\"deleteComponent\" graphql:\"deleteComponent\""
}
type GetDatabaseByID struct {
	GetDatabase *DatabaseFragment "json:\"getDatabase\" graphql:\"getDatabase\""
}
type GetDatabases struct {
	QueryDatabase     []*DatabaseFragment             "json:\"queryDatabase\" graphql:\"queryDatabase\""
	AggregateDatabase *GetDatabases_AggregateDatabase "json:\"aggregateDatabase\" graphql:\"aggregateDatabase\""
}
type CreateDatabases struct {
	AddDatabase *CreateDatabases_AddDatabase "json:\"addDatabase\" graphql:\"addDatabase\""
}
type UpdateDatabases struct {
	UpdateDatabase *UpdateDatabases_UpdateDatabase "json:\"updateDatabase\" graphql:\"updateDatabase\""
}
type DeleteDatabases struct {
	DeleteDatabase *DeleteDatabases_DeleteDatabase "json:\"deleteDatabase\" graphql:\"deleteDatabase\""
}
type GetFileByID struct {
	GetFile *FileFragment "json:\"getFile\" graphql:\"getFile\""
}
type GetFileByXid struct {
	GetFile *FileFragment "json:\"getFile\" graphql:\"getFile\""
}
type GetFileID struct {
	GetFile *GetFileID_GetFile "json:\"getFile\" graphql:\"getFile\""
}
type GetFiles struct {
	QueryFile     []*FileFragment         "json:\"queryFile\" graphql:\"queryFile\""
	AggregateFile *GetFiles_AggregateFile "json:\"aggregateFile\" graphql:\"aggregateFile\""
}
type CreateFiles struct {
	AddFile *CreateFiles_AddFile "json:\"addFile\" graphql:\"addFile\""
}
type UpdateFiles struct {
	UpdateFile *UpdateFiles_UpdateFile "json:\"updateFile\" graphql:\"updateFile\""
}
type DeleteFiles struct {
	DeleteFile *DeleteFiles_DeleteFile "json:\"deleteFile\" graphql:\"deleteFile\""
}
type GetHostByID struct {
	GetHost *HostFragment "json:\"getHost\" graphql:\"getHost\""
}
type GetHostByDomain struct {
	GetHost *HostFragment "json:\"getHost\" graphql:\"getHost\""
}
type GetHostID struct {
	GetHost *GetHostID_GetHost "json:\"getHost\" graphql:\"getHost\""
}
type GetHosts struct {
	QueryHost     []*HostFragment         "json:\"queryHost\" graphql:\"queryHost\""
	AggregateHost *GetHosts_AggregateHost "json:\"aggregateHost\" graphql:\"aggregateHost\""
}
type CreateHosts struct {
	AddHost *CreateHosts_AddHost "json:\"addHost\" graphql:\"addHost\""
}
type UpdateHosts struct {
	UpdateHost *UpdateHosts_UpdateHost "json:\"updateHost\" graphql:\"updateHost\""
}
type DeleteHosts struct {
	DeleteHost *DeleteHosts_DeleteHost "json:\"deleteHost\" graphql:\"deleteHost\""
}
type GetStringVByID struct {
	GetStringV *StringVFragment "json:\"getStringV\" graphql:\"getStringV\""
}
type GetStringVs struct {
	QueryStringV     []*StringVFragment            "json:\"queryStringV\" graphql:\"queryStringV\""
	AggregateStringV *GetStringVs_AggregateStringV "json:\"aggregateStringV\" graphql:\"aggregateStringV\""
}
type CreateStringVs struct {
	AddStringV *CreateStringVs_AddStringV "json:\"addStringV\" graphql:\"addStringV\""
}
type UpdateStringVs struct {
	UpdateStringV *UpdateStringVs_UpdateStringV "json:\"updateStringV\" graphql:\"updateStringV\""
}
type DeleteStringVs struct {
	DeleteStringV *DeleteStringVs_DeleteStringV "json:\"deleteStringV\" graphql:\"deleteStringV\""
}
type GetFloatVByID struct {
	GetFloatV *FloatVFragment "json:\"getFloatV\" graphql:\"getFloatV\""
}
type GetFloatVs struct {
	QueryFloatV     []*FloatVFragment           "json:\"queryFloatV\" graphql:\"queryFloatV\""
	AggregateFloatV *GetFloatVs_AggregateFloatV "json:\"aggregateFloatV\" graphql:\"aggregateFloatV\""
}
type CreateFloatVs struct {
	AddFloatV *CreateFloatVs_AddFloatV "json:\"addFloatV\" graphql:\"addFloatV\""
}
type UpdateFloatVs struct {
	UpdateFloatV *UpdateFloatVs_UpdateFloatV "json:\"updateFloatV\" graphql:\"updateFloatV\""
}
type DeleteFloatVs struct {
	DeleteFloatV *DeleteFloatVs_DeleteFloatV "json:\"deleteFloatV\" graphql:\"deleteFloatV\""
}
type GetKeyValueByID struct {
	GetKeyValue *KeyValueFragment "json:\"getKeyValue\" graphql:\"getKeyValue\""
}
type GetKeyValues struct {
	QueryKeyValue     []*KeyValueFragment             "json:\"queryKeyValue\" graphql:\"queryKeyValue\""
	AggregateKeyValue *GetKeyValues_AggregateKeyValue "json:\"aggregateKeyValue\" graphql:\"aggregateKeyValue\""
}
type CreateKeyValues struct {
	AddKeyValue *CreateKeyValues_AddKeyValue "json:\"addKeyValue\" graphql:\"addKeyValue\""
}
type UpdateKeyValues struct {
	UpdateKeyValue *UpdateKeyValues_UpdateKeyValue "json:\"updateKeyValue\" graphql:\"updateKeyValue\""
}
type DeleteKeyValues struct {
	DeleteKeyValue *DeleteKeyValues_DeleteKeyValue "json:\"deleteKeyValue\" graphql:\"deleteKeyValue\""
}
type GetLicenseByID struct {
	GetLicense *LicenseFragment "json:\"getLicense\" graphql:\"getLicense\""
}
type GetLicenseByXid struct {
	GetLicense *LicenseFragment "json:\"getLicense\" graphql:\"getLicense\""
}
type GetLicenseID struct {
	GetLicense *GetLicenseID_GetLicense "json:\"getLicense\" graphql:\"getLicense\""
}
type GetLicenses struct {
	QueryLicense     []*LicenseFragment            "json:\"queryLicense\" graphql:\"queryLicense\""
	AggregateLicense *GetLicenses_AggregateLicense "json:\"aggregateLicense\" graphql:\"aggregateLicense\""
}
type GetAllLicensesBasic struct {
	QueryLicense []*LicenseFragmentBasic "json:\"queryLicense\" graphql:\"queryLicense\""
}
type CreateLicenses struct {
	AddLicense *CreateLicenses_AddLicense "json:\"addLicense\" graphql:\"addLicense\""
}
type UpdateLicenses struct {
	UpdateLicense *UpdateLicenses_UpdateLicense "json:\"updateLicense\" graphql:\"updateLicense\""
}
type DeleteLicenses struct {
	DeleteLicense *DeleteLicenses_DeleteLicense "json:\"deleteLicense\" graphql:\"deleteLicense\""
}
type GetManufacturingProcessByID struct {
	GetManufacturingProcess *ManufacturingProcessFragment "json:\"getManufacturingProcess\" graphql:\"getManufacturingProcess\""
}
type GetManufacturingProcesses struct {
	QueryManufacturingProcess     []*ManufacturingProcessFragment                          "json:\"queryManufacturingProcess\" graphql:\"queryManufacturingProcess\""
	AggregateManufacturingProcess *GetManufacturingProcesses_AggregateManufacturingProcess "json:\"aggregateManufacturingProcess\" graphql:\"aggregateManufacturingProcess\""
}
type CreateManufacturingProcesses struct {
	AddManufacturingProcess *CreateManufacturingProcesses_AddManufacturingProcess "json:\"addManufacturingProcess\" graphql:\"addManufacturingProcess\""
}
type UpdateManufacturingProcesses struct {
	UpdateManufacturingProcess *UpdateManufacturingProcesses_UpdateManufacturingProcess "json:\"updateManufacturingProcess\" graphql:\"updateManufacturingProcess\""
}
type DeleteManufacturingProcesses struct {
	DeleteManufacturingProcess *DeleteManufacturingProcesses_DeleteManufacturingProcess "json:\"deleteManufacturingProcess\" graphql:\"deleteManufacturingProcess\""
}
type GetMaterialByID struct {
	GetMaterial *MaterialFragment "json:\"getMaterial\" graphql:\"getMaterial\""
}
type GetMaterials struct {
	QueryMaterial     []*MaterialFragment             "json:\"queryMaterial\" graphql:\"queryMaterial\""
	AggregateMaterial *GetMaterials_AggregateMaterial "json:\"aggregateMaterial\" graphql:\"aggregateMaterial\""
}
type CreateMaterials struct {
	AddMaterial *CreateMaterials_AddMaterial "json:\"addMaterial\" graphql:\"addMaterial\""
}
type UpdateMaterials struct {
	UpdateMaterial *UpdateMaterials_UpdateMaterial "json:\"updateMaterial\" graphql:\"updateMaterial\""
}
type DeleteMaterials struct {
	DeleteMaterial *DeleteMaterials_DeleteMaterial "json:\"deleteMaterial\" graphql:\"deleteMaterial\""
}
type CheckNode struct {
	GetNode *NodeFragment "json:\"getNode\" graphql:\"getNode\""
}
type GetNodeDetails struct {
	GetNode *NodeFragment "json:\"getNode\" graphql:\"getNode\""
}
type GetNodeByID struct {
	GetNode *NodeFragment "json:\"getNode\" graphql:\"getNode\""
}
type GetNodes struct {
	QueryNode     []*NodeFragment         "json:\"queryNode\" graphql:\"queryNode\""
	AggregateNode *GetNodes_AggregateNode "json:\"aggregateNode\" graphql:\"aggregateNode\""
}
type DeleteNodes struct {
	DeleteNode *DeleteNodes_DeleteNode "json:\"deleteNode\" graphql:\"deleteNode\""
}
type GetBoundingBoxDimensionsByID struct {
	GetBoundingBoxDimensions *BoundingBoxDimensionsFragment "json:\"getBoundingBoxDimensions\" graphql:\"getBoundingBoxDimensions\""
}
type GetBoundingBoxDimensionss struct {
	QueryBoundingBoxDimensions     []*BoundingBoxDimensionsFragment                          "json:\"queryBoundingBoxDimensions\" graphql:\"queryBoundingBoxDimensions\""
	AggregateBoundingBoxDimensions *GetBoundingBoxDimensionss_AggregateBoundingBoxDimensions "json:\"aggregateBoundingBoxDimensions\" graphql:\"aggregateBoundingBoxDimensions\""
}
type CreateBoundingBoxDimensionss struct {
	AddBoundingBoxDimensions *CreateBoundingBoxDimensionss_AddBoundingBoxDimensions "json:\"addBoundingBoxDimensions\" graphql:\"addBoundingBoxDimensions\""
}
type UpdateBoundingBoxDimensionss struct {
	UpdateBoundingBoxDimensions *UpdateBoundingBoxDimensionss_UpdateBoundingBoxDimensions "json:\"updateBoundingBoxDimensions\" graphql:\"updateBoundingBoxDimensions\""
}
type DeleteBoundingBoxDimensionss struct {
	DeleteBoundingBoxDimensions *DeleteBoundingBoxDimensionss_DeleteBoundingBoxDimensions "json:\"deleteBoundingBoxDimensions\" graphql:\"deleteBoundingBoxDimensions\""
}
type GetOpenSCADDimensionsByID struct {
	GetOpenSCADDimensions *OpenSCADDimensionsFragment "json:\"getOpenSCADDimensions\" graphql:\"getOpenSCADDimensions\""
}
type GetOpenSCADDimensionss struct {
	QueryOpenSCADDimensions     []*OpenSCADDimensionsFragment                       "json:\"queryOpenSCADDimensions\" graphql:\"queryOpenSCADDimensions\""
	AggregateOpenSCADDimensions *GetOpenSCADDimensionss_AggregateOpenSCADDimensions "json:\"aggregateOpenSCADDimensions\" graphql:\"aggregateOpenSCADDimensions\""
}
type CreateOpenSCADDimensionss struct {
	AddOpenSCADDimensions *CreateOpenSCADDimensionss_AddOpenSCADDimensions "json:\"addOpenSCADDimensions\" graphql:\"addOpenSCADDimensions\""
}
type UpdateOpenSCADDimensionss struct {
	UpdateOpenSCADDimensions *UpdateOpenSCADDimensionss_UpdateOpenSCADDimensions "json:\"updateOpenSCADDimensions\" graphql:\"updateOpenSCADDimensions\""
}
type DeleteOpenSCADDimensionss struct {
	DeleteOpenSCADDimensions *DeleteOpenSCADDimensionss_DeleteOpenSCADDimensions "json:\"deleteOpenSCADDimensions\" graphql:\"deleteOpenSCADDimensions\""
}
type GetProductByID struct {
	GetProduct *ProductFragment "json:\"getProduct\" graphql:\"getProduct\""
}
type GetProductByXid struct {
	GetProduct *ProductFragment "json:\"getProduct\" graphql:\"getProduct\""
}
type GetProductID struct {
	GetProduct *GetProductID_GetProduct "json:\"getProduct\" graphql:\"getProduct\""
}
type GetProducts struct {
	QueryProduct     []*ProductFragment            "json:\"queryProduct\" graphql:\"queryProduct\""
	AggregateProduct *GetProducts_AggregateProduct "json:\"aggregateProduct\" graphql:\"aggregateProduct\""
}
type SearchProducts struct {
	QueryProduct     []*ProductSearchFragment         "json:\"queryProduct\" graphql:\"queryProduct\""
	AggregateProduct *SearchProducts_AggregateProduct "json:\"aggregateProduct\" graphql:\"aggregateProduct\""
}
type CreateProducts struct {
	AddProduct *CreateProducts_AddProduct "json:\"addProduct\" graphql:\"addProduct\""
}
type UpdateProducts struct {
	UpdateProduct *UpdateProducts_UpdateProduct "json:\"updateProduct\" graphql:\"updateProduct\""
}
type DeleteProducts struct {
	DeleteProduct *DeleteProducts_DeleteProduct "json:\"deleteProduct\" graphql:\"deleteProduct\""
}
type GetRepositoryByID struct {
	GetRepository *RepositoryFragment "json:\"getRepository\" graphql:\"getRepository\""
}
type GetRepositoryByXid struct {
	GetRepository *RepositoryFragment "json:\"getRepository\" graphql:\"getRepository\""
}
type GetRepositoryID struct {
	GetRepository *GetRepositoryID_GetRepository "json:\"getRepository\" graphql:\"getRepository\""
}
type GetRepositories struct {
	QueryRepository     []*RepositoryFragment                "json:\"queryRepository\" graphql:\"queryRepository\""
	AggregateRepository *GetRepositories_AggregateRepository "json:\"aggregateRepository\" graphql:\"aggregateRepository\""
}
type CreateRepositories struct {
	AddRepository *CreateRepositories_AddRepository "json:\"addRepository\" graphql:\"addRepository\""
}
type UpdateRepositories struct {
	UpdateRepository *UpdateRepositories_UpdateRepository "json:\"updateRepository\" graphql:\"updateRepository\""
}
type DeleteRepositories struct {
	DeleteRepository *DeleteRepositories_DeleteRepository "json:\"deleteRepository\" graphql:\"deleteRepository\""
}
type GetSoftwareByID struct {
	GetSoftware *SoftwareFragment "json:\"getSoftware\" graphql:\"getSoftware\""
}
type GetSoftwares struct {
	QuerySoftware     []*SoftwareFragment             "json:\"querySoftware\" graphql:\"querySoftware\""
	AggregateSoftware *GetSoftwares_AggregateSoftware "json:\"aggregateSoftware\" graphql:\"aggregateSoftware\""
}
type CreateSoftwares struct {
	AddSoftware *CreateSoftwares_AddSoftware "json:\"addSoftware\" graphql:\"addSoftware\""
}
type UpdateSoftwares struct {
	UpdateSoftware *UpdateSoftwares_UpdateSoftware "json:\"updateSoftware\" graphql:\"updateSoftware\""
}
type DeleteSoftwares struct {
	DeleteSoftware *DeleteSoftwares_DeleteSoftware "json:\"deleteSoftware\" graphql:\"deleteSoftware\""
}
type GetTagByID struct {
	GetTag *TagFragment "json:\"getTag\" graphql:\"getTag\""
}
type GetTagByName struct {
	GetTag *TagFragment "json:\"getTag\" graphql:\"getTag\""
}
type GetTagID struct {
	GetTag *GetTagID_GetTag "json:\"getTag\" graphql:\"getTag\""
}
type GetTags struct {
	QueryTag     []*TagFragment        "json:\"queryTag\" graphql:\"queryTag\""
	AggregateTag *GetTags_AggregateTag "json:\"aggregateTag\" graphql:\"aggregateTag\""
}
type CreateTags struct {
	AddTag *CreateTags_AddTag "json:\"addTag\" graphql:\"addTag\""
}
type UpdateTags struct {
	UpdateTag *UpdateTags_UpdateTag "json:\"updateTag\" graphql:\"updateTag\""
}
type DeleteTags struct {
	DeleteTag *DeleteTags_DeleteTag "json:\"deleteTag\" graphql:\"deleteTag\""
}
type GetTechnicalStandardByID struct {
	GetTechnicalStandard *TechnicalStandardFragment "json:\"getTechnicalStandard\" graphql:\"getTechnicalStandard\""
}
type GetTechnicalStandardByXid struct {
	GetTechnicalStandard *TechnicalStandardFragment "json:\"getTechnicalStandard\" graphql:\"getTechnicalStandard\""
}
type GetTechnicalStandardID struct {
	GetTechnicalStandard *GetTechnicalStandardID_GetTechnicalStandard "json:\"getTechnicalStandard\" graphql:\"getTechnicalStandard\""
}
type GetTechnicalStandards struct {
	QueryTechnicalStandard     []*TechnicalStandardFragment                      "json:\"queryTechnicalStandard\" graphql:\"queryTechnicalStandard\""
	AggregateTechnicalStandard *GetTechnicalStandards_AggregateTechnicalStandard "json:\"aggregateTechnicalStandard\" graphql:\"aggregateTechnicalStandard\""
}
type CreateTechnicalStandards struct {
	AddTechnicalStandard *CreateTechnicalStandards_AddTechnicalStandard "json:\"addTechnicalStandard\" graphql:\"addTechnicalStandard\""
}
type UpdateTechnicalStandards struct {
	UpdateTechnicalStandard *UpdateTechnicalStandards_UpdateTechnicalStandard "json:\"updateTechnicalStandard\" graphql:\"updateTechnicalStandard\""
}
type DeleteTechnicalStandards struct {
	DeleteTechnicalStandard *DeleteTechnicalStandards_DeleteTechnicalStandard "json:\"deleteTechnicalStandard\" graphql:\"deleteTechnicalStandard\""
}
type GetTechnologySpecificDocumentationCriteriaByID struct {
	GetTechnologySpecificDocumentationCriteria *TechnologySpecificDocumentationCriteriaFragment "json:\"getTechnologySpecificDocumentationCriteria\" graphql:\"getTechnologySpecificDocumentationCriteria\""
}
type GetTechnologySpecificDocumentationCriteriaByXid struct {
	GetTechnologySpecificDocumentationCriteria *TechnologySpecificDocumentationCriteriaFragment "json:\"getTechnologySpecificDocumentationCriteria\" graphql:\"getTechnologySpecificDocumentationCriteria\""
}
type GetTechnologySpecificDocumentationCriteriaID struct {
	GetTechnologySpecificDocumentationCriteria *GetTechnologySpecificDocumentationCriteriaID_GetTechnologySpecificDocumentationCriteria "json:\"getTechnologySpecificDocumentationCriteria\" graphql:\"getTechnologySpecificDocumentationCriteria\""
}
type GetTechnologySpecificDocumentationCriterias struct {
	QueryTechnologySpecificDocumentationCriteria     []*TechnologySpecificDocumentationCriteriaFragment                                            "json:\"queryTechnologySpecificDocumentationCriteria\" graphql:\"queryTechnologySpecificDocumentationCriteria\""
	AggregateTechnologySpecificDocumentationCriteria *GetTechnologySpecificDocumentationCriterias_AggregateTechnologySpecificDocumentationCriteria "json:\"aggregateTechnologySpecificDocumentationCriteria\" graphql:\"aggregateTechnologySpecificDocumentationCriteria\""
}
type CreateTechnologySpecificDocumentationCriterias struct {
	AddTechnologySpecificDocumentationCriteria *CreateTechnologySpecificDocumentationCriterias_AddTechnologySpecificDocumentationCriteria "json:\"addTechnologySpecificDocumentationCriteria\" graphql:\"addTechnologySpecificDocumentationCriteria\""
}
type UpdateTechnologySpecificDocumentationCriterias struct {
	UpdateTechnologySpecificDocumentationCriteria *UpdateTechnologySpecificDocumentationCriterias_UpdateTechnologySpecificDocumentationCriteria "json:\"updateTechnologySpecificDocumentationCriteria\" graphql:\"updateTechnologySpecificDocumentationCriteria\""
}
type DeleteTechnologySpecificDocumentationCriterias struct {
	DeleteTechnologySpecificDocumentationCriteria *DeleteTechnologySpecificDocumentationCriterias_DeleteTechnologySpecificDocumentationCriteria "json:\"deleteTechnologySpecificDocumentationCriteria\" graphql:\"deleteTechnologySpecificDocumentationCriteria\""
}
type TestConnection struct {
	Schema TestConnection_Schema "json:\"__schema\" graphql:\"__schema\""
}
type GetUserOrGroupByID struct {
	GetUserOrGroup *GetUserOrGroupByID_GetUserOrGroup "json:\"getUserOrGroup\" graphql:\"getUserOrGroup\""
}
type GetUserOrGroupByXid struct {
	GetUserOrGroup *GetUserOrGroupByXid_GetUserOrGroup "json:\"getUserOrGroup\" graphql:\"getUserOrGroup\""
}
type GetUserOrGroupID struct {
	GetUserOrGroup *GetUserOrGroupID_GetUserOrGroup "json:\"getUserOrGroup\" graphql:\"getUserOrGroup\""
}
type GetUserOrGroups struct {
	QueryUserOrGroup     []*GetUserOrGroups_QueryUserOrGroup   "json:\"queryUserOrGroup\" graphql:\"queryUserOrGroup\""
	AggregateUserOrGroup *GetUserOrGroups_AggregateUserOrGroup "json:\"aggregateUserOrGroup\" graphql:\"aggregateUserOrGroup\""
}
type UpdateUserOrGroups struct {
	UpdateUserOrGroup *UpdateUserOrGroups_UpdateUserOrGroup "json:\"updateUserOrGroup\" graphql:\"updateUserOrGroup\""
}
type DeleteUserOrGroups struct {
	DeleteUserOrGroup *DeleteUserOrGroups_DeleteUserOrGroup "json:\"deleteUserOrGroup\" graphql:\"deleteUserOrGroup\""
}
type GetUserByID struct {
	GetUser *UserFragment "json:\"getUser\" graphql:\"getUser\""
}
type GetUserByXid struct {
	GetUser *UserFragment "json:\"getUser\" graphql:\"getUser\""
}
type GetUserID struct {
	GetUser *GetUserID_GetUser "json:\"getUser\" graphql:\"getUser\""
}
type GetUsers struct {
	QueryUser     []*UserFragment         "json:\"queryUser\" graphql:\"queryUser\""
	AggregateUser *GetUsers_AggregateUser "json:\"aggregateUser\" graphql:\"aggregateUser\""
}
type CreateUsers struct {
	AddUser *CreateUsers_AddUser "json:\"addUser\" graphql:\"addUser\""
}
type UpdateUsers struct {
	UpdateUser *UpdateUsers_UpdateUser "json:\"updateUser\" graphql:\"updateUser\""
}
type DeleteUsers struct {
	DeleteUser *DeleteUsers_DeleteUser "json:\"deleteUser\" graphql:\"deleteUser\""
}
type GetGroupByID struct {
	GetGroup *GroupFragment "json:\"getGroup\" graphql:\"getGroup\""
}
type GetGroupByXid struct {
	GetGroup *GroupFragment "json:\"getGroup\" graphql:\"getGroup\""
}
type GetGroupID struct {
	GetGroup *GetGroupID_GetGroup "json:\"getGroup\" graphql:\"getGroup\""
}
type GetGroups struct {
	QueryGroup     []*GroupFragment          "json:\"queryGroup\" graphql:\"queryGroup\""
	AggregateGroup *GetGroups_AggregateGroup "json:\"aggregateGroup\" graphql:\"aggregateGroup\""
}
type CreateGroups struct {
	AddGroup *CreateGroups_AddGroup "json:\"addGroup\" graphql:\"addGroup\""
}
type UpdateGroups struct {
	UpdateGroup *UpdateGroups_UpdateGroup "json:\"updateGroup\" graphql:\"updateGroup\""
}
type DeleteGroups struct {
	DeleteGroup *DeleteGroups_DeleteGroup "json:\"deleteGroup\" graphql:\"deleteGroup\""
}

const GetCategoryByIDDocument = `query GetCategoryByID ($id: ID!) {
	getCategory(id: $id) {
		... CategoryFragment
	}
}
fragment CategoryFragment on Category {
	id
	xid
	fullName
	name
	description
	parent {
		id
		fullName
	}
	children {
		id
		fullName
	}
	products {
		id
		name
	}
}
`

func (c *Client) GetCategoryByID(ctx context.Context, id string) (*GetCategoryByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetCategoryByID",
		Query:         GetCategoryByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetCategoryByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetCategoryByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetCategoryByID",
		Query:         GetCategoryByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetCategoryByXidDocument = `query GetCategoryByXid ($xid: String!) {
	getCategory(xid: $xid) {
		... CategoryFragment
	}
}
fragment CategoryFragment on Category {
	id
	xid
	fullName
	name
	description
	parent {
		id
		fullName
	}
	children {
		id
		fullName
	}
	products {
		id
		name
	}
}
`

func (c *Client) GetCategoryByXid(ctx context.Context, xid string) (*GetCategoryByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetCategoryByXid",
		Query:         GetCategoryByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetCategoryByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetCategoryByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetCategoryByXid",
		Query:         GetCategoryByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetCategoryIDDocument = `query GetCategoryID ($xid: String!) {
	getCategory(xid: $xid) {
		id
	}
}
`

func (c *Client) GetCategoryID(ctx context.Context, xid string) (*GetCategoryID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetCategoryID",
		Query:         GetCategoryIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetCategoryID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetCategoryIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetCategoryID",
		Query:         GetCategoryIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetCategoriesDocument = `query GetCategories ($getFilter: CategoryFilter, $order: CategoryOrder, $first: Int, $offset: Int) {
	queryCategory(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... CategoryFragment
	}
	aggregateCategory(filter: $getFilter) {
		count
	}
}
fragment CategoryFragment on Category {
	id
	xid
	fullName
	name
	description
	parent {
		id
		fullName
	}
	children {
		id
		fullName
	}
	products {
		id
		name
	}
}
`

func (c *Client) GetCategories(ctx context.Context, getFilter *CategoryFilter, order *CategoryOrder, first *int64, offset *int64) (*GetCategories, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetCategories",
		Query:         GetCategoriesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetCategories
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetCategoriesWithResponse(ctx context.Context, getFilter *CategoryFilter, order *CategoryOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetCategories",
		Query:         GetCategoriesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateCategoriesDocument = `mutation CreateCategories ($createInput: [AddCategoryInput!]!) {
	addCategory(input: $createInput, upsert: true) {
		category {
			id
		}
	}
}
`

func (c *Client) CreateCategories(ctx context.Context, createInput []*AddCategoryInput) (*CreateCategories, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateCategories",
		Query:         CreateCategoriesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateCategories
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateCategoriesWithResponse(ctx context.Context, createInput []*AddCategoryInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateCategories",
		Query:         CreateCategoriesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateCategoriesDocument = `mutation UpdateCategories ($updateInput: UpdateCategoryInput!) {
	updateCategory(input: $updateInput) {
		category {
			id
		}
	}
}
`

func (c *Client) UpdateCategories(ctx context.Context, updateInput UpdateCategoryInput) (*UpdateCategories, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateCategories",
		Query:         UpdateCategoriesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateCategories
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateCategoriesWithResponse(ctx context.Context, updateInput UpdateCategoryInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateCategories",
		Query:         UpdateCategoriesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteCategoriesDocument = `mutation DeleteCategories ($delFilter: CategoryFilter!) {
	deleteCategory(filter: $delFilter) {
		category {
			id
		}
	}
}
`

func (c *Client) DeleteCategories(ctx context.Context, delFilter CategoryFilter) (*DeleteCategories, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteCategories",
		Query:         DeleteCategoriesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteCategories
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteCategoriesWithResponse(ctx context.Context, delFilter CategoryFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteCategories",
		Query:         DeleteCategoriesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetComponentByIDDocument = `query GetComponentByID ($id: ID!) {
	getComponent(id: $id) {
		... ComponentFragment
	}
}
fragment KeyValueFragment on KeyValue {
	id
	key
	value {
		... on StringV {
			id
			stringValue: value
		}
		... on FloatV {
			id
			floatValue: value
		}
	}
}
fragment ComponentFragment on Component {
	id
	xid
	name
	description
	version
	createdAt
	releases {
		id
		name
	}
	isLatest
	repository {
		id
		name
	}
	license {
		id
		xid
	}
	additionalLicenses {
		id
		xid
	}
	licensor {
		... UserOrGroupBasicFragment
	}
	documentationLanguage
	technologyReadinessLevel
	documentationReadinessLevel
	attestation
	publication
	compliesWith {
		id
		name
	}
	cpcPatentClass
	tsdc {
		id
		name
	}
	components {
		id
		name
	}
	software {
		id
	}
	image {
		id
		path
	}
	readme {
		id
		path
	}
	contributionGuide {
		id
		path
	}
	bom {
		id
		path
	}
	manufacturingInstructions {
		id
		path
	}
	userManual {
		id
		path
	}
	product {
		id
		name
	}
	usedIn {
		id
		name
	}
	source {
		id
		path
	}
	export {
		id
		path
	}
	auxiliary {
		id
		path
	}
	organization {
		id
		name
	}
	mass
	outerDimensions {
		... OuterDimensionsFragment
	}
	material {
		id
		name
	}
	manufacturingProcess {
		id
		name
	}
	productionMetadata {
		... KeyValueFragment
	}
}
fragment UserOrGroupBasicFragment on UserOrGroup {
	__typename
	name
	fullName
	id
}
fragment OuterDimensionsFragment on OuterDimensions {
	__typename
	... on BoundingBoxDimensions {
		... BoundingBoxDimensionsFragment
	}
	... on OpenSCADDimensions {
		... OpenSCADDimensionsFragment
	}
}
fragment BoundingBoxDimensionsFragment on BoundingBoxDimensions {
	id
	height
	width
	depth
}
fragment OpenSCADDimensionsFragment on OpenSCADDimensions {
	id
	openscad
	unit
}
`

func (c *Client) GetComponentByID(ctx context.Context, id string) (*GetComponentByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponentByID",
		Query:         GetComponentByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetComponentByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetComponentByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponentByID",
		Query:         GetComponentByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetComponentByXidDocument = `query GetComponentByXid ($xid: String!) {
	getComponent(xid: $xid) {
		... ComponentFragment
	}
}
fragment UserOrGroupBasicFragment on UserOrGroup {
	__typename
	name
	fullName
	id
}
fragment OuterDimensionsFragment on OuterDimensions {
	__typename
	... on BoundingBoxDimensions {
		... BoundingBoxDimensionsFragment
	}
	... on OpenSCADDimensions {
		... OpenSCADDimensionsFragment
	}
}
fragment BoundingBoxDimensionsFragment on BoundingBoxDimensions {
	id
	height
	width
	depth
}
fragment OpenSCADDimensionsFragment on OpenSCADDimensions {
	id
	openscad
	unit
}
fragment KeyValueFragment on KeyValue {
	id
	key
	value {
		... on StringV {
			id
			stringValue: value
		}
		... on FloatV {
			id
			floatValue: value
		}
	}
}
fragment ComponentFragment on Component {
	id
	xid
	name
	description
	version
	createdAt
	releases {
		id
		name
	}
	isLatest
	repository {
		id
		name
	}
	license {
		id
		xid
	}
	additionalLicenses {
		id
		xid
	}
	licensor {
		... UserOrGroupBasicFragment
	}
	documentationLanguage
	technologyReadinessLevel
	documentationReadinessLevel
	attestation
	publication
	compliesWith {
		id
		name
	}
	cpcPatentClass
	tsdc {
		id
		name
	}
	components {
		id
		name
	}
	software {
		id
	}
	image {
		id
		path
	}
	readme {
		id
		path
	}
	contributionGuide {
		id
		path
	}
	bom {
		id
		path
	}
	manufacturingInstructions {
		id
		path
	}
	userManual {
		id
		path
	}
	product {
		id
		name
	}
	usedIn {
		id
		name
	}
	source {
		id
		path
	}
	export {
		id
		path
	}
	auxiliary {
		id
		path
	}
	organization {
		id
		name
	}
	mass
	outerDimensions {
		... OuterDimensionsFragment
	}
	material {
		id
		name
	}
	manufacturingProcess {
		id
		name
	}
	productionMetadata {
		... KeyValueFragment
	}
}
`

func (c *Client) GetComponentByXid(ctx context.Context, xid string) (*GetComponentByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponentByXid",
		Query:         GetComponentByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetComponentByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetComponentByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponentByXid",
		Query:         GetComponentByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetComponentIDDocument = `query GetComponentID ($xid: String!) {
	getComponent(xid: $xid) {
		id
	}
}
`

func (c *Client) GetComponentID(ctx context.Context, xid string) (*GetComponentID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponentID",
		Query:         GetComponentIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetComponentID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetComponentIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponentID",
		Query:         GetComponentIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetComponentsDocument = `query GetComponents ($getFilter: ComponentFilter, $order: ComponentOrder, $first: Int, $offset: Int) {
	queryComponent(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... ComponentFragment
	}
	aggregateComponent(filter: $getFilter) {
		count
	}
}
fragment ComponentFragment on Component {
	id
	xid
	name
	description
	version
	createdAt
	releases {
		id
		name
	}
	isLatest
	repository {
		id
		name
	}
	license {
		id
		xid
	}
	additionalLicenses {
		id
		xid
	}
	licensor {
		... UserOrGroupBasicFragment
	}
	documentationLanguage
	technologyReadinessLevel
	documentationReadinessLevel
	attestation
	publication
	compliesWith {
		id
		name
	}
	cpcPatentClass
	tsdc {
		id
		name
	}
	components {
		id
		name
	}
	software {
		id
	}
	image {
		id
		path
	}
	readme {
		id
		path
	}
	contributionGuide {
		id
		path
	}
	bom {
		id
		path
	}
	manufacturingInstructions {
		id
		path
	}
	userManual {
		id
		path
	}
	product {
		id
		name
	}
	usedIn {
		id
		name
	}
	source {
		id
		path
	}
	export {
		id
		path
	}
	auxiliary {
		id
		path
	}
	organization {
		id
		name
	}
	mass
	outerDimensions {
		... OuterDimensionsFragment
	}
	material {
		id
		name
	}
	manufacturingProcess {
		id
		name
	}
	productionMetadata {
		... KeyValueFragment
	}
}
fragment UserOrGroupBasicFragment on UserOrGroup {
	__typename
	name
	fullName
	id
}
fragment OuterDimensionsFragment on OuterDimensions {
	__typename
	... on BoundingBoxDimensions {
		... BoundingBoxDimensionsFragment
	}
	... on OpenSCADDimensions {
		... OpenSCADDimensionsFragment
	}
}
fragment BoundingBoxDimensionsFragment on BoundingBoxDimensions {
	id
	height
	width
	depth
}
fragment OpenSCADDimensionsFragment on OpenSCADDimensions {
	id
	openscad
	unit
}
fragment KeyValueFragment on KeyValue {
	id
	key
	value {
		... on StringV {
			id
			stringValue: value
		}
		... on FloatV {
			id
			floatValue: value
		}
	}
}
`

func (c *Client) GetComponents(ctx context.Context, getFilter *ComponentFilter, order *ComponentOrder, first *int64, offset *int64) (*GetComponents, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponents",
		Query:         GetComponentsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetComponents
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetComponentsWithResponse(ctx context.Context, getFilter *ComponentFilter, order *ComponentOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetComponents",
		Query:         GetComponentsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateComponentsDocument = `mutation CreateComponents ($createInput: [AddComponentInput!]!) {
	addComponent(input: $createInput, upsert: true) {
		component {
			id
		}
	}
}
`

func (c *Client) CreateComponents(ctx context.Context, createInput []*AddComponentInput) (*CreateComponents, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateComponents",
		Query:         CreateComponentsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateComponents
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateComponentsWithResponse(ctx context.Context, createInput []*AddComponentInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateComponents",
		Query:         CreateComponentsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateComponentsDocument = `mutation UpdateComponents ($updateInput: UpdateComponentInput!) {
	updateComponent(input: $updateInput) {
		component {
			id
		}
	}
}
`

func (c *Client) UpdateComponents(ctx context.Context, updateInput UpdateComponentInput) (*UpdateComponents, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateComponents",
		Query:         UpdateComponentsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateComponents
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateComponentsWithResponse(ctx context.Context, updateInput UpdateComponentInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateComponents",
		Query:         UpdateComponentsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteComponentsDocument = `mutation DeleteComponents ($delFilter: ComponentFilter!) {
	deleteComponent(filter: $delFilter) {
		component {
			id
		}
	}
}
`

func (c *Client) DeleteComponents(ctx context.Context, delFilter ComponentFilter) (*DeleteComponents, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteComponents",
		Query:         DeleteComponentsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteComponents
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteComponentsWithResponse(ctx context.Context, delFilter ComponentFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteComponents",
		Query:         DeleteComponentsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetDatabaseByIDDocument = `query GetDatabaseByID ($id: ID!) {
	getDatabase(id: $id) {
		... DatabaseFragment
	}
}
fragment DatabaseFragment on Database {
	id
	version
}
`

func (c *Client) GetDatabaseByID(ctx context.Context, id string) (*GetDatabaseByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetDatabaseByID",
		Query:         GetDatabaseByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetDatabaseByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetDatabaseByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetDatabaseByID",
		Query:         GetDatabaseByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetDatabasesDocument = `query GetDatabases ($getFilter: DatabaseFilter, $order: DatabaseOrder, $first: Int, $offset: Int) {
	queryDatabase(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... DatabaseFragment
	}
	aggregateDatabase(filter: $getFilter) {
		count
	}
}
fragment DatabaseFragment on Database {
	id
	version
}
`

func (c *Client) GetDatabases(ctx context.Context, getFilter *DatabaseFilter, order *DatabaseOrder, first *int64, offset *int64) (*GetDatabases, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetDatabases",
		Query:         GetDatabasesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetDatabases
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetDatabasesWithResponse(ctx context.Context, getFilter *DatabaseFilter, order *DatabaseOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetDatabases",
		Query:         GetDatabasesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateDatabasesDocument = `mutation CreateDatabases ($createInput: [AddDatabaseInput!]!) {
	addDatabase(input: $createInput) {
		database {
			id
		}
	}
}
`

func (c *Client) CreateDatabases(ctx context.Context, createInput []*AddDatabaseInput) (*CreateDatabases, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateDatabases",
		Query:         CreateDatabasesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateDatabases
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateDatabasesWithResponse(ctx context.Context, createInput []*AddDatabaseInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateDatabases",
		Query:         CreateDatabasesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateDatabasesDocument = `mutation UpdateDatabases ($updateInput: UpdateDatabaseInput!) {
	updateDatabase(input: $updateInput) {
		database {
			id
		}
	}
}
`

func (c *Client) UpdateDatabases(ctx context.Context, updateInput UpdateDatabaseInput) (*UpdateDatabases, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateDatabases",
		Query:         UpdateDatabasesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateDatabases
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateDatabasesWithResponse(ctx context.Context, updateInput UpdateDatabaseInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateDatabases",
		Query:         UpdateDatabasesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteDatabasesDocument = `mutation DeleteDatabases ($delFilter: DatabaseFilter!) {
	deleteDatabase(filter: $delFilter) {
		database {
			id
		}
	}
}
`

func (c *Client) DeleteDatabases(ctx context.Context, delFilter DatabaseFilter) (*DeleteDatabases, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteDatabases",
		Query:         DeleteDatabasesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteDatabases
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteDatabasesWithResponse(ctx context.Context, delFilter DatabaseFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteDatabases",
		Query:         DeleteDatabasesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetFileByIDDocument = `query GetFileByID ($id: ID!) {
	getFile(id: $id) {
		... FileFragment
	}
}
fragment FileFragment on File {
	... CrawlerMetaFragment
	id
	name
	path
	mimeType
	url
	createdAt
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
`

func (c *Client) GetFileByID(ctx context.Context, id string) (*GetFileByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFileByID",
		Query:         GetFileByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetFileByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetFileByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFileByID",
		Query:         GetFileByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetFileByXidDocument = `query GetFileByXid ($xid: String!) {
	getFile(xid: $xid) {
		... FileFragment
	}
}
fragment FileFragment on File {
	... CrawlerMetaFragment
	id
	name
	path
	mimeType
	url
	createdAt
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
`

func (c *Client) GetFileByXid(ctx context.Context, xid string) (*GetFileByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFileByXid",
		Query:         GetFileByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetFileByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetFileByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFileByXid",
		Query:         GetFileByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetFileIDDocument = `query GetFileID ($xid: String!) {
	getFile(xid: $xid) {
		id
	}
}
`

func (c *Client) GetFileID(ctx context.Context, xid string) (*GetFileID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFileID",
		Query:         GetFileIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetFileID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetFileIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFileID",
		Query:         GetFileIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetFilesDocument = `query GetFiles ($getFilter: FileFilter, $order: FileOrder, $first: Int, $offset: Int) {
	queryFile(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... FileFragment
	}
	aggregateFile(filter: $getFilter) {
		count
	}
}
fragment FileFragment on File {
	... CrawlerMetaFragment
	id
	name
	path
	mimeType
	url
	createdAt
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
`

func (c *Client) GetFiles(ctx context.Context, getFilter *FileFilter, order *FileOrder, first *int64, offset *int64) (*GetFiles, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFiles",
		Query:         GetFilesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetFiles
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetFilesWithResponse(ctx context.Context, getFilter *FileFilter, order *FileOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFiles",
		Query:         GetFilesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateFilesDocument = `mutation CreateFiles ($createInput: [AddFileInput!]!) {
	addFile(input: $createInput) {
		file {
			id
		}
	}
}
`

func (c *Client) CreateFiles(ctx context.Context, createInput []*AddFileInput) (*CreateFiles, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateFiles",
		Query:         CreateFilesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateFiles
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateFilesWithResponse(ctx context.Context, createInput []*AddFileInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateFiles",
		Query:         CreateFilesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateFilesDocument = `mutation UpdateFiles ($updateInput: UpdateFileInput!) {
	updateFile(input: $updateInput) {
		file {
			id
		}
	}
}
`

func (c *Client) UpdateFiles(ctx context.Context, updateInput UpdateFileInput) (*UpdateFiles, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateFiles",
		Query:         UpdateFilesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateFiles
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateFilesWithResponse(ctx context.Context, updateInput UpdateFileInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateFiles",
		Query:         UpdateFilesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteFilesDocument = `mutation DeleteFiles ($delFilter: FileFilter!) {
	deleteFile(filter: $delFilter) {
		file {
			id
		}
	}
}
`

func (c *Client) DeleteFiles(ctx context.Context, delFilter FileFilter) (*DeleteFiles, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteFiles",
		Query:         DeleteFilesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteFiles
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteFilesWithResponse(ctx context.Context, delFilter FileFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteFiles",
		Query:         DeleteFilesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetHostByIDDocument = `query GetHostByID ($id: ID!) {
	getHost(id: $id) {
		... HostFragment
	}
}
fragment HostFragment on Host {
	id
	domain
	name
}
`

func (c *Client) GetHostByID(ctx context.Context, id string) (*GetHostByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetHostByID",
		Query:         GetHostByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetHostByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetHostByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetHostByID",
		Query:         GetHostByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetHostByDomainDocument = `query GetHostByDomain ($domain: String!) {
	getHost(domain: $domain) {
		... HostFragment
	}
}
fragment HostFragment on Host {
	id
	domain
	name
}
`

func (c *Client) GetHostByDomain(ctx context.Context, domain string) (*GetHostByDomain, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetHostByDomain",
		Query:         GetHostByDomainDocument,
		Variables: map[string]interface{}{
			"domain": domain,
		},
	}

	var resp GetHostByDomain
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetHostByDomainWithResponse(ctx context.Context, domain string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetHostByDomain",
		Query:         GetHostByDomainDocument,
		Variables: map[string]interface{}{
			"domain": domain,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetHostIDDocument = `query GetHostID ($domain: String!) {
	getHost(domain: $domain) {
		id
	}
}
`

func (c *Client) GetHostID(ctx context.Context, domain string) (*GetHostID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetHostID",
		Query:         GetHostIDDocument,
		Variables: map[string]interface{}{
			"domain": domain,
		},
	}

	var resp GetHostID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetHostIDWithResponse(ctx context.Context, domain string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetHostID",
		Query:         GetHostIDDocument,
		Variables: map[string]interface{}{
			"domain": domain,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetHostsDocument = `query GetHosts ($getFilter: HostFilter, $order: HostOrder, $first: Int, $offset: Int) {
	queryHost(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... HostFragment
	}
	aggregateHost(filter: $getFilter) {
		count
	}
}
fragment HostFragment on Host {
	id
	domain
	name
}
`

func (c *Client) GetHosts(ctx context.Context, getFilter *HostFilter, order *HostOrder, first *int64, offset *int64) (*GetHosts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetHosts",
		Query:         GetHostsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetHosts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetHostsWithResponse(ctx context.Context, getFilter *HostFilter, order *HostOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetHosts",
		Query:         GetHostsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateHostsDocument = `mutation CreateHosts ($createInput: [AddHostInput!]!) {
	addHost(input: $createInput, upsert: true) {
		host {
			id
		}
	}
}
`

func (c *Client) CreateHosts(ctx context.Context, createInput []*AddHostInput) (*CreateHosts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateHosts",
		Query:         CreateHostsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateHosts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateHostsWithResponse(ctx context.Context, createInput []*AddHostInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateHosts",
		Query:         CreateHostsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateHostsDocument = `mutation UpdateHosts ($updateInput: UpdateHostInput!) {
	updateHost(input: $updateInput) {
		host {
			id
		}
	}
}
`

func (c *Client) UpdateHosts(ctx context.Context, updateInput UpdateHostInput) (*UpdateHosts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateHosts",
		Query:         UpdateHostsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateHosts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateHostsWithResponse(ctx context.Context, updateInput UpdateHostInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateHosts",
		Query:         UpdateHostsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteHostsDocument = `mutation DeleteHosts ($delFilter: HostFilter!) {
	deleteHost(filter: $delFilter) {
		host {
			id
		}
	}
}
`

func (c *Client) DeleteHosts(ctx context.Context, delFilter HostFilter) (*DeleteHosts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteHosts",
		Query:         DeleteHostsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteHosts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteHostsWithResponse(ctx context.Context, delFilter HostFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteHosts",
		Query:         DeleteHostsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetStringVByIDDocument = `query GetStringVByID ($id: ID!) {
	getStringV(id: $id) {
		... StringVFragment
	}
}
fragment StringVFragment on StringV {
	id
	value
}
`

func (c *Client) GetStringVByID(ctx context.Context, id string) (*GetStringVByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetStringVByID",
		Query:         GetStringVByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetStringVByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetStringVByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetStringVByID",
		Query:         GetStringVByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetStringVsDocument = `query GetStringVs ($getFilter: StringVFilter, $order: StringVOrder, $first: Int, $offset: Int) {
	queryStringV(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... StringVFragment
	}
	aggregateStringV(filter: $getFilter) {
		count
	}
}
fragment StringVFragment on StringV {
	id
	value
}
`

func (c *Client) GetStringVs(ctx context.Context, getFilter *StringVFilter, order *StringVOrder, first *int64, offset *int64) (*GetStringVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetStringVs",
		Query:         GetStringVsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetStringVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetStringVsWithResponse(ctx context.Context, getFilter *StringVFilter, order *StringVOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetStringVs",
		Query:         GetStringVsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateStringVsDocument = `mutation CreateStringVs ($createInput: [AddStringVInput!]!) {
	addStringV(input: $createInput) {
		stringV {
			id
		}
	}
}
`

func (c *Client) CreateStringVs(ctx context.Context, createInput []*AddStringVInput) (*CreateStringVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateStringVs",
		Query:         CreateStringVsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateStringVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateStringVsWithResponse(ctx context.Context, createInput []*AddStringVInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateStringVs",
		Query:         CreateStringVsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateStringVsDocument = `mutation UpdateStringVs ($updateInput: UpdateStringVInput!) {
	updateStringV(input: $updateInput) {
		stringV {
			id
		}
	}
}
`

func (c *Client) UpdateStringVs(ctx context.Context, updateInput UpdateStringVInput) (*UpdateStringVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateStringVs",
		Query:         UpdateStringVsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateStringVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateStringVsWithResponse(ctx context.Context, updateInput UpdateStringVInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateStringVs",
		Query:         UpdateStringVsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteStringVsDocument = `mutation DeleteStringVs ($delFilter: StringVFilter!) {
	deleteStringV(filter: $delFilter) {
		stringV {
			id
		}
	}
}
`

func (c *Client) DeleteStringVs(ctx context.Context, delFilter StringVFilter) (*DeleteStringVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteStringVs",
		Query:         DeleteStringVsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteStringVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteStringVsWithResponse(ctx context.Context, delFilter StringVFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteStringVs",
		Query:         DeleteStringVsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetFloatVByIDDocument = `query GetFloatVByID ($id: ID!) {
	getFloatV(id: $id) {
		... FloatVFragment
	}
}
fragment FloatVFragment on FloatV {
	id
	value
}
`

func (c *Client) GetFloatVByID(ctx context.Context, id string) (*GetFloatVByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFloatVByID",
		Query:         GetFloatVByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetFloatVByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetFloatVByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFloatVByID",
		Query:         GetFloatVByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetFloatVsDocument = `query GetFloatVs ($getFilter: FloatVFilter, $order: FloatVOrder, $first: Int, $offset: Int) {
	queryFloatV(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... FloatVFragment
	}
	aggregateFloatV(filter: $getFilter) {
		count
	}
}
fragment FloatVFragment on FloatV {
	id
	value
}
`

func (c *Client) GetFloatVs(ctx context.Context, getFilter *FloatVFilter, order *FloatVOrder, first *int64, offset *int64) (*GetFloatVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFloatVs",
		Query:         GetFloatVsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetFloatVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetFloatVsWithResponse(ctx context.Context, getFilter *FloatVFilter, order *FloatVOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetFloatVs",
		Query:         GetFloatVsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateFloatVsDocument = `mutation CreateFloatVs ($createInput: [AddFloatVInput!]!) {
	addFloatV(input: $createInput) {
		floatV {
			id
		}
	}
}
`

func (c *Client) CreateFloatVs(ctx context.Context, createInput []*AddFloatVInput) (*CreateFloatVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateFloatVs",
		Query:         CreateFloatVsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateFloatVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateFloatVsWithResponse(ctx context.Context, createInput []*AddFloatVInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateFloatVs",
		Query:         CreateFloatVsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateFloatVsDocument = `mutation UpdateFloatVs ($updateInput: UpdateFloatVInput!) {
	updateFloatV(input: $updateInput) {
		floatV {
			id
		}
	}
}
`

func (c *Client) UpdateFloatVs(ctx context.Context, updateInput UpdateFloatVInput) (*UpdateFloatVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateFloatVs",
		Query:         UpdateFloatVsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateFloatVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateFloatVsWithResponse(ctx context.Context, updateInput UpdateFloatVInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateFloatVs",
		Query:         UpdateFloatVsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteFloatVsDocument = `mutation DeleteFloatVs ($delFilter: FloatVFilter!) {
	deleteFloatV(filter: $delFilter) {
		floatV {
			id
		}
	}
}
`

func (c *Client) DeleteFloatVs(ctx context.Context, delFilter FloatVFilter) (*DeleteFloatVs, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteFloatVs",
		Query:         DeleteFloatVsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteFloatVs
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteFloatVsWithResponse(ctx context.Context, delFilter FloatVFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteFloatVs",
		Query:         DeleteFloatVsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetKeyValueByIDDocument = `query GetKeyValueByID ($id: ID!) {
	getKeyValue(id: $id) {
		... KeyValueFragment
	}
}
fragment KeyValueFragment on KeyValue {
	id
	key
	value {
		... on StringV {
			id
			stringValue: value
		}
		... on FloatV {
			id
			floatValue: value
		}
	}
}
`

func (c *Client) GetKeyValueByID(ctx context.Context, id string) (*GetKeyValueByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetKeyValueByID",
		Query:         GetKeyValueByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetKeyValueByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetKeyValueByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetKeyValueByID",
		Query:         GetKeyValueByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetKeyValuesDocument = `query GetKeyValues ($getFilter: KeyValueFilter, $order: KeyValueOrder, $first: Int, $offset: Int) {
	queryKeyValue(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... KeyValueFragment
	}
	aggregateKeyValue(filter: $getFilter) {
		count
	}
}
fragment KeyValueFragment on KeyValue {
	id
	key
	value {
		... on StringV {
			id
			stringValue: value
		}
		... on FloatV {
			id
			floatValue: value
		}
	}
}
`

func (c *Client) GetKeyValues(ctx context.Context, getFilter *KeyValueFilter, order *KeyValueOrder, first *int64, offset *int64) (*GetKeyValues, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetKeyValues",
		Query:         GetKeyValuesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetKeyValues
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetKeyValuesWithResponse(ctx context.Context, getFilter *KeyValueFilter, order *KeyValueOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetKeyValues",
		Query:         GetKeyValuesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateKeyValuesDocument = `mutation CreateKeyValues ($createInput: [AddKeyValueInput!]!) {
	addKeyValue(input: $createInput) {
		keyValue {
			id
		}
	}
}
`

func (c *Client) CreateKeyValues(ctx context.Context, createInput []*AddKeyValueInput) (*CreateKeyValues, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateKeyValues",
		Query:         CreateKeyValuesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateKeyValues
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateKeyValuesWithResponse(ctx context.Context, createInput []*AddKeyValueInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateKeyValues",
		Query:         CreateKeyValuesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateKeyValuesDocument = `mutation UpdateKeyValues ($updateInput: UpdateKeyValueInput!) {
	updateKeyValue(input: $updateInput) {
		keyValue {
			id
		}
	}
}
`

func (c *Client) UpdateKeyValues(ctx context.Context, updateInput UpdateKeyValueInput) (*UpdateKeyValues, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateKeyValues",
		Query:         UpdateKeyValuesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateKeyValues
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateKeyValuesWithResponse(ctx context.Context, updateInput UpdateKeyValueInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateKeyValues",
		Query:         UpdateKeyValuesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteKeyValuesDocument = `mutation DeleteKeyValues ($delFilter: KeyValueFilter!) {
	deleteKeyValue(filter: $delFilter) {
		keyValue {
			id
		}
	}
}
`

func (c *Client) DeleteKeyValues(ctx context.Context, delFilter KeyValueFilter) (*DeleteKeyValues, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteKeyValues",
		Query:         DeleteKeyValuesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteKeyValues
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteKeyValuesWithResponse(ctx context.Context, delFilter KeyValueFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteKeyValues",
		Query:         DeleteKeyValuesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetLicenseByIDDocument = `query GetLicenseByID ($id: ID!) {
	getLicense(id: $id) {
		... LicenseFragment
	}
}
fragment LicenseFragment on License {
	id
	xid
	name
	text
	textHTML
	referenceURL
	detailsURL
	type
	isSpdx
	isDeprecated
	isOsiApproved
	isFsfLibre
	isBlocked
}
`

func (c *Client) GetLicenseByID(ctx context.Context, id string) (*GetLicenseByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetLicenseByID",
		Query:         GetLicenseByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetLicenseByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetLicenseByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetLicenseByID",
		Query:         GetLicenseByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetLicenseByXidDocument = `query GetLicenseByXid ($xid: String!) {
	getLicense(xid: $xid) {
		... LicenseFragment
	}
}
fragment LicenseFragment on License {
	id
	xid
	name
	text
	textHTML
	referenceURL
	detailsURL
	type
	isSpdx
	isDeprecated
	isOsiApproved
	isFsfLibre
	isBlocked
}
`

func (c *Client) GetLicenseByXid(ctx context.Context, xid string) (*GetLicenseByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetLicenseByXid",
		Query:         GetLicenseByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetLicenseByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetLicenseByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetLicenseByXid",
		Query:         GetLicenseByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetLicenseIDDocument = `query GetLicenseID ($xid: String!) {
	getLicense(xid: $xid) {
		id
	}
}
`

func (c *Client) GetLicenseID(ctx context.Context, xid string) (*GetLicenseID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetLicenseID",
		Query:         GetLicenseIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetLicenseID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetLicenseIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetLicenseID",
		Query:         GetLicenseIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetLicensesDocument = `query GetLicenses ($getFilter: LicenseFilter, $order: LicenseOrder, $first: Int, $offset: Int) {
	queryLicense(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... LicenseFragment
	}
	aggregateLicense(filter: $getFilter) {
		count
	}
}
fragment LicenseFragment on License {
	id
	xid
	name
	text
	textHTML
	referenceURL
	detailsURL
	type
	isSpdx
	isDeprecated
	isOsiApproved
	isFsfLibre
	isBlocked
}
`

func (c *Client) GetLicenses(ctx context.Context, getFilter *LicenseFilter, order *LicenseOrder, first *int64, offset *int64) (*GetLicenses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetLicenses",
		Query:         GetLicensesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetLicenses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetLicensesWithResponse(ctx context.Context, getFilter *LicenseFilter, order *LicenseOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetLicenses",
		Query:         GetLicensesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetAllLicensesBasicDocument = `query GetAllLicensesBasic {
	queryLicense {
		... LicenseFragmentBasic
	}
}
fragment LicenseFragmentBasic on License {
	id
	xid
	name
	isSpdx
	isDeprecated
	isOsiApproved
	isFsfLibre
	isBlocked
}
`

func (c *Client) GetAllLicensesBasic(ctx context.Context) (*GetAllLicensesBasic, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetAllLicensesBasic",
		Query:         GetAllLicensesBasicDocument,
		Variables:     map[string]interface{}{},
	}

	var resp GetAllLicensesBasic
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetAllLicensesBasicWithResponse(ctx context.Context, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetAllLicensesBasic",
		Query:         GetAllLicensesBasicDocument,
		Variables:     map[string]interface{}{},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateLicensesDocument = `mutation CreateLicenses ($createInput: [AddLicenseInput!]!) {
	addLicense(input: $createInput, upsert: true) {
		license {
			id
		}
	}
}
`

func (c *Client) CreateLicenses(ctx context.Context, createInput []*AddLicenseInput) (*CreateLicenses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateLicenses",
		Query:         CreateLicensesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateLicenses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateLicensesWithResponse(ctx context.Context, createInput []*AddLicenseInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateLicenses",
		Query:         CreateLicensesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateLicensesDocument = `mutation UpdateLicenses ($updateInput: UpdateLicenseInput!) {
	updateLicense(input: $updateInput) {
		license {
			id
		}
	}
}
`

func (c *Client) UpdateLicenses(ctx context.Context, updateInput UpdateLicenseInput) (*UpdateLicenses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateLicenses",
		Query:         UpdateLicensesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateLicenses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateLicensesWithResponse(ctx context.Context, updateInput UpdateLicenseInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateLicenses",
		Query:         UpdateLicensesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteLicensesDocument = `mutation DeleteLicenses ($delFilter: LicenseFilter!) {
	deleteLicense(filter: $delFilter) {
		license {
			id
		}
	}
}
`

func (c *Client) DeleteLicenses(ctx context.Context, delFilter LicenseFilter) (*DeleteLicenses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteLicenses",
		Query:         DeleteLicensesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteLicenses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteLicensesWithResponse(ctx context.Context, delFilter LicenseFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteLicenses",
		Query:         DeleteLicensesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetManufacturingProcessByIDDocument = `query GetManufacturingProcessByID ($id: ID!) {
	getManufacturingProcess(id: $id) {
		... ManufacturingProcessFragment
	}
}
fragment ManufacturingProcessFragment on ManufacturingProcess {
	id
	name
	description
}
`

func (c *Client) GetManufacturingProcessByID(ctx context.Context, id string) (*GetManufacturingProcessByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetManufacturingProcessByID",
		Query:         GetManufacturingProcessByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetManufacturingProcessByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetManufacturingProcessByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetManufacturingProcessByID",
		Query:         GetManufacturingProcessByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetManufacturingProcessesDocument = `query GetManufacturingProcesses ($getFilter: ManufacturingProcessFilter, $order: ManufacturingProcessOrder, $first: Int, $offset: Int) {
	queryManufacturingProcess(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... ManufacturingProcessFragment
	}
	aggregateManufacturingProcess(filter: $getFilter) {
		count
	}
}
fragment ManufacturingProcessFragment on ManufacturingProcess {
	id
	name
	description
}
`

func (c *Client) GetManufacturingProcesses(ctx context.Context, getFilter *ManufacturingProcessFilter, order *ManufacturingProcessOrder, first *int64, offset *int64) (*GetManufacturingProcesses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetManufacturingProcesses",
		Query:         GetManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetManufacturingProcesses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetManufacturingProcessesWithResponse(ctx context.Context, getFilter *ManufacturingProcessFilter, order *ManufacturingProcessOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetManufacturingProcesses",
		Query:         GetManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateManufacturingProcessesDocument = `mutation CreateManufacturingProcesses ($createInput: [AddManufacturingProcessInput!]!) {
	addManufacturingProcess(input: $createInput) {
		manufacturingProcess {
			id
		}
	}
}
`

func (c *Client) CreateManufacturingProcesses(ctx context.Context, createInput []*AddManufacturingProcessInput) (*CreateManufacturingProcesses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateManufacturingProcesses",
		Query:         CreateManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateManufacturingProcesses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateManufacturingProcessesWithResponse(ctx context.Context, createInput []*AddManufacturingProcessInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateManufacturingProcesses",
		Query:         CreateManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateManufacturingProcessesDocument = `mutation UpdateManufacturingProcesses ($updateInput: UpdateManufacturingProcessInput!) {
	updateManufacturingProcess(input: $updateInput) {
		manufacturingProcess {
			id
		}
	}
}
`

func (c *Client) UpdateManufacturingProcesses(ctx context.Context, updateInput UpdateManufacturingProcessInput) (*UpdateManufacturingProcesses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateManufacturingProcesses",
		Query:         UpdateManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateManufacturingProcesses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateManufacturingProcessesWithResponse(ctx context.Context, updateInput UpdateManufacturingProcessInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateManufacturingProcesses",
		Query:         UpdateManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteManufacturingProcessesDocument = `mutation DeleteManufacturingProcesses ($delFilter: ManufacturingProcessFilter!) {
	deleteManufacturingProcess(filter: $delFilter) {
		manufacturingProcess {
			id
		}
	}
}
`

func (c *Client) DeleteManufacturingProcesses(ctx context.Context, delFilter ManufacturingProcessFilter) (*DeleteManufacturingProcesses, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteManufacturingProcesses",
		Query:         DeleteManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteManufacturingProcesses
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteManufacturingProcessesWithResponse(ctx context.Context, delFilter ManufacturingProcessFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteManufacturingProcesses",
		Query:         DeleteManufacturingProcessesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetMaterialByIDDocument = `query GetMaterialByID ($id: ID!) {
	getMaterial(id: $id) {
		... MaterialFragment
	}
}
fragment MaterialFragment on Material {
	id
	name
	description
}
`

func (c *Client) GetMaterialByID(ctx context.Context, id string) (*GetMaterialByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetMaterialByID",
		Query:         GetMaterialByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetMaterialByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetMaterialByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetMaterialByID",
		Query:         GetMaterialByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetMaterialsDocument = `query GetMaterials ($getFilter: MaterialFilter, $order: MaterialOrder, $first: Int, $offset: Int) {
	queryMaterial(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... MaterialFragment
	}
	aggregateMaterial(filter: $getFilter) {
		count
	}
}
fragment MaterialFragment on Material {
	id
	name
	description
}
`

func (c *Client) GetMaterials(ctx context.Context, getFilter *MaterialFilter, order *MaterialOrder, first *int64, offset *int64) (*GetMaterials, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetMaterials",
		Query:         GetMaterialsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetMaterials
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetMaterialsWithResponse(ctx context.Context, getFilter *MaterialFilter, order *MaterialOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetMaterials",
		Query:         GetMaterialsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateMaterialsDocument = `mutation CreateMaterials ($createInput: [AddMaterialInput!]!) {
	addMaterial(input: $createInput) {
		material {
			id
		}
	}
}
`

func (c *Client) CreateMaterials(ctx context.Context, createInput []*AddMaterialInput) (*CreateMaterials, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateMaterials",
		Query:         CreateMaterialsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateMaterials
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateMaterialsWithResponse(ctx context.Context, createInput []*AddMaterialInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateMaterials",
		Query:         CreateMaterialsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateMaterialsDocument = `mutation UpdateMaterials ($updateInput: UpdateMaterialInput!) {
	updateMaterial(input: $updateInput) {
		material {
			id
		}
	}
}
`

func (c *Client) UpdateMaterials(ctx context.Context, updateInput UpdateMaterialInput) (*UpdateMaterials, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateMaterials",
		Query:         UpdateMaterialsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateMaterials
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateMaterialsWithResponse(ctx context.Context, updateInput UpdateMaterialInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateMaterials",
		Query:         UpdateMaterialsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteMaterialsDocument = `mutation DeleteMaterials ($delFilter: MaterialFilter!) {
	deleteMaterial(filter: $delFilter) {
		material {
			id
		}
	}
}
`

func (c *Client) DeleteMaterials(ctx context.Context, delFilter MaterialFilter) (*DeleteMaterials, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteMaterials",
		Query:         DeleteMaterialsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteMaterials
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteMaterialsWithResponse(ctx context.Context, delFilter MaterialFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteMaterials",
		Query:         DeleteMaterialsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CheckNodeDocument = `query CheckNode ($id: ID!) {
	getNode(id: $id) {
		... NodeFragment
	}
}
fragment NodeFragment on Node {
	__typename
	id
}
`

func (c *Client) CheckNode(ctx context.Context, id string) (*CheckNode, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CheckNode",
		Query:         CheckNodeDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp CheckNode
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CheckNodeWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CheckNode",
		Query:         CheckNodeDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetNodeDetailsDocument = `query GetNodeDetails ($id: ID!) {
	getNode(id: $id) {
		... NodeFragment
	}
}
fragment NodeFragment on Node {
	__typename
	id
}
`

func (c *Client) GetNodeDetails(ctx context.Context, id string) (*GetNodeDetails, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetNodeDetails",
		Query:         GetNodeDetailsDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetNodeDetails
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetNodeDetailsWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetNodeDetails",
		Query:         GetNodeDetailsDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetNodeByIDDocument = `query GetNodeByID ($id: ID!) {
	getNode(id: $id) {
		... NodeFragment
	}
}
fragment NodeFragment on Node {
	__typename
	id
}
`

func (c *Client) GetNodeByID(ctx context.Context, id string) (*GetNodeByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetNodeByID",
		Query:         GetNodeByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetNodeByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetNodeByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetNodeByID",
		Query:         GetNodeByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetNodesDocument = `query GetNodes ($getFilter: NodeFilter, $first: Int, $offset: Int) {
	queryNode(filter: $getFilter, first: $first, offset: $offset) {
		... NodeFragment
	}
	aggregateNode(filter: $getFilter) {
		count
	}
}
fragment NodeFragment on Node {
	__typename
	id
}
`

func (c *Client) GetNodes(ctx context.Context, getFilter *NodeFilter, first *int64, offset *int64) (*GetNodes, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetNodes",
		Query:         GetNodesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetNodes
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetNodesWithResponse(ctx context.Context, getFilter *NodeFilter, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetNodes",
		Query:         GetNodesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteNodesDocument = `mutation DeleteNodes ($delFilter: NodeFilter!) {
	deleteNode(filter: $delFilter) {
		node {
			id
		}
	}
}
`

func (c *Client) DeleteNodes(ctx context.Context, delFilter NodeFilter) (*DeleteNodes, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteNodes",
		Query:         DeleteNodesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteNodes
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteNodesWithResponse(ctx context.Context, delFilter NodeFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteNodes",
		Query:         DeleteNodesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetBoundingBoxDimensionsByIDDocument = `query GetBoundingBoxDimensionsByID ($id: ID!) {
	getBoundingBoxDimensions(id: $id) {
		... BoundingBoxDimensionsFragment
	}
}
fragment BoundingBoxDimensionsFragment on BoundingBoxDimensions {
	id
	height
	width
	depth
}
`

func (c *Client) GetBoundingBoxDimensionsByID(ctx context.Context, id string) (*GetBoundingBoxDimensionsByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetBoundingBoxDimensionsByID",
		Query:         GetBoundingBoxDimensionsByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetBoundingBoxDimensionsByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetBoundingBoxDimensionsByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetBoundingBoxDimensionsByID",
		Query:         GetBoundingBoxDimensionsByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetBoundingBoxDimensionssDocument = `query GetBoundingBoxDimensionss ($getFilter: BoundingBoxDimensionsFilter, $order: BoundingBoxDimensionsOrder, $first: Int, $offset: Int) {
	queryBoundingBoxDimensions(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... BoundingBoxDimensionsFragment
	}
	aggregateBoundingBoxDimensions(filter: $getFilter) {
		count
	}
}
fragment BoundingBoxDimensionsFragment on BoundingBoxDimensions {
	id
	height
	width
	depth
}
`

func (c *Client) GetBoundingBoxDimensionss(ctx context.Context, getFilter *BoundingBoxDimensionsFilter, order *BoundingBoxDimensionsOrder, first *int64, offset *int64) (*GetBoundingBoxDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetBoundingBoxDimensionss",
		Query:         GetBoundingBoxDimensionssDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetBoundingBoxDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetBoundingBoxDimensionssWithResponse(ctx context.Context, getFilter *BoundingBoxDimensionsFilter, order *BoundingBoxDimensionsOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetBoundingBoxDimensionss",
		Query:         GetBoundingBoxDimensionssDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateBoundingBoxDimensionssDocument = `mutation CreateBoundingBoxDimensionss ($createInput: [AddBoundingBoxDimensionsInput!]!) {
	addBoundingBoxDimensions(input: $createInput) {
		boundingBoxDimensions {
			id
		}
	}
}
`

func (c *Client) CreateBoundingBoxDimensionss(ctx context.Context, createInput []*AddBoundingBoxDimensionsInput) (*CreateBoundingBoxDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateBoundingBoxDimensionss",
		Query:         CreateBoundingBoxDimensionssDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateBoundingBoxDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateBoundingBoxDimensionssWithResponse(ctx context.Context, createInput []*AddBoundingBoxDimensionsInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateBoundingBoxDimensionss",
		Query:         CreateBoundingBoxDimensionssDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateBoundingBoxDimensionssDocument = `mutation UpdateBoundingBoxDimensionss ($updateInput: UpdateBoundingBoxDimensionsInput!) {
	updateBoundingBoxDimensions(input: $updateInput) {
		boundingBoxDimensions {
			id
		}
	}
}
`

func (c *Client) UpdateBoundingBoxDimensionss(ctx context.Context, updateInput UpdateBoundingBoxDimensionsInput) (*UpdateBoundingBoxDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateBoundingBoxDimensionss",
		Query:         UpdateBoundingBoxDimensionssDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateBoundingBoxDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateBoundingBoxDimensionssWithResponse(ctx context.Context, updateInput UpdateBoundingBoxDimensionsInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateBoundingBoxDimensionss",
		Query:         UpdateBoundingBoxDimensionssDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteBoundingBoxDimensionssDocument = `mutation DeleteBoundingBoxDimensionss ($delFilter: BoundingBoxDimensionsFilter!) {
	deleteBoundingBoxDimensions(filter: $delFilter) {
		boundingBoxDimensions {
			id
		}
	}
}
`

func (c *Client) DeleteBoundingBoxDimensionss(ctx context.Context, delFilter BoundingBoxDimensionsFilter) (*DeleteBoundingBoxDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteBoundingBoxDimensionss",
		Query:         DeleteBoundingBoxDimensionssDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteBoundingBoxDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteBoundingBoxDimensionssWithResponse(ctx context.Context, delFilter BoundingBoxDimensionsFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteBoundingBoxDimensionss",
		Query:         DeleteBoundingBoxDimensionssDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetOpenSCADDimensionsByIDDocument = `query GetOpenSCADDimensionsByID ($id: ID!) {
	getOpenSCADDimensions(id: $id) {
		... OpenSCADDimensionsFragment
	}
}
fragment OpenSCADDimensionsFragment on OpenSCADDimensions {
	id
	openscad
	unit
}
`

func (c *Client) GetOpenSCADDimensionsByID(ctx context.Context, id string) (*GetOpenSCADDimensionsByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetOpenSCADDimensionsByID",
		Query:         GetOpenSCADDimensionsByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetOpenSCADDimensionsByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetOpenSCADDimensionsByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetOpenSCADDimensionsByID",
		Query:         GetOpenSCADDimensionsByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetOpenSCADDimensionssDocument = `query GetOpenSCADDimensionss ($getFilter: OpenSCADDimensionsFilter, $order: OpenSCADDimensionsOrder, $first: Int, $offset: Int) {
	queryOpenSCADDimensions(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... OpenSCADDimensionsFragment
	}
	aggregateOpenSCADDimensions(filter: $getFilter) {
		count
	}
}
fragment OpenSCADDimensionsFragment on OpenSCADDimensions {
	id
	openscad
	unit
}
`

func (c *Client) GetOpenSCADDimensionss(ctx context.Context, getFilter *OpenSCADDimensionsFilter, order *OpenSCADDimensionsOrder, first *int64, offset *int64) (*GetOpenSCADDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetOpenSCADDimensionss",
		Query:         GetOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetOpenSCADDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetOpenSCADDimensionssWithResponse(ctx context.Context, getFilter *OpenSCADDimensionsFilter, order *OpenSCADDimensionsOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetOpenSCADDimensionss",
		Query:         GetOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateOpenSCADDimensionssDocument = `mutation CreateOpenSCADDimensionss ($createInput: [AddOpenSCADDimensionsInput!]!) {
	addOpenSCADDimensions(input: $createInput) {
		openSCADDimensions {
			id
		}
	}
}
`

func (c *Client) CreateOpenSCADDimensionss(ctx context.Context, createInput []*AddOpenSCADDimensionsInput) (*CreateOpenSCADDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateOpenSCADDimensionss",
		Query:         CreateOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateOpenSCADDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateOpenSCADDimensionssWithResponse(ctx context.Context, createInput []*AddOpenSCADDimensionsInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateOpenSCADDimensionss",
		Query:         CreateOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateOpenSCADDimensionssDocument = `mutation UpdateOpenSCADDimensionss ($updateInput: UpdateOpenSCADDimensionsInput!) {
	updateOpenSCADDimensions(input: $updateInput) {
		openSCADDimensions {
			id
		}
	}
}
`

func (c *Client) UpdateOpenSCADDimensionss(ctx context.Context, updateInput UpdateOpenSCADDimensionsInput) (*UpdateOpenSCADDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateOpenSCADDimensionss",
		Query:         UpdateOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateOpenSCADDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateOpenSCADDimensionssWithResponse(ctx context.Context, updateInput UpdateOpenSCADDimensionsInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateOpenSCADDimensionss",
		Query:         UpdateOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteOpenSCADDimensionssDocument = `mutation DeleteOpenSCADDimensionss ($delFilter: OpenSCADDimensionsFilter!) {
	deleteOpenSCADDimensions(filter: $delFilter) {
		openSCADDimensions {
			id
		}
	}
}
`

func (c *Client) DeleteOpenSCADDimensionss(ctx context.Context, delFilter OpenSCADDimensionsFilter) (*DeleteOpenSCADDimensionss, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteOpenSCADDimensionss",
		Query:         DeleteOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteOpenSCADDimensionss
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteOpenSCADDimensionssWithResponse(ctx context.Context, delFilter OpenSCADDimensionsFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteOpenSCADDimensionss",
		Query:         DeleteOpenSCADDimensionssDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetProductByIDDocument = `query GetProductByID ($id: ID!) {
	getProduct(id: $id) {
		... ProductFragment
	}
}
fragment ProductFragment on Product {
	... CrawlerMetaFragment
	id
	xid
	name
	description
	documentationLanguage
	version
	license {
		id
		xid
	}
	licensor {
		... UserOrGroupBasicFragment
	}
	website
	state
	lastUpdatedAt
	release {
		id
		name
	}
	releases {
		id
		name
	}
	renamedTo {
		id
		name
	}
	renamedFrom {
		id
		name
	}
	forkOf {
		id
		name
	}
	forks {
		id
		name
	}
	forkCount
	starCount
	tags {
		id
		name
	}
	category {
		id
		fullName
	}
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
fragment UserOrGroupBasicFragment on UserOrGroup {
	__typename
	name
	fullName
	id
}
`

func (c *Client) GetProductByID(ctx context.Context, id string) (*GetProductByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProductByID",
		Query:         GetProductByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetProductByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetProductByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProductByID",
		Query:         GetProductByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetProductByXidDocument = `query GetProductByXid ($xid: String!) {
	getProduct(xid: $xid) {
		... ProductFragment
	}
}
fragment UserOrGroupBasicFragment on UserOrGroup {
	__typename
	name
	fullName
	id
}
fragment ProductFragment on Product {
	... CrawlerMetaFragment
	id
	xid
	name
	description
	documentationLanguage
	version
	license {
		id
		xid
	}
	licensor {
		... UserOrGroupBasicFragment
	}
	website
	state
	lastUpdatedAt
	release {
		id
		name
	}
	releases {
		id
		name
	}
	renamedTo {
		id
		name
	}
	renamedFrom {
		id
		name
	}
	forkOf {
		id
		name
	}
	forks {
		id
		name
	}
	forkCount
	starCount
	tags {
		id
		name
	}
	category {
		id
		fullName
	}
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
`

func (c *Client) GetProductByXid(ctx context.Context, xid string) (*GetProductByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProductByXid",
		Query:         GetProductByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetProductByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetProductByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProductByXid",
		Query:         GetProductByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetProductIDDocument = `query GetProductID ($xid: String!) {
	getProduct(xid: $xid) {
		id
	}
}
`

func (c *Client) GetProductID(ctx context.Context, xid string) (*GetProductID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProductID",
		Query:         GetProductIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetProductID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetProductIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProductID",
		Query:         GetProductIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetProductsDocument = `query GetProducts ($getFilter: ProductFilter, $order: ProductOrder, $first: Int, $offset: Int) {
	queryProduct(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... ProductFragment
	}
	aggregateProduct(filter: $getFilter) {
		count
	}
}
fragment ProductFragment on Product {
	... CrawlerMetaFragment
	id
	xid
	name
	description
	documentationLanguage
	version
	license {
		id
		xid
	}
	licensor {
		... UserOrGroupBasicFragment
	}
	website
	state
	lastUpdatedAt
	release {
		id
		name
	}
	releases {
		id
		name
	}
	renamedTo {
		id
		name
	}
	renamedFrom {
		id
		name
	}
	forkOf {
		id
		name
	}
	forks {
		id
		name
	}
	forkCount
	starCount
	tags {
		id
		name
	}
	category {
		id
		fullName
	}
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
fragment UserOrGroupBasicFragment on UserOrGroup {
	__typename
	name
	fullName
	id
}
`

func (c *Client) GetProducts(ctx context.Context, getFilter *ProductFilter, order *ProductOrder, first *int64, offset *int64) (*GetProducts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProducts",
		Query:         GetProductsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetProducts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetProductsWithResponse(ctx context.Context, getFilter *ProductFilter, order *ProductOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetProducts",
		Query:         GetProductsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const SearchProductsDocument = `query SearchProducts ($getFilter: ProductFilter, $order: ProductOrder, $first: Int, $offset: Int) {
	queryProduct(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... ProductSearchFragment
	}
	aggregateProduct(filter: $getFilter) {
		count
	}
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
fragment CategoryFragment on Category {
	id
	xid
	fullName
	name
	description
	parent {
		id
		fullName
	}
	children {
		id
		fullName
	}
	products {
		id
		name
	}
}
fragment UserOrGroupFragment on UserOrGroup {
	__typename
	id
	xid
	host {
		id
		name
	}
	name
	fullName
	email
	avatar {
		id
		url
	}
	url
	memberOf {
		id
		fullName
	}
	products {
		id
		name
	}
}
fragment FileFragment on File {
	... CrawlerMetaFragment
	id
	name
	path
	mimeType
	url
	createdAt
}
fragment TagFragment on Tag {
	id
	name
	aliases {
		id
		name
	}
	related {
		id
		name
	}
}
fragment BoundingBoxDimensionsFragment on BoundingBoxDimensions {
	id
	height
	width
	depth
}
fragment ProductSearchFragment on Product {
	... CrawlerMetaFragment
	id
	xid
	name
	website
	state
	lastUpdatedAt
	renamedTo {
		id
	}
	renamedFrom {
		id
	}
	forkOf {
		id
		release {
			repository {
				url
			}
		}
	}
	forks {
		id
	}
	forkCount
	starCount
	tags {
		... TagFragment
	}
	category {
		... CategoryFragment
	}
	releases {
		id
	}
	release {
		id
		xid
		name
		description
		version
		createdAt
		releases {
			id
		}
		isLatest
		repository {
			... RepositoryFragment
		}
		license {
			... LicenseFragmentBasic
		}
		additionalLicenses {
			... LicenseFragmentBasic
		}
		licensor {
			... UserOrGroupFullFragment
		}
		documentationLanguage
		technologyReadinessLevel
		documentationReadinessLevel
		attestation
		publication
		compliesWith {
			name
		}
		cpcPatentClass
		tsdc {
			id
		}
		components {
			id
		}
		software {
			id
		}
		image {
			... FileFragment
		}
		readme {
			... FileFragment
		}
		contributionGuide {
			... FileFragment
		}
		bom {
			... FileFragment
		}
		manufacturingInstructions {
			... FileFragment
		}
		userManual {
			... FileFragment
		}
		product {
			id
		}
		usedIn {
			id
		}
		source {
			... FileFragment
		}
		export {
			... FileFragment
		}
		auxiliary {
			... FileFragment
		}
		organization {
			id
		}
		mass
		outerDimensions {
			... OuterDimensionsFragment
		}
		material {
			id
		}
		manufacturingProcess {
			id
		}
		productionMetadata {
			id
		}
	}
}
fragment RepositoryFragment on Repository {
	id
	xid
	url
	permaUrl
	host {
		id
		name
	}
	owner {
		... UserOrGroupBasicFragment
	}
	name
	reference
	path
}
fragment UserOrGroupBasicFragment on UserOrGroup {
	__typename
	name
	fullName
	id
}
fragment GroupFragment on Group {
	... UserOrGroupFragment
	members {
		__typename
		id
	}
}
fragment OpenSCADDimensionsFragment on OpenSCADDimensions {
	id
	openscad
	unit
}
fragment LicenseFragmentBasic on License {
	id
	xid
	name
	isSpdx
	isDeprecated
	isOsiApproved
	isFsfLibre
	isBlocked
}
fragment UserOrGroupFullFragment on UserOrGroup {
	__typename
	... on User {
		... UserFragment
	}
	... on Group {
		... GroupFragment
	}
}
fragment UserFragment on User {
	... UserOrGroupFragment
	locale
}
fragment OuterDimensionsFragment on OuterDimensions {
	__typename
	... on BoundingBoxDimensions {
		... BoundingBoxDimensionsFragment
	}
	... on OpenSCADDimensions {
		... OpenSCADDimensionsFragment
	}
}
`

func (c *Client) SearchProducts(ctx context.Context, getFilter *ProductFilter, order *ProductOrder, first *int64, offset *int64) (*SearchProducts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SearchProducts",
		Query:         SearchProductsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp SearchProducts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) SearchProductsWithResponse(ctx context.Context, getFilter *ProductFilter, order *ProductOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "SearchProducts",
		Query:         SearchProductsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateProductsDocument = `mutation CreateProducts ($createInput: [AddProductInput!]!) {
	addProduct(input: $createInput, upsert: true) {
		product {
			id
		}
	}
}
`

func (c *Client) CreateProducts(ctx context.Context, createInput []*AddProductInput) (*CreateProducts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateProducts",
		Query:         CreateProductsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateProducts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateProductsWithResponse(ctx context.Context, createInput []*AddProductInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateProducts",
		Query:         CreateProductsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateProductsDocument = `mutation UpdateProducts ($updateInput: UpdateProductInput!) {
	updateProduct(input: $updateInput) {
		product {
			id
		}
	}
}
`

func (c *Client) UpdateProducts(ctx context.Context, updateInput UpdateProductInput) (*UpdateProducts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateProducts",
		Query:         UpdateProductsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateProducts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateProductsWithResponse(ctx context.Context, updateInput UpdateProductInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateProducts",
		Query:         UpdateProductsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteProductsDocument = `mutation DeleteProducts ($delFilter: ProductFilter!) {
	deleteProduct(filter: $delFilter) {
		product {
			id
		}
	}
}
`

func (c *Client) DeleteProducts(ctx context.Context, delFilter ProductFilter) (*DeleteProducts, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteProducts",
		Query:         DeleteProductsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteProducts
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteProductsWithResponse(ctx context.Context, delFilter ProductFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteProducts",
		Query:         DeleteProductsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetRepositoryByIDDocument = `query GetRepositoryByID ($id: ID!) {
	getRepository(id: $id) {
		... RepositoryFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	xid
	url
	permaUrl
	host {
		id
		name
	}
	owner {
		... UserOrGroupBasicFragment
	}
	name
	reference
	path
}
fragment UserOrGroupBasicFragment on UserOrGroup {
	__typename
	name
	fullName
	id
}
`

func (c *Client) GetRepositoryByID(ctx context.Context, id string) (*GetRepositoryByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetRepositoryByID",
		Query:         GetRepositoryByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetRepositoryByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetRepositoryByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetRepositoryByID",
		Query:         GetRepositoryByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetRepositoryByXidDocument = `query GetRepositoryByXid ($xid: String!) {
	getRepository(xid: $xid) {
		... RepositoryFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	xid
	url
	permaUrl
	host {
		id
		name
	}
	owner {
		... UserOrGroupBasicFragment
	}
	name
	reference
	path
}
fragment UserOrGroupBasicFragment on UserOrGroup {
	__typename
	name
	fullName
	id
}
`

func (c *Client) GetRepositoryByXid(ctx context.Context, xid string) (*GetRepositoryByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetRepositoryByXid",
		Query:         GetRepositoryByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetRepositoryByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetRepositoryByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetRepositoryByXid",
		Query:         GetRepositoryByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetRepositoryIDDocument = `query GetRepositoryID ($xid: String!) {
	getRepository(xid: $xid) {
		id
	}
}
`

func (c *Client) GetRepositoryID(ctx context.Context, xid string) (*GetRepositoryID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetRepositoryID",
		Query:         GetRepositoryIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetRepositoryID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetRepositoryIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetRepositoryID",
		Query:         GetRepositoryIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetRepositoriesDocument = `query GetRepositories ($getFilter: RepositoryFilter, $order: RepositoryOrder, $first: Int, $offset: Int) {
	queryRepository(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... RepositoryFragment
	}
	aggregateRepository(filter: $getFilter) {
		count
	}
}
fragment RepositoryFragment on Repository {
	id
	xid
	url
	permaUrl
	host {
		id
		name
	}
	owner {
		... UserOrGroupBasicFragment
	}
	name
	reference
	path
}
fragment UserOrGroupBasicFragment on UserOrGroup {
	__typename
	name
	fullName
	id
}
`

func (c *Client) GetRepositories(ctx context.Context, getFilter *RepositoryFilter, order *RepositoryOrder, first *int64, offset *int64) (*GetRepositories, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetRepositories",
		Query:         GetRepositoriesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetRepositories
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetRepositoriesWithResponse(ctx context.Context, getFilter *RepositoryFilter, order *RepositoryOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetRepositories",
		Query:         GetRepositoriesDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateRepositoriesDocument = `mutation CreateRepositories ($createInput: [AddRepositoryInput!]!) {
	addRepository(input: $createInput, upsert: true) {
		repository {
			id
		}
	}
}
`

func (c *Client) CreateRepositories(ctx context.Context, createInput []*AddRepositoryInput) (*CreateRepositories, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateRepositories",
		Query:         CreateRepositoriesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateRepositories
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateRepositoriesWithResponse(ctx context.Context, createInput []*AddRepositoryInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateRepositories",
		Query:         CreateRepositoriesDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateRepositoriesDocument = `mutation UpdateRepositories ($updateInput: UpdateRepositoryInput!) {
	updateRepository(input: $updateInput) {
		repository {
			id
		}
	}
}
`

func (c *Client) UpdateRepositories(ctx context.Context, updateInput UpdateRepositoryInput) (*UpdateRepositories, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateRepositories",
		Query:         UpdateRepositoriesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateRepositories
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateRepositoriesWithResponse(ctx context.Context, updateInput UpdateRepositoryInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateRepositories",
		Query:         UpdateRepositoriesDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteRepositoriesDocument = `mutation DeleteRepositories ($delFilter: RepositoryFilter!) {
	deleteRepository(filter: $delFilter) {
		repository {
			id
		}
	}
}
`

func (c *Client) DeleteRepositories(ctx context.Context, delFilter RepositoryFilter) (*DeleteRepositories, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteRepositories",
		Query:         DeleteRepositoriesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteRepositories
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteRepositoriesWithResponse(ctx context.Context, delFilter RepositoryFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteRepositories",
		Query:         DeleteRepositoriesDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetSoftwareByIDDocument = `query GetSoftwareByID ($id: ID!) {
	getSoftware(id: $id) {
		... SoftwareFragment
	}
}
fragment SoftwareFragment on Software {
	... CrawlerMetaFragment
	id
	release
	installationGuide {
		id
		path
	}
	documentationLanguage
	license {
		id
		xid
	}
	licensor
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
`

func (c *Client) GetSoftwareByID(ctx context.Context, id string) (*GetSoftwareByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetSoftwareByID",
		Query:         GetSoftwareByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetSoftwareByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetSoftwareByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetSoftwareByID",
		Query:         GetSoftwareByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetSoftwaresDocument = `query GetSoftwares ($getFilter: SoftwareFilter, $order: SoftwareOrder, $first: Int, $offset: Int) {
	querySoftware(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... SoftwareFragment
	}
	aggregateSoftware(filter: $getFilter) {
		count
	}
}
fragment SoftwareFragment on Software {
	... CrawlerMetaFragment
	id
	release
	installationGuide {
		id
		path
	}
	documentationLanguage
	license {
		id
		xid
	}
	licensor
}
fragment CrawlerMetaFragment on CrawlerMeta {
	discoveredAt
	lastIndexedAt
}
`

func (c *Client) GetSoftwares(ctx context.Context, getFilter *SoftwareFilter, order *SoftwareOrder, first *int64, offset *int64) (*GetSoftwares, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetSoftwares",
		Query:         GetSoftwaresDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetSoftwares
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetSoftwaresWithResponse(ctx context.Context, getFilter *SoftwareFilter, order *SoftwareOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetSoftwares",
		Query:         GetSoftwaresDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateSoftwaresDocument = `mutation CreateSoftwares ($createInput: [AddSoftwareInput!]!) {
	addSoftware(input: $createInput) {
		software {
			id
		}
	}
}
`

func (c *Client) CreateSoftwares(ctx context.Context, createInput []*AddSoftwareInput) (*CreateSoftwares, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateSoftwares",
		Query:         CreateSoftwaresDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateSoftwares
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateSoftwaresWithResponse(ctx context.Context, createInput []*AddSoftwareInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateSoftwares",
		Query:         CreateSoftwaresDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateSoftwaresDocument = `mutation UpdateSoftwares ($updateInput: UpdateSoftwareInput!) {
	updateSoftware(input: $updateInput) {
		software {
			id
		}
	}
}
`

func (c *Client) UpdateSoftwares(ctx context.Context, updateInput UpdateSoftwareInput) (*UpdateSoftwares, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateSoftwares",
		Query:         UpdateSoftwaresDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateSoftwares
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateSoftwaresWithResponse(ctx context.Context, updateInput UpdateSoftwareInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateSoftwares",
		Query:         UpdateSoftwaresDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteSoftwaresDocument = `mutation DeleteSoftwares ($delFilter: SoftwareFilter!) {
	deleteSoftware(filter: $delFilter) {
		software {
			id
		}
	}
}
`

func (c *Client) DeleteSoftwares(ctx context.Context, delFilter SoftwareFilter) (*DeleteSoftwares, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteSoftwares",
		Query:         DeleteSoftwaresDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteSoftwares
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteSoftwaresWithResponse(ctx context.Context, delFilter SoftwareFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteSoftwares",
		Query:         DeleteSoftwaresDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTagByIDDocument = `query GetTagByID ($id: ID!) {
	getTag(id: $id) {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	name
	aliases {
		id
		name
	}
	related {
		id
		name
	}
}
`

func (c *Client) GetTagByID(ctx context.Context, id string) (*GetTagByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTagByID",
		Query:         GetTagByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetTagByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTagByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTagByID",
		Query:         GetTagByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTagByNameDocument = `query GetTagByName ($name: String!) {
	getTag(name: $name) {
		... TagFragment
	}
}
fragment TagFragment on Tag {
	id
	name
	aliases {
		id
		name
	}
	related {
		id
		name
	}
}
`

func (c *Client) GetTagByName(ctx context.Context, name string) (*GetTagByName, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTagByName",
		Query:         GetTagByNameDocument,
		Variables: map[string]interface{}{
			"name": name,
		},
	}

	var resp GetTagByName
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTagByNameWithResponse(ctx context.Context, name string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTagByName",
		Query:         GetTagByNameDocument,
		Variables: map[string]interface{}{
			"name": name,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTagIDDocument = `query GetTagID ($name: String!) {
	getTag(name: $name) {
		id
	}
}
`

func (c *Client) GetTagID(ctx context.Context, name string) (*GetTagID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTagID",
		Query:         GetTagIDDocument,
		Variables: map[string]interface{}{
			"name": name,
		},
	}

	var resp GetTagID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTagIDWithResponse(ctx context.Context, name string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTagID",
		Query:         GetTagIDDocument,
		Variables: map[string]interface{}{
			"name": name,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTagsDocument = `query GetTags ($getFilter: TagFilter, $order: TagOrder, $first: Int, $offset: Int) {
	queryTag(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... TagFragment
	}
	aggregateTag(filter: $getFilter) {
		count
	}
}
fragment TagFragment on Tag {
	id
	name
	aliases {
		id
		name
	}
	related {
		id
		name
	}
}
`

func (c *Client) GetTags(ctx context.Context, getFilter *TagFilter, order *TagOrder, first *int64, offset *int64) (*GetTags, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTags",
		Query:         GetTagsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetTags
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTagsWithResponse(ctx context.Context, getFilter *TagFilter, order *TagOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTags",
		Query:         GetTagsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateTagsDocument = `mutation CreateTags ($createInput: [AddTagInput!]!) {
	addTag(input: $createInput, upsert: true) {
		tag {
			id
		}
	}
}
`

func (c *Client) CreateTags(ctx context.Context, createInput []*AddTagInput) (*CreateTags, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateTags",
		Query:         CreateTagsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateTags
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateTagsWithResponse(ctx context.Context, createInput []*AddTagInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateTags",
		Query:         CreateTagsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateTagsDocument = `mutation UpdateTags ($updateInput: UpdateTagInput!) {
	updateTag(input: $updateInput) {
		tag {
			id
		}
	}
}
`

func (c *Client) UpdateTags(ctx context.Context, updateInput UpdateTagInput) (*UpdateTags, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateTags",
		Query:         UpdateTagsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateTags
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateTagsWithResponse(ctx context.Context, updateInput UpdateTagInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateTags",
		Query:         UpdateTagsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteTagsDocument = `mutation DeleteTags ($delFilter: TagFilter!) {
	deleteTag(filter: $delFilter) {
		tag {
			id
		}
	}
}
`

func (c *Client) DeleteTags(ctx context.Context, delFilter TagFilter) (*DeleteTags, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteTags",
		Query:         DeleteTagsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteTags
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteTagsWithResponse(ctx context.Context, delFilter TagFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteTags",
		Query:         DeleteTagsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTechnicalStandardByIDDocument = `query GetTechnicalStandardByID ($id: ID!) {
	getTechnicalStandard(id: $id) {
		... TechnicalStandardFragment
	}
}
fragment TechnicalStandardFragment on TechnicalStandard {
	id
	xid
	name
	description
	components {
		id
		name
	}
}
`

func (c *Client) GetTechnicalStandardByID(ctx context.Context, id string) (*GetTechnicalStandardByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnicalStandardByID",
		Query:         GetTechnicalStandardByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetTechnicalStandardByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTechnicalStandardByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnicalStandardByID",
		Query:         GetTechnicalStandardByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTechnicalStandardByXidDocument = `query GetTechnicalStandardByXid ($xid: String!) {
	getTechnicalStandard(xid: $xid) {
		... TechnicalStandardFragment
	}
}
fragment TechnicalStandardFragment on TechnicalStandard {
	id
	xid
	name
	description
	components {
		id
		name
	}
}
`

func (c *Client) GetTechnicalStandardByXid(ctx context.Context, xid string) (*GetTechnicalStandardByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnicalStandardByXid",
		Query:         GetTechnicalStandardByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetTechnicalStandardByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTechnicalStandardByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnicalStandardByXid",
		Query:         GetTechnicalStandardByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTechnicalStandardIDDocument = `query GetTechnicalStandardID ($xid: String!) {
	getTechnicalStandard(xid: $xid) {
		id
	}
}
`

func (c *Client) GetTechnicalStandardID(ctx context.Context, xid string) (*GetTechnicalStandardID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnicalStandardID",
		Query:         GetTechnicalStandardIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetTechnicalStandardID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTechnicalStandardIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnicalStandardID",
		Query:         GetTechnicalStandardIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTechnicalStandardsDocument = `query GetTechnicalStandards ($getFilter: TechnicalStandardFilter, $order: TechnicalStandardOrder, $first: Int, $offset: Int) {
	queryTechnicalStandard(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... TechnicalStandardFragment
	}
	aggregateTechnicalStandard(filter: $getFilter) {
		count
	}
}
fragment TechnicalStandardFragment on TechnicalStandard {
	id
	xid
	name
	description
	components {
		id
		name
	}
}
`

func (c *Client) GetTechnicalStandards(ctx context.Context, getFilter *TechnicalStandardFilter, order *TechnicalStandardOrder, first *int64, offset *int64) (*GetTechnicalStandards, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnicalStandards",
		Query:         GetTechnicalStandardsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetTechnicalStandards
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTechnicalStandardsWithResponse(ctx context.Context, getFilter *TechnicalStandardFilter, order *TechnicalStandardOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnicalStandards",
		Query:         GetTechnicalStandardsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateTechnicalStandardsDocument = `mutation CreateTechnicalStandards ($createInput: [AddTechnicalStandardInput!]!) {
	addTechnicalStandard(input: $createInput, upsert: true) {
		technicalStandard {
			id
		}
	}
}
`

func (c *Client) CreateTechnicalStandards(ctx context.Context, createInput []*AddTechnicalStandardInput) (*CreateTechnicalStandards, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateTechnicalStandards",
		Query:         CreateTechnicalStandardsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateTechnicalStandards
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateTechnicalStandardsWithResponse(ctx context.Context, createInput []*AddTechnicalStandardInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateTechnicalStandards",
		Query:         CreateTechnicalStandardsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateTechnicalStandardsDocument = `mutation UpdateTechnicalStandards ($updateInput: UpdateTechnicalStandardInput!) {
	updateTechnicalStandard(input: $updateInput) {
		technicalStandard {
			id
		}
	}
}
`

func (c *Client) UpdateTechnicalStandards(ctx context.Context, updateInput UpdateTechnicalStandardInput) (*UpdateTechnicalStandards, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateTechnicalStandards",
		Query:         UpdateTechnicalStandardsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateTechnicalStandards
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateTechnicalStandardsWithResponse(ctx context.Context, updateInput UpdateTechnicalStandardInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateTechnicalStandards",
		Query:         UpdateTechnicalStandardsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteTechnicalStandardsDocument = `mutation DeleteTechnicalStandards ($delFilter: TechnicalStandardFilter!) {
	deleteTechnicalStandard(filter: $delFilter) {
		technicalStandard {
			id
		}
	}
}
`

func (c *Client) DeleteTechnicalStandards(ctx context.Context, delFilter TechnicalStandardFilter) (*DeleteTechnicalStandards, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteTechnicalStandards",
		Query:         DeleteTechnicalStandardsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteTechnicalStandards
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteTechnicalStandardsWithResponse(ctx context.Context, delFilter TechnicalStandardFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteTechnicalStandards",
		Query:         DeleteTechnicalStandardsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTechnologySpecificDocumentationCriteriaByIDDocument = `query GetTechnologySpecificDocumentationCriteriaByID ($id: ID!) {
	getTechnologySpecificDocumentationCriteria(id: $id) {
		... TechnologySpecificDocumentationCriteriaFragment
	}
}
fragment TechnologySpecificDocumentationCriteriaFragment on TechnologySpecificDocumentationCriteria {
	id
	xid
	name
	comment
	requirementsUri
	components {
		id
		name
	}
}
`

func (c *Client) GetTechnologySpecificDocumentationCriteriaByID(ctx context.Context, id string) (*GetTechnologySpecificDocumentationCriteriaByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnologySpecificDocumentationCriteriaByID",
		Query:         GetTechnologySpecificDocumentationCriteriaByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetTechnologySpecificDocumentationCriteriaByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTechnologySpecificDocumentationCriteriaByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnologySpecificDocumentationCriteriaByID",
		Query:         GetTechnologySpecificDocumentationCriteriaByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTechnologySpecificDocumentationCriteriaByXidDocument = `query GetTechnologySpecificDocumentationCriteriaByXid ($xid: String!) {
	getTechnologySpecificDocumentationCriteria(xid: $xid) {
		... TechnologySpecificDocumentationCriteriaFragment
	}
}
fragment TechnologySpecificDocumentationCriteriaFragment on TechnologySpecificDocumentationCriteria {
	id
	xid
	name
	comment
	requirementsUri
	components {
		id
		name
	}
}
`

func (c *Client) GetTechnologySpecificDocumentationCriteriaByXid(ctx context.Context, xid string) (*GetTechnologySpecificDocumentationCriteriaByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnologySpecificDocumentationCriteriaByXid",
		Query:         GetTechnologySpecificDocumentationCriteriaByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetTechnologySpecificDocumentationCriteriaByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTechnologySpecificDocumentationCriteriaByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnologySpecificDocumentationCriteriaByXid",
		Query:         GetTechnologySpecificDocumentationCriteriaByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTechnologySpecificDocumentationCriteriaIDDocument = `query GetTechnologySpecificDocumentationCriteriaID ($xid: String!) {
	getTechnologySpecificDocumentationCriteria(xid: $xid) {
		id
	}
}
`

func (c *Client) GetTechnologySpecificDocumentationCriteriaID(ctx context.Context, xid string) (*GetTechnologySpecificDocumentationCriteriaID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnologySpecificDocumentationCriteriaID",
		Query:         GetTechnologySpecificDocumentationCriteriaIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetTechnologySpecificDocumentationCriteriaID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTechnologySpecificDocumentationCriteriaIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnologySpecificDocumentationCriteriaID",
		Query:         GetTechnologySpecificDocumentationCriteriaIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetTechnologySpecificDocumentationCriteriasDocument = `query GetTechnologySpecificDocumentationCriterias ($getFilter: TechnologySpecificDocumentationCriteriaFilter, $order: TechnologySpecificDocumentationCriteriaOrder, $first: Int, $offset: Int) {
	queryTechnologySpecificDocumentationCriteria(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... TechnologySpecificDocumentationCriteriaFragment
	}
	aggregateTechnologySpecificDocumentationCriteria(filter: $getFilter) {
		count
	}
}
fragment TechnologySpecificDocumentationCriteriaFragment on TechnologySpecificDocumentationCriteria {
	id
	xid
	name
	comment
	requirementsUri
	components {
		id
		name
	}
}
`

func (c *Client) GetTechnologySpecificDocumentationCriterias(ctx context.Context, getFilter *TechnologySpecificDocumentationCriteriaFilter, order *TechnologySpecificDocumentationCriteriaOrder, first *int64, offset *int64) (*GetTechnologySpecificDocumentationCriterias, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnologySpecificDocumentationCriterias",
		Query:         GetTechnologySpecificDocumentationCriteriasDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetTechnologySpecificDocumentationCriterias
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetTechnologySpecificDocumentationCriteriasWithResponse(ctx context.Context, getFilter *TechnologySpecificDocumentationCriteriaFilter, order *TechnologySpecificDocumentationCriteriaOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetTechnologySpecificDocumentationCriterias",
		Query:         GetTechnologySpecificDocumentationCriteriasDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateTechnologySpecificDocumentationCriteriasDocument = `mutation CreateTechnologySpecificDocumentationCriterias ($createInput: [AddTechnologySpecificDocumentationCriteriaInput!]!) {
	addTechnologySpecificDocumentationCriteria(input: $createInput, upsert: true) {
		technologySpecificDocumentationCriteria {
			id
		}
	}
}
`

func (c *Client) CreateTechnologySpecificDocumentationCriterias(ctx context.Context, createInput []*AddTechnologySpecificDocumentationCriteriaInput) (*CreateTechnologySpecificDocumentationCriterias, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateTechnologySpecificDocumentationCriterias",
		Query:         CreateTechnologySpecificDocumentationCriteriasDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateTechnologySpecificDocumentationCriterias
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateTechnologySpecificDocumentationCriteriasWithResponse(ctx context.Context, createInput []*AddTechnologySpecificDocumentationCriteriaInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateTechnologySpecificDocumentationCriterias",
		Query:         CreateTechnologySpecificDocumentationCriteriasDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateTechnologySpecificDocumentationCriteriasDocument = `mutation UpdateTechnologySpecificDocumentationCriterias ($updateInput: UpdateTechnologySpecificDocumentationCriteriaInput!) {
	updateTechnologySpecificDocumentationCriteria(input: $updateInput) {
		technologySpecificDocumentationCriteria {
			id
		}
	}
}
`

func (c *Client) UpdateTechnologySpecificDocumentationCriterias(ctx context.Context, updateInput UpdateTechnologySpecificDocumentationCriteriaInput) (*UpdateTechnologySpecificDocumentationCriterias, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateTechnologySpecificDocumentationCriterias",
		Query:         UpdateTechnologySpecificDocumentationCriteriasDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateTechnologySpecificDocumentationCriterias
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateTechnologySpecificDocumentationCriteriasWithResponse(ctx context.Context, updateInput UpdateTechnologySpecificDocumentationCriteriaInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateTechnologySpecificDocumentationCriterias",
		Query:         UpdateTechnologySpecificDocumentationCriteriasDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteTechnologySpecificDocumentationCriteriasDocument = `mutation DeleteTechnologySpecificDocumentationCriterias ($delFilter: TechnologySpecificDocumentationCriteriaFilter!) {
	deleteTechnologySpecificDocumentationCriteria(filter: $delFilter) {
		technologySpecificDocumentationCriteria {
			id
		}
	}
}
`

func (c *Client) DeleteTechnologySpecificDocumentationCriterias(ctx context.Context, delFilter TechnologySpecificDocumentationCriteriaFilter) (*DeleteTechnologySpecificDocumentationCriterias, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteTechnologySpecificDocumentationCriterias",
		Query:         DeleteTechnologySpecificDocumentationCriteriasDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteTechnologySpecificDocumentationCriterias
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteTechnologySpecificDocumentationCriteriasWithResponse(ctx context.Context, delFilter TechnologySpecificDocumentationCriteriaFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteTechnologySpecificDocumentationCriterias",
		Query:         DeleteTechnologySpecificDocumentationCriteriasDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const TestConnectionDocument = `query TestConnection {
	__schema {
		queryType {
			name
		}
	}
}
`

func (c *Client) TestConnection(ctx context.Context) (*TestConnection, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "TestConnection",
		Query:         TestConnectionDocument,
		Variables:     map[string]interface{}{},
	}

	var resp TestConnection
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) TestConnectionWithResponse(ctx context.Context, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "TestConnection",
		Query:         TestConnectionDocument,
		Variables:     map[string]interface{}{},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetUserOrGroupByIDDocument = `query GetUserOrGroupByID ($id: ID!) {
	getUserOrGroup(id: $id) {
		... on User {
			... UserFragment
		}
		... on Group {
			... GroupFragment
		}
	}
}
fragment UserFragment on User {
	... UserOrGroupFragment
	locale
}
fragment UserOrGroupFragment on UserOrGroup {
	__typename
	id
	xid
	host {
		id
		name
	}
	name
	fullName
	email
	avatar {
		id
		url
	}
	url
	memberOf {
		id
		fullName
	}
	products {
		id
		name
	}
}
fragment GroupFragment on Group {
	... UserOrGroupFragment
	members {
		__typename
		id
	}
}
`

func (c *Client) GetUserOrGroupByID(ctx context.Context, id string) (*GetUserOrGroupByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserOrGroupByID",
		Query:         GetUserOrGroupByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetUserOrGroupByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetUserOrGroupByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserOrGroupByID",
		Query:         GetUserOrGroupByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetUserOrGroupByXidDocument = `query GetUserOrGroupByXid ($xid: String!) {
	getUserOrGroup(xid: $xid) {
		... on User {
			... UserFragment
		}
		... on Group {
			... GroupFragment
		}
	}
}
fragment UserFragment on User {
	... UserOrGroupFragment
	locale
}
fragment UserOrGroupFragment on UserOrGroup {
	__typename
	id
	xid
	host {
		id
		name
	}
	name
	fullName
	email
	avatar {
		id
		url
	}
	url
	memberOf {
		id
		fullName
	}
	products {
		id
		name
	}
}
fragment GroupFragment on Group {
	... UserOrGroupFragment
	members {
		__typename
		id
	}
}
`

func (c *Client) GetUserOrGroupByXid(ctx context.Context, xid string) (*GetUserOrGroupByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserOrGroupByXid",
		Query:         GetUserOrGroupByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetUserOrGroupByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetUserOrGroupByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserOrGroupByXid",
		Query:         GetUserOrGroupByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetUserOrGroupIDDocument = `query GetUserOrGroupID ($xid: String!) {
	getUserOrGroup(xid: $xid) {
		id
	}
}
`

func (c *Client) GetUserOrGroupID(ctx context.Context, xid string) (*GetUserOrGroupID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserOrGroupID",
		Query:         GetUserOrGroupIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetUserOrGroupID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetUserOrGroupIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserOrGroupID",
		Query:         GetUserOrGroupIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetUserOrGroupsDocument = `query GetUserOrGroups ($getFilter: UserOrGroupFilter, $order: UserOrGroupOrder, $first: Int, $offset: Int) {
	queryUserOrGroup(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... on User {
			... UserFragment
		}
		... on Group {
			... GroupFragment
		}
	}
	aggregateUserOrGroup(filter: $getFilter) {
		count
	}
}
fragment UserFragment on User {
	... UserOrGroupFragment
	locale
}
fragment UserOrGroupFragment on UserOrGroup {
	__typename
	id
	xid
	host {
		id
		name
	}
	name
	fullName
	email
	avatar {
		id
		url
	}
	url
	memberOf {
		id
		fullName
	}
	products {
		id
		name
	}
}
fragment GroupFragment on Group {
	... UserOrGroupFragment
	members {
		__typename
		id
	}
}
`

func (c *Client) GetUserOrGroups(ctx context.Context, getFilter *UserOrGroupFilter, order *UserOrGroupOrder, first *int64, offset *int64) (*GetUserOrGroups, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserOrGroups",
		Query:         GetUserOrGroupsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetUserOrGroups
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetUserOrGroupsWithResponse(ctx context.Context, getFilter *UserOrGroupFilter, order *UserOrGroupOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserOrGroups",
		Query:         GetUserOrGroupsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateUserOrGroupsDocument = `mutation UpdateUserOrGroups ($updateInput: UpdateUserOrGroupInput!) {
	updateUserOrGroup(input: $updateInput) {
		userOrGroup {
			id
		}
	}
}
`

func (c *Client) UpdateUserOrGroups(ctx context.Context, updateInput UpdateUserOrGroupInput) (*UpdateUserOrGroups, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateUserOrGroups",
		Query:         UpdateUserOrGroupsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateUserOrGroups
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateUserOrGroupsWithResponse(ctx context.Context, updateInput UpdateUserOrGroupInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateUserOrGroups",
		Query:         UpdateUserOrGroupsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteUserOrGroupsDocument = `mutation DeleteUserOrGroups ($delFilter: UserOrGroupFilter!) {
	deleteUserOrGroup(filter: $delFilter) {
		userOrGroup {
			id
		}
	}
}
`

func (c *Client) DeleteUserOrGroups(ctx context.Context, delFilter UserOrGroupFilter) (*DeleteUserOrGroups, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteUserOrGroups",
		Query:         DeleteUserOrGroupsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteUserOrGroups
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteUserOrGroupsWithResponse(ctx context.Context, delFilter UserOrGroupFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteUserOrGroups",
		Query:         DeleteUserOrGroupsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetUserByIDDocument = `query GetUserByID ($id: ID!) {
	getUser(id: $id) {
		... UserFragment
	}
}
fragment UserFragment on User {
	... UserOrGroupFragment
	locale
}
fragment UserOrGroupFragment on UserOrGroup {
	__typename
	id
	xid
	host {
		id
		name
	}
	name
	fullName
	email
	avatar {
		id
		url
	}
	url
	memberOf {
		id
		fullName
	}
	products {
		id
		name
	}
}
`

func (c *Client) GetUserByID(ctx context.Context, id string) (*GetUserByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserByID",
		Query:         GetUserByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetUserByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetUserByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserByID",
		Query:         GetUserByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetUserByXidDocument = `query GetUserByXid ($xid: String!) {
	getUser(xid: $xid) {
		... UserFragment
	}
}
fragment UserFragment on User {
	... UserOrGroupFragment
	locale
}
fragment UserOrGroupFragment on UserOrGroup {
	__typename
	id
	xid
	host {
		id
		name
	}
	name
	fullName
	email
	avatar {
		id
		url
	}
	url
	memberOf {
		id
		fullName
	}
	products {
		id
		name
	}
}
`

func (c *Client) GetUserByXid(ctx context.Context, xid string) (*GetUserByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserByXid",
		Query:         GetUserByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetUserByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetUserByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserByXid",
		Query:         GetUserByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetUserIDDocument = `query GetUserID ($xid: String!) {
	getUser(xid: $xid) {
		id
	}
}
`

func (c *Client) GetUserID(ctx context.Context, xid string) (*GetUserID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserID",
		Query:         GetUserIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetUserID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetUserIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUserID",
		Query:         GetUserIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetUsersDocument = `query GetUsers ($getFilter: UserFilter, $order: UserOrder, $first: Int, $offset: Int) {
	queryUser(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... UserFragment
	}
	aggregateUser(filter: $getFilter) {
		count
	}
}
fragment UserFragment on User {
	... UserOrGroupFragment
	locale
}
fragment UserOrGroupFragment on UserOrGroup {
	__typename
	id
	xid
	host {
		id
		name
	}
	name
	fullName
	email
	avatar {
		id
		url
	}
	url
	memberOf {
		id
		fullName
	}
	products {
		id
		name
	}
}
`

func (c *Client) GetUsers(ctx context.Context, getFilter *UserFilter, order *UserOrder, first *int64, offset *int64) (*GetUsers, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUsers",
		Query:         GetUsersDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetUsers
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetUsersWithResponse(ctx context.Context, getFilter *UserFilter, order *UserOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetUsers",
		Query:         GetUsersDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateUsersDocument = `mutation CreateUsers ($createInput: [AddUserInput!]!) {
	addUser(input: $createInput, upsert: true) {
		user {
			id
		}
	}
}
`

func (c *Client) CreateUsers(ctx context.Context, createInput []*AddUserInput) (*CreateUsers, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateUsers",
		Query:         CreateUsersDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateUsers
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateUsersWithResponse(ctx context.Context, createInput []*AddUserInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateUsers",
		Query:         CreateUsersDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateUsersDocument = `mutation UpdateUsers ($updateInput: UpdateUserInput!) {
	updateUser(input: $updateInput) {
		user {
			id
		}
	}
}
`

func (c *Client) UpdateUsers(ctx context.Context, updateInput UpdateUserInput) (*UpdateUsers, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateUsers",
		Query:         UpdateUsersDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateUsers
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateUsersWithResponse(ctx context.Context, updateInput UpdateUserInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateUsers",
		Query:         UpdateUsersDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteUsersDocument = `mutation DeleteUsers ($delFilter: UserFilter!) {
	deleteUser(filter: $delFilter) {
		user {
			id
		}
	}
}
`

func (c *Client) DeleteUsers(ctx context.Context, delFilter UserFilter) (*DeleteUsers, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteUsers",
		Query:         DeleteUsersDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteUsers
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteUsersWithResponse(ctx context.Context, delFilter UserFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteUsers",
		Query:         DeleteUsersDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetGroupByIDDocument = `query GetGroupByID ($id: ID!) {
	getGroup(id: $id) {
		... GroupFragment
	}
}
fragment GroupFragment on Group {
	... UserOrGroupFragment
	members {
		__typename
		id
	}
}
fragment UserOrGroupFragment on UserOrGroup {
	__typename
	id
	xid
	host {
		id
		name
	}
	name
	fullName
	email
	avatar {
		id
		url
	}
	url
	memberOf {
		id
		fullName
	}
	products {
		id
		name
	}
}
`

func (c *Client) GetGroupByID(ctx context.Context, id string) (*GetGroupByID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroupByID",
		Query:         GetGroupByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	var resp GetGroupByID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetGroupByIDWithResponse(ctx context.Context, id string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroupByID",
		Query:         GetGroupByIDDocument,
		Variables: map[string]interface{}{
			"id": id,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetGroupByXidDocument = `query GetGroupByXid ($xid: String!) {
	getGroup(xid: $xid) {
		... GroupFragment
	}
}
fragment GroupFragment on Group {
	... UserOrGroupFragment
	members {
		__typename
		id
	}
}
fragment UserOrGroupFragment on UserOrGroup {
	__typename
	id
	xid
	host {
		id
		name
	}
	name
	fullName
	email
	avatar {
		id
		url
	}
	url
	memberOf {
		id
		fullName
	}
	products {
		id
		name
	}
}
`

func (c *Client) GetGroupByXid(ctx context.Context, xid string) (*GetGroupByXid, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroupByXid",
		Query:         GetGroupByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetGroupByXid
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetGroupByXidWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroupByXid",
		Query:         GetGroupByXidDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetGroupIDDocument = `query GetGroupID ($xid: String!) {
	getGroup(xid: $xid) {
		id
	}
}
`

func (c *Client) GetGroupID(ctx context.Context, xid string) (*GetGroupID, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroupID",
		Query:         GetGroupIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	var resp GetGroupID
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetGroupIDWithResponse(ctx context.Context, xid string, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroupID",
		Query:         GetGroupIDDocument,
		Variables: map[string]interface{}{
			"xid": xid,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const GetGroupsDocument = `query GetGroups ($getFilter: GroupFilter, $order: GroupOrder, $first: Int, $offset: Int) {
	queryGroup(filter: $getFilter, order: $order, first: $first, offset: $offset) {
		... GroupFragment
	}
	aggregateGroup(filter: $getFilter) {
		count
	}
}
fragment GroupFragment on Group {
	... UserOrGroupFragment
	members {
		__typename
		id
	}
}
fragment UserOrGroupFragment on UserOrGroup {
	__typename
	id
	xid
	host {
		id
		name
	}
	name
	fullName
	email
	avatar {
		id
		url
	}
	url
	memberOf {
		id
		fullName
	}
	products {
		id
		name
	}
}
`

func (c *Client) GetGroups(ctx context.Context, getFilter *GroupFilter, order *GroupOrder, first *int64, offset *int64) (*GetGroups, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroups",
		Query:         GetGroupsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	var resp GetGroups
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) GetGroupsWithResponse(ctx context.Context, getFilter *GroupFilter, order *GroupOrder, first *int64, offset *int64, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "GetGroups",
		Query:         GetGroupsDocument,
		Variables: map[string]interface{}{
			"getFilter": getFilter,
			"order":     order,
			"first":     first,
			"offset":    offset,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const CreateGroupsDocument = `mutation CreateGroups ($createInput: [AddGroupInput!]!) {
	addGroup(input: $createInput, upsert: true) {
		group {
			id
		}
	}
}
`

func (c *Client) CreateGroups(ctx context.Context, createInput []*AddGroupInput) (*CreateGroups, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateGroups",
		Query:         CreateGroupsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	var resp CreateGroups
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) CreateGroupsWithResponse(ctx context.Context, createInput []*AddGroupInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "CreateGroups",
		Query:         CreateGroupsDocument,
		Variables: map[string]interface{}{
			"createInput": createInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const UpdateGroupsDocument = `mutation UpdateGroups ($updateInput: UpdateGroupInput!) {
	updateGroup(input: $updateInput) {
		group {
			id
		}
	}
}
`

func (c *Client) UpdateGroups(ctx context.Context, updateInput UpdateGroupInput) (*UpdateGroups, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateGroups",
		Query:         UpdateGroupsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	var resp UpdateGroups
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) UpdateGroupsWithResponse(ctx context.Context, updateInput UpdateGroupInput, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "UpdateGroups",
		Query:         UpdateGroupsDocument,
		Variables: map[string]interface{}{
			"updateInput": updateInput,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

const DeleteGroupsDocument = `mutation DeleteGroups ($delFilter: GroupFilter!) {
	deleteGroup(filter: $delFilter) {
		group {
			id
		}
	}
}
`

func (c *Client) DeleteGroups(ctx context.Context, delFilter GroupFilter) (*DeleteGroups, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteGroups",
		Query:         DeleteGroupsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	var resp DeleteGroups
	err := c.Requester.Do(req, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *Client) DeleteGroupsWithResponse(ctx context.Context, delFilter GroupFilter, resp interface{}) error {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: "DeleteGroups",
		Query:         DeleteGroupsDocument,
		Variables: map[string]interface{}{
			"delFilter": delFilter,
		},
	}

	err := c.Requester.Do(req, resp)
	if err != nil {
		return err
	}
	return nil
}

// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ ComponentRepository = (*DgraphRepository)(nil)

// ComponentRepository is an interface for getting and saving `Component` objects to a repository.
type ComponentRepository interface {
	GetComponent(ctx context.Context, id, xid *string) (*models.Component, error)
	GetComponents(ctx context.Context, filter *dgclient.ComponentFilter, order *dgclient.ComponentOrder, first *int64, offset *int64) ([]*models.Component, int64, error)
	GetAllComponents(ctx context.Context) ([]*models.Component, int64, error)
	CreateComponent(ctx context.Context, input *models.Component) error
	CreateComponents(ctx context.Context, input []*models.Component) error
	UpdateComponent(ctx context.Context, input *models.Component) error
	DeleteComponent(ctx context.Context, id, xid *string) error
	DeleteAllComponents(ctx context.Context) error
}

var (
	errGetComponentStr    = "failed to get component(s)"
	errSaveComponentStr   = "failed to save component(s)"
	errDeleteComponentStr = "failed to delete component(s)"
)

// GetComponent returns a `Component` object by its ID.
func (dr *DgraphRepository) GetComponent(ctx context.Context, id, xid *string) (*models.Component, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get Component", "id", *id)
		rsp, err := dr.client.GetComponentByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetComponentStr).Add("componentId", id)
		}
		rspData = rsp.GetComponent
	} else if xid != nil {
		dr.log.Debugw("get Component", "xid", *xid)
		rsp, err := dr.client.GetComponentByXid(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetComponentStr).Add("componentXid", xid)
		}
		rspData = rsp.GetComponent
	} else {
		panic("must specify id or xid")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.Component{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetComponentID returns the ID of an existing `Component` object.
func (dr *DgraphRepository) GetComponentID(ctx context.Context, xid *string) (*string, error) {
	if xid != nil {
		dr.log.Debugw("get Component", "xid", *xid)
		rsp, err := dr.client.GetComponentID(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetComponentStr).Add("componentXid", xid)
		}
		if rsp.GetComponent == nil {
			return nil, nil
		}
		return &rsp.GetComponent.ID, nil
	}

	panic("must specify xid")
}

// GetComponents returns a list of `Component` objects matching the filter criteria.
func (dr *DgraphRepository) GetComponents(ctx context.Context, filter *dgclient.ComponentFilter, order *dgclient.ComponentOrder, first *int64, offset *int64) ([]*models.Component, int64, error) {
	dr.log.Debugw("get Components")
	rsp, err := dr.client.GetComponents(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetComponentStr)
	}
	ret := make([]*models.Component, 0, len(rsp.QueryComponent))
	if err = dr.copier.CopyTo(rsp.QueryComponent, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateComponent.Count, nil
}

// GetAllComponents returns a list of all `Component` objects.
func (dr *DgraphRepository) GetAllComponents(ctx context.Context) ([]*models.Component, int64, error) {
	return dr.GetComponents(ctx, nil, nil, nil, nil)
}

// GetComponentWithCustomQuery returns a `Component` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetComponentWithCustomQuery(ctx context.Context, operationName, query string, id, xid *string) (*models.Component, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}
	rsp := struct {
		Component *models.Component "json:\"getComponent\" graphql:\"getComponent\""
	}{}
	dr.log.Debugw("get Component with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetComponentStr)
	}
	return rsp.Component, nil
}

// GetComponentsWithCustomQuery returns a list of `Component` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetComponentsWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.ComponentFilter, order *dgclient.ComponentOrder, first *int64, offset *int64) ([]*models.Component, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		Components []*models.Component "json:\"queryComponent\" graphql:\"queryComponent\""
	}{}
	dr.log.Debugw("get Components with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetComponentStr)
	}
	return rsp.Components, nil
}

// GetAllComponentsWithCustomQuery returns a list of all `Component` objects.
func (dr *DgraphRepository) GetAllComponentsWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.Component, error) {
	return dr.GetComponentsWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateComponent creates a new `Component` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateComponent(ctx context.Context, input *models.Component) error {
	dr.log.Debugw("create Component", []interface{}{"xid", *input.Xid}...)
	inputData := dgclient.AddComponentInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateComponents(ctx, []*dgclient.AddComponentInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create component").
			Add("componentId", input.ID).Add("componentXid", input.Xid)
	}
	// save ID from response
	input.ID = &rsp.AddComponent.Component[0].ID
	return nil
}

// CreateComponents creates new `Component` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateComponents(ctx context.Context, input []*models.Component) error {
	inputData := make([]*dgclient.AddComponentInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddComponentInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create Components")
	rsp, err := dr.client.CreateComponents(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create components")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddComponent.Component[i].ID
	}

	return nil
}

// UpdateComponent updates an existing `Component` object.
func (dr *DgraphRepository) UpdateComponent(ctx context.Context, input *models.Component) error {
	dr.log.Debugw("update Component", []interface{}{"id", *input.ID, "xid", *input.Xid}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID").Add("componentXid", input.Xid)
	}
	patch := &dgclient.ComponentPatch{}
	dr.copyORMStruct(input, patch)
	patch.Xid = nil
	inputData := dgclient.UpdateComponentInput{
		Filter: dgclient.ComponentFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateComponents(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update component").
			Add("componentId", *input.ID).Add("componentXid", input.Xid)
	}
	return nil
}

// DeleteComponent deletes a `Component` object.
func (dr *DgraphRepository) DeleteComponent(ctx context.Context, id, xid *string) error {
	delFilter := dgclient.ComponentFilter{}
	if id != nil && xid != nil {
		return NewRepoError("must specify either id or xid")
	}
	if id != nil {
		delFilter.ID = []string{*id}
	}
	if xid != nil {
		delFilter.Xid = &dgclient.StringHashFilter{Eq: xid}
	}

	dr.log.Debugw("delete Component")
	if _, err := dr.client.DeleteComponents(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteComponentStr).
			Add("componentId", id).Add("componentXid", xid)
	}
	return nil
}

// DeleteAllComponents deletes all `Component` objects.
func (dr *DgraphRepository) DeleteAllComponents(ctx context.Context) error {
	delFilter := dgclient.ComponentFilter{}
	dr.log.Debugw("delete all Component")
	if _, err := dr.client.DeleteComponents(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteComponentStr)
	}
	return nil
}

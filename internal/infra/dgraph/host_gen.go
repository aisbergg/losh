// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ HostRepository = (*DgraphRepository)(nil)

// HostRepository is an interface for getting and saving `Host` objects to a repository.
type HostRepository interface {
	GetHost(ctx context.Context, id, domain *string) (*models.Host, error)
	GetHosts(ctx context.Context, filter *dgclient.HostFilter, order *dgclient.HostOrder, first *int64, offset *int64) ([]*models.Host, int64, error)
	GetAllHosts(ctx context.Context) ([]*models.Host, int64, error)
	CreateHost(ctx context.Context, input *models.Host) error
	CreateHosts(ctx context.Context, input []*models.Host) error
	UpdateHost(ctx context.Context, input *models.Host) error
	DeleteHost(ctx context.Context, id, domain *string) error
	DeleteAllHosts(ctx context.Context) error
}

var (
	errGetHostStr    = "failed to get host(s)"
	errSaveHostStr   = "failed to save host(s)"
	errDeleteHostStr = "failed to delete host(s)"
)

// GetHost returns a `Host` object by its ID.
func (dr *DgraphRepository) GetHost(ctx context.Context, id, domain *string) (*models.Host, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get Host", "id", *id)
		rsp, err := dr.client.GetHostByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetHostStr).Add("hostId", id)
		}
		rspData = rsp.GetHost
	} else if domain != nil {
		dr.log.Debugw("get Host", "domain", *domain)
		rsp, err := dr.client.GetHostByDomain(ctx, *domain)
		if err != nil {
			return nil, WrapRepoError(err, errGetHostStr).Add("hostDomain", domain)
		}
		rspData = rsp.GetHost
	} else {
		panic("must specify id or domain")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.Host{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetHostID returns the ID of an existing `Host` object.
func (dr *DgraphRepository) GetHostID(ctx context.Context, domain *string) (*string, error) {
	if domain != nil {
		dr.log.Debugw("get Host", "domain", *domain)
		rsp, err := dr.client.GetHostID(ctx, *domain)
		if err != nil {
			return nil, WrapRepoError(err, errGetHostStr).Add("hostDomain", domain)
		}
		if rsp.GetHost == nil {
			return nil, nil
		}
		return &rsp.GetHost.ID, nil
	}

	panic("must specify domain")
}

// GetHosts returns a list of `Host` objects matching the filter criteria.
func (dr *DgraphRepository) GetHosts(ctx context.Context, filter *dgclient.HostFilter, order *dgclient.HostOrder, first *int64, offset *int64) ([]*models.Host, int64, error) {
	dr.log.Debugw("get Hosts")
	rsp, err := dr.client.GetHosts(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetHostStr)
	}
	ret := make([]*models.Host, 0, len(rsp.QueryHost))
	if err = dr.copier.CopyTo(rsp.QueryHost, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateHost.Count, nil
}

// GetAllHosts returns a list of all `Host` objects.
func (dr *DgraphRepository) GetAllHosts(ctx context.Context) ([]*models.Host, int64, error) {
	return dr.GetHosts(ctx, nil, nil, nil, nil)
}

// GetHostWithCustomQuery returns a `Host` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetHostWithCustomQuery(ctx context.Context, operationName, query string, id, domain *string) (*models.Host, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id":     id,
			"domain": domain,
		},
	}
	rsp := struct {
		Host *models.Host "json:\"getHost\" graphql:\"getHost\""
	}{}
	dr.log.Debugw("get Host with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetHostStr)
	}
	return rsp.Host, nil
}

// GetHostsWithCustomQuery returns a list of `Host` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetHostsWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.HostFilter, order *dgclient.HostOrder, first *int64, offset *int64) ([]*models.Host, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		Hosts []*models.Host "json:\"queryHost\" graphql:\"queryHost\""
	}{}
	dr.log.Debugw("get Hosts with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetHostStr)
	}
	return rsp.Hosts, nil
}

// GetAllHostsWithCustomQuery returns a list of all `Host` objects.
func (dr *DgraphRepository) GetAllHostsWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.Host, error) {
	return dr.GetHostsWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateHost creates a new `Host` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateHost(ctx context.Context, input *models.Host) error {
	dr.log.Debugw("create Host", []interface{}{"domain", *input.Domain}...)
	inputData := dgclient.AddHostInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateHosts(ctx, []*dgclient.AddHostInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create host").
			Add("hostId", input.ID).Add("hostDomain", input.Domain)
	}
	// save ID from response
	input.ID = &rsp.AddHost.Host[0].ID
	return nil
}

// CreateHosts creates new `Host` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateHosts(ctx context.Context, input []*models.Host) error {
	inputData := make([]*dgclient.AddHostInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddHostInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create Hosts")
	rsp, err := dr.client.CreateHosts(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create hosts")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddHost.Host[i].ID
	}

	return nil
}

// UpdateHost updates an existing `Host` object.
func (dr *DgraphRepository) UpdateHost(ctx context.Context, input *models.Host) error {
	dr.log.Debugw("update Host", []interface{}{"id", *input.ID, "domain", *input.Domain}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID").Add("hostDomain", input.Domain)
	}
	patch := &dgclient.HostPatch{}
	dr.copyORMStruct(input, patch)
	patch.Domain = nil
	inputData := dgclient.UpdateHostInput{
		Filter: dgclient.HostFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateHosts(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update host").
			Add("hostId", *input.ID).Add("hostDomain", input.Domain)
	}
	return nil
}

// DeleteHost deletes a `Host` object.
func (dr *DgraphRepository) DeleteHost(ctx context.Context, id, domain *string) error {
	delFilter := dgclient.HostFilter{}
	if id != nil && domain != nil {
		return NewRepoError("must specify either id or domain")
	}
	if id != nil {
		delFilter.ID = []string{*id}
	}
	if domain != nil {
		delFilter.Domain = &dgclient.StringHashFilterStringRegExpFilter{Eq: domain}
	}

	dr.log.Debugw("delete Host")
	if _, err := dr.client.DeleteHosts(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteHostStr).
			Add("hostId", id).Add("hostDomain", domain)
	}
	return nil
}

// DeleteAllHosts deletes all `Host` objects.
func (dr *DgraphRepository) DeleteAllHosts(ctx context.Context) error {
	delFilter := dgclient.HostFilter{}
	dr.log.Debugw("delete all Host")
	if _, err := dr.client.DeleteHosts(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteHostStr)
	}
	return nil
}

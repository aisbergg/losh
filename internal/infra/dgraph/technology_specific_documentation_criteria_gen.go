// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ TechnologySpecificDocumentationCriteriaRepository = (*DgraphRepository)(nil)

// TechnologySpecificDocumentationCriteriaRepository is an interface for getting and saving `TechnologySpecificDocumentationCriteria` objects to a repository.
type TechnologySpecificDocumentationCriteriaRepository interface {
	GetTechnologySpecificDocumentationCriteria(ctx context.Context, id, xid *string) (*models.TechnologySpecificDocumentationCriteria, error)
	GetTechnologySpecificDocumentationCriterias(ctx context.Context, filter *dgclient.TechnologySpecificDocumentationCriteriaFilter, order *dgclient.TechnologySpecificDocumentationCriteriaOrder, first *int64, offset *int64) ([]*models.TechnologySpecificDocumentationCriteria, int64, error)
	GetAllTechnologySpecificDocumentationCriterias(ctx context.Context) ([]*models.TechnologySpecificDocumentationCriteria, int64, error)
	CreateTechnologySpecificDocumentationCriteria(ctx context.Context, input *models.TechnologySpecificDocumentationCriteria) error
	CreateTechnologySpecificDocumentationCriterias(ctx context.Context, input []*models.TechnologySpecificDocumentationCriteria) error
	UpdateTechnologySpecificDocumentationCriteria(ctx context.Context, input *models.TechnologySpecificDocumentationCriteria) error
	DeleteTechnologySpecificDocumentationCriteria(ctx context.Context, id, xid *string) error
	DeleteAllTechnologySpecificDocumentationCriterias(ctx context.Context) error
}

var (
	errGetTechnologySpecificDocumentationCriteriaStr    = "failed to get technology specific documentation criteria(s)"
	errSaveTechnologySpecificDocumentationCriteriaStr   = "failed to save technology specific documentation criteria(s)"
	errDeleteTechnologySpecificDocumentationCriteriaStr = "failed to delete technology specific documentation criteria(s)"
)

// GetTechnologySpecificDocumentationCriteria returns a `TechnologySpecificDocumentationCriteria` object by its ID.
func (dr *DgraphRepository) GetTechnologySpecificDocumentationCriteria(ctx context.Context, id, xid *string) (*models.TechnologySpecificDocumentationCriteria, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get TechnologySpecificDocumentationCriteria", "id", *id)
		rsp, err := dr.client.GetTechnologySpecificDocumentationCriteriaByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetTechnologySpecificDocumentationCriteriaStr).Add("technologySpecificDocumentationCriteriaId", id)
		}
		rspData = rsp.GetTechnologySpecificDocumentationCriteria
	} else if xid != nil {
		dr.log.Debugw("get TechnologySpecificDocumentationCriteria", "xid", *xid)
		rsp, err := dr.client.GetTechnologySpecificDocumentationCriteriaByXid(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetTechnologySpecificDocumentationCriteriaStr).Add("technologySpecificDocumentationCriteriaXid", xid)
		}
		rspData = rsp.GetTechnologySpecificDocumentationCriteria
	} else {
		panic("must specify id or xid")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.TechnologySpecificDocumentationCriteria{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetTechnologySpecificDocumentationCriteriaID returns the ID of an existing `TechnologySpecificDocumentationCriteria` object.
func (dr *DgraphRepository) GetTechnologySpecificDocumentationCriteriaID(ctx context.Context, xid *string) (*string, error) {
	if xid != nil {
		dr.log.Debugw("get TechnologySpecificDocumentationCriteria", "xid", *xid)
		rsp, err := dr.client.GetTechnologySpecificDocumentationCriteriaID(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetTechnologySpecificDocumentationCriteriaStr).Add("technologySpecificDocumentationCriteriaXid", xid)
		}
		if rsp.GetTechnologySpecificDocumentationCriteria == nil {
			return nil, nil
		}
		return &rsp.GetTechnologySpecificDocumentationCriteria.ID, nil
	}

	panic("must specify xid")
}

// GetTechnologySpecificDocumentationCriterias returns a list of `TechnologySpecificDocumentationCriteria` objects matching the filter criteria.
func (dr *DgraphRepository) GetTechnologySpecificDocumentationCriterias(ctx context.Context, filter *dgclient.TechnologySpecificDocumentationCriteriaFilter, order *dgclient.TechnologySpecificDocumentationCriteriaOrder, first *int64, offset *int64) ([]*models.TechnologySpecificDocumentationCriteria, int64, error) {
	dr.log.Debugw("get TechnologySpecificDocumentationCriterias")
	rsp, err := dr.client.GetTechnologySpecificDocumentationCriterias(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetTechnologySpecificDocumentationCriteriaStr)
	}
	ret := make([]*models.TechnologySpecificDocumentationCriteria, 0, len(rsp.QueryTechnologySpecificDocumentationCriteria))
	if err = dr.copier.CopyTo(rsp.QueryTechnologySpecificDocumentationCriteria, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateTechnologySpecificDocumentationCriteria.Count, nil
}

// GetAllTechnologySpecificDocumentationCriterias returns a list of all `TechnologySpecificDocumentationCriteria` objects.
func (dr *DgraphRepository) GetAllTechnologySpecificDocumentationCriterias(ctx context.Context) ([]*models.TechnologySpecificDocumentationCriteria, int64, error) {
	return dr.GetTechnologySpecificDocumentationCriterias(ctx, nil, nil, nil, nil)
}

// GetTechnologySpecificDocumentationCriteriaWithCustomQuery returns a `TechnologySpecificDocumentationCriteria` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetTechnologySpecificDocumentationCriteriaWithCustomQuery(ctx context.Context, operationName, query string, id, xid *string) (*models.TechnologySpecificDocumentationCriteria, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}
	rsp := struct {
		TechnologySpecificDocumentationCriteria *models.TechnologySpecificDocumentationCriteria "json:\"getTechnologySpecificDocumentationCriteria\" graphql:\"getTechnologySpecificDocumentationCriteria\""
	}{}
	dr.log.Debugw("get TechnologySpecificDocumentationCriteria with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetTechnologySpecificDocumentationCriteriaStr)
	}
	return rsp.TechnologySpecificDocumentationCriteria, nil
}

// GetTechnologySpecificDocumentationCriteriasWithCustomQuery returns a list of `TechnologySpecificDocumentationCriteria` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetTechnologySpecificDocumentationCriteriasWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.TechnologySpecificDocumentationCriteriaFilter, order *dgclient.TechnologySpecificDocumentationCriteriaOrder, first *int64, offset *int64) ([]*models.TechnologySpecificDocumentationCriteria, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		TechnologySpecificDocumentationCriterias []*models.TechnologySpecificDocumentationCriteria "json:\"queryTechnologySpecificDocumentationCriteria\" graphql:\"queryTechnologySpecificDocumentationCriteria\""
	}{}
	dr.log.Debugw("get TechnologySpecificDocumentationCriterias with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetTechnologySpecificDocumentationCriteriaStr)
	}
	return rsp.TechnologySpecificDocumentationCriterias, nil
}

// GetAllTechnologySpecificDocumentationCriteriasWithCustomQuery returns a list of all `TechnologySpecificDocumentationCriteria` objects.
func (dr *DgraphRepository) GetAllTechnologySpecificDocumentationCriteriasWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.TechnologySpecificDocumentationCriteria, error) {
	return dr.GetTechnologySpecificDocumentationCriteriasWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateTechnologySpecificDocumentationCriteria creates a new `TechnologySpecificDocumentationCriteria` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateTechnologySpecificDocumentationCriteria(ctx context.Context, input *models.TechnologySpecificDocumentationCriteria) error {
	dr.log.Debugw("create TechnologySpecificDocumentationCriteria", []interface{}{"xid", *input.Xid}...)
	inputData := dgclient.AddTechnologySpecificDocumentationCriteriaInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateTechnologySpecificDocumentationCriterias(ctx, []*dgclient.AddTechnologySpecificDocumentationCriteriaInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create technologySpecificDocumentationCriteria").
			Add("technologySpecificDocumentationCriteriaId", input.ID).Add("technologySpecificDocumentationCriteriaXid", input.Xid)
	}
	// save ID from response
	input.ID = &rsp.AddTechnologySpecificDocumentationCriteria.TechnologySpecificDocumentationCriteria[0].ID
	return nil
}

// CreateTechnologySpecificDocumentationCriterias creates new `TechnologySpecificDocumentationCriteria` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateTechnologySpecificDocumentationCriterias(ctx context.Context, input []*models.TechnologySpecificDocumentationCriteria) error {
	inputData := make([]*dgclient.AddTechnologySpecificDocumentationCriteriaInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddTechnologySpecificDocumentationCriteriaInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create TechnologySpecificDocumentationCriterias")
	rsp, err := dr.client.CreateTechnologySpecificDocumentationCriterias(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create technologySpecificDocumentationCriterias")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddTechnologySpecificDocumentationCriteria.TechnologySpecificDocumentationCriteria[i].ID
	}

	return nil
}

// UpdateTechnologySpecificDocumentationCriteria updates an existing `TechnologySpecificDocumentationCriteria` object.
func (dr *DgraphRepository) UpdateTechnologySpecificDocumentationCriteria(ctx context.Context, input *models.TechnologySpecificDocumentationCriteria) error {
	dr.log.Debugw("update TechnologySpecificDocumentationCriteria", []interface{}{"id", *input.ID, "xid", *input.Xid}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID").Add("technologySpecificDocumentationCriteriaXid", input.Xid)
	}
	patch := &dgclient.TechnologySpecificDocumentationCriteriaPatch{}
	dr.copyORMStruct(input, patch)
	patch.Xid = nil
	inputData := dgclient.UpdateTechnologySpecificDocumentationCriteriaInput{
		Filter: dgclient.TechnologySpecificDocumentationCriteriaFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateTechnologySpecificDocumentationCriterias(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update technologySpecificDocumentationCriteria").
			Add("technologySpecificDocumentationCriteriaId", *input.ID).Add("technologySpecificDocumentationCriteriaXid", input.Xid)
	}
	return nil
}

// DeleteTechnologySpecificDocumentationCriteria deletes a `TechnologySpecificDocumentationCriteria` object.
func (dr *DgraphRepository) DeleteTechnologySpecificDocumentationCriteria(ctx context.Context, id, xid *string) error {
	delFilter := dgclient.TechnologySpecificDocumentationCriteriaFilter{}
	if id != nil && xid != nil {
		return NewRepoError("must specify either id or xid")
	}
	if id != nil {
		delFilter.ID = []string{*id}
	}
	if xid != nil {
		delFilter.Xid = &dgclient.StringHashFilter{Eq: xid}
	}

	dr.log.Debugw("delete TechnologySpecificDocumentationCriteria")
	if _, err := dr.client.DeleteTechnologySpecificDocumentationCriterias(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteTechnologySpecificDocumentationCriteriaStr).
			Add("technologySpecificDocumentationCriteriaId", id).Add("technologySpecificDocumentationCriteriaXid", xid)
	}
	return nil
}

// DeleteAllTechnologySpecificDocumentationCriterias deletes all `TechnologySpecificDocumentationCriteria` objects.
func (dr *DgraphRepository) DeleteAllTechnologySpecificDocumentationCriterias(ctx context.Context) error {
	delFilter := dgclient.TechnologySpecificDocumentationCriteriaFilter{}
	dr.log.Debugw("delete all TechnologySpecificDocumentationCriteria")
	if _, err := dr.client.DeleteTechnologySpecificDocumentationCriterias(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteTechnologySpecificDocumentationCriteriaStr)
	}
	return nil
}

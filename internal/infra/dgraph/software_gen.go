// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ SoftwareRepository = (*DgraphRepository)(nil)

// SoftwareRepository is an interface for getting and saving `Software` objects to a repository.
type SoftwareRepository interface {
	GetSoftware(ctx context.Context, id *string) (*models.Software, error)
	GetSoftwares(ctx context.Context, filter *dgclient.SoftwareFilter, order *dgclient.SoftwareOrder, first *int64, offset *int64) ([]*models.Software, int64, error)
	GetAllSoftwares(ctx context.Context) ([]*models.Software, int64, error)
	CreateSoftware(ctx context.Context, input *models.Software) error
	CreateSoftwares(ctx context.Context, input []*models.Software) error
	UpdateSoftware(ctx context.Context, input *models.Software) error
	DeleteSoftware(ctx context.Context, id *string) error
	DeleteAllSoftwares(ctx context.Context) error
}

var (
	errGetSoftwareStr    = "failed to get software(s)"
	errSaveSoftwareStr   = "failed to save software(s)"
	errDeleteSoftwareStr = "failed to delete software(s)"
)

// GetSoftware returns a `Software` object by its ID.
func (dr *DgraphRepository) GetSoftware(ctx context.Context, id *string) (*models.Software, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get Software", "id", *id)
		rsp, err := dr.client.GetSoftwareByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetSoftwareStr).Add("softwareId", id)
		}
		rspData = rsp.GetSoftware
	} else {
		panic("must specify id")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.Software{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetSoftwares returns a list of `Software` objects matching the filter criteria.
func (dr *DgraphRepository) GetSoftwares(ctx context.Context, filter *dgclient.SoftwareFilter, order *dgclient.SoftwareOrder, first *int64, offset *int64) ([]*models.Software, int64, error) {
	dr.log.Debugw("get Softwares")
	rsp, err := dr.client.GetSoftwares(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetSoftwareStr)
	}
	ret := make([]*models.Software, 0, len(rsp.QuerySoftware))
	if err = dr.copier.CopyTo(rsp.QuerySoftware, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateSoftware.Count, nil
}

// GetAllSoftwares returns a list of all `Software` objects.
func (dr *DgraphRepository) GetAllSoftwares(ctx context.Context) ([]*models.Software, int64, error) {
	return dr.GetSoftwares(ctx, nil, nil, nil, nil)
}

// GetSoftwareWithCustomQuery returns a `Software` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetSoftwareWithCustomQuery(ctx context.Context, operationName, query string, id *string) (*models.Software, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id": id,
		},
	}
	rsp := struct {
		Software *models.Software "json:\"getSoftware\" graphql:\"getSoftware\""
	}{}
	dr.log.Debugw("get Software with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetSoftwareStr)
	}
	return rsp.Software, nil
}

// GetSoftwaresWithCustomQuery returns a list of `Software` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetSoftwaresWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.SoftwareFilter, order *dgclient.SoftwareOrder, first *int64, offset *int64) ([]*models.Software, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		Softwares []*models.Software "json:\"querySoftware\" graphql:\"querySoftware\""
	}{}
	dr.log.Debugw("get Softwares with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetSoftwareStr)
	}
	return rsp.Softwares, nil
}

// GetAllSoftwaresWithCustomQuery returns a list of all `Software` objects.
func (dr *DgraphRepository) GetAllSoftwaresWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.Software, error) {
	return dr.GetSoftwaresWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateSoftware creates a new `Software` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateSoftware(ctx context.Context, input *models.Software) error {
	dr.log.Debugw("create Software", []interface{}{}...)
	inputData := dgclient.AddSoftwareInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateSoftwares(ctx, []*dgclient.AddSoftwareInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create software").
			Add("softwareId", input.ID)
	}
	// save ID from response
	input.ID = &rsp.AddSoftware.Software[0].ID
	return nil
}

// CreateSoftwares creates new `Software` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateSoftwares(ctx context.Context, input []*models.Software) error {
	inputData := make([]*dgclient.AddSoftwareInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddSoftwareInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create Softwares")
	rsp, err := dr.client.CreateSoftwares(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create softwares")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddSoftware.Software[i].ID
	}

	return nil
}

// UpdateSoftware updates an existing `Software` object.
func (dr *DgraphRepository) UpdateSoftware(ctx context.Context, input *models.Software) error {
	dr.log.Debugw("update Software", []interface{}{"id", *input.ID}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID")
	}
	patch := &dgclient.SoftwarePatch{}
	dr.copyORMStruct(input, patch)
	inputData := dgclient.UpdateSoftwareInput{
		Filter: dgclient.SoftwareFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateSoftwares(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update software").
			Add("softwareId", *input.ID)
	}
	return nil
}

// DeleteSoftware deletes a `Software` object.
func (dr *DgraphRepository) DeleteSoftware(ctx context.Context, id *string) error {
	delFilter := dgclient.SoftwareFilter{}
	if id == nil {
		return NewRepoError("must specify id")
	}
	delFilter.ID = []string{*id}

	dr.log.Debugw("delete Software")
	if _, err := dr.client.DeleteSoftwares(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteSoftwareStr).
			Add("softwareId", id)
	}
	return nil
}

// DeleteAllSoftwares deletes all `Software` objects.
func (dr *DgraphRepository) DeleteAllSoftwares(ctx context.Context) error {
	delFilter := dgclient.SoftwareFilter{}
	dr.log.Debugw("delete all Software")
	if _, err := dr.client.DeleteSoftwares(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteSoftwareStr)
	}
	return nil
}

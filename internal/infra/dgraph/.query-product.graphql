fragment ProductFragment on Product {
	...CrawlerMetaFragment
	id
	xid
	name
	description
	documentationLanguage
	version
	license {
		id
		xid
	}
	licensor {...UserOrGroupBasicFragment}
	website
	state
	release {
		id
		name
	}
	releases {
		id
		name
	}
	renamedTo {
		id
		name
	}
	renamedFrom {
		id
		name
	}
	forkOf {
		id
		name
	}
	forks {
		id
		name
	}
	forkCount
	starCount
	tags {
		id
		name
	}
	category {
		id
		fullName
	}
}

fragment ProductSearchFragment on Product {
	...CrawlerMetaFragment
	id
	xid
	name
	website
	state
	renamedTo {id}
	renamedFrom {id}
	forkOf {
		id
		release {
			repository {
				url
			}
		}
	}
	forks {id}
	forkCount
	starCount
	tags {...TagFragment}
	category {...CategoryFragment}

	releases {id}
	release {
		id
		xid
		name
		description
		version
		createdAt
		releases {id}
		isLatest
		repository {...RepositoryFragment}
		license {...LicenseFragmentBasic}
		additionalLicenses {...LicenseFragmentBasic}
		licensor {...UserOrGroupFullFragment}
		documentationLanguage
		technologyReadinessLevel
		documentationReadinessLevel
		attestation
		publication
		compliesWith {name}
		cpcPatentClass
		tsdc {id}
		components {id}
		software {id}
		image {...FileFragment}
		readme {...FileFragment}
		contributionGuide {...FileFragment}
		bom {...FileFragment}
		manufacturingInstructions {...FileFragment}
		userManual {...FileFragment}
		product {id}
		usedIn {id}
		source {...FileFragment}
		export {...FileFragment}
		auxiliary {...FileFragment}
		organization {id}
		mass
		outerDimensions {...OuterDimensionsFragment}
		material {id}
		manufacturingProcess {id}
		productionMetadata {id}
	}
}

# ------------------------------------------------------------------------------

query GetProductByID($id: ID!) {
	getProduct(id: $id) {...ProductFragment}
}

query GetProductByXid($xid: String!) {
	getProduct(xid: $xid) {...ProductFragment}
}

query GetProductID($xid: String!) {
	getProduct(xid: $xid) {id}
}

query GetProducts($getFilter: ProductFilter, $order: ProductOrder, $first: Int, $offset: Int) {
	queryProduct(filter: $getFilter, order: $order, first: $first, offset: $offset) {...ProductFragment}
	aggregateProduct(filter: $getFilter) {count}
}

query SearchProducts($getFilter: ProductFilter, $order: ProductOrder, $first: Int, $offset: Int) {
	queryProduct(filter: $getFilter, order: $order, first: $first, offset: $offset) {...ProductSearchFragment}
	aggregateProduct(filter: $getFilter) {count}
}

mutation CreateProducts($createInput: [AddProductInput!]!) {
	addProduct(input: $createInput, upsert: true) {product {id}}
}

mutation UpdateProducts($updateInput: UpdateProductInput!) {
	updateProduct(input: $updateInput) {product {id}}
}

mutation DeleteProducts($delFilter: ProductFilter!) {
	deleteProduct(filter: $delFilter) {product {id}}
}

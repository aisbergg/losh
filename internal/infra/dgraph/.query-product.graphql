# fragment ProductFragment on Product {
# 	...CrawlerMetaFragment
# 	id
# 	xid
# 	name
# 	description
# 	documentationLanguage
# 	version
# 	license {
# 		id
# 		xid
# 	}
# 	licensor {...UserOrGroupBasicFragment}
# 	website
# 	state
# 	lastUpdatedAt
# 	release {
# 		id
# 		name
# 	}
# 	releases {
# 		id
# 		name
# 	}
# 	renamedTo {
# 		id
# 		name
# 	}
# 	renamedFrom {
# 		id
# 		name
# 	}
# 	forkOf {
# 		id
# 		name
# 	}
# 	forks {
# 		id
# 		name
# 	}
# 	forkCount
# 	starCount
# 	tags {
# 		id
# 		name
# 	}
# 	category {
# 		id
# 		fullName
# 	}
# }

fragment ProductSearchFragment on Product {
	...CrawlerMetaFragment
	id
	xid
	name
	website
	state
	lastUpdatedAt
	renamedTo {id}
	renamedFrom {id}
	forkOf {
		id
		release {
			repository {
				url
			}
		}
	}
	forks {id}
	forkCount
	starCount
	tags {...TagFragment}
	category {...CategoryFragment}

	releases {id}
	release {
		...ComponentFullFragment
	}
}

fragment ProductFullFragment on Product {
	...CrawlerMetaFragment
	id
	xid
	name
	website
	state
	lastUpdatedAt
	renamedTo {id}
	renamedFrom {id}
	forkOf {
		id
		release {
			repository {
				url
			}
		}
	}
	forks {id}
	forkCount
	starCount
	tags {...TagFragment}
	category {...CategoryFragment}

	releases {...ComponentFullFragment}
	release {...ComponentFullFragment}
}

# ------------------------------------------------------------------------------

query GetProductByID($id: ID!) {
	getProduct(id: $id) {...ProductFullFragment}
}

query GetProductByXid($xid: String!) {
	getProduct(xid: $xid) {...ProductFullFragment}
}

query GetProductID($xid: String!) {
	getProduct(xid: $xid) {id}
}

query GetProducts($getFilter: ProductFilter, $order: ProductOrder, $first: Int, $offset: Int) {
	queryProduct(filter: $getFilter, order: $order, first: $first, offset: $offset) {...ProductFullFragment}
	aggregateProduct(filter: $getFilter) {count}
}

query SearchProducts($getFilter: ProductFilter, $order: ProductOrder, $first: Int, $offset: Int) {
	queryProduct(filter: $getFilter, order: $order, first: $first, offset: $offset) {...ProductSearchFragment}
	aggregateProduct(filter: $getFilter) {count}
}

mutation CreateProducts($createInput: [AddProductInput!]!) {
	addProduct(input: $createInput, upsert: true) {product {id}}
}

mutation UpdateProducts($updateInput: UpdateProductInput!) {
	updateProduct(input: $updateInput) {product {id}}
}

mutation DeleteProducts($delFilter: ProductFilter!) {
	deleteProduct(filter: $delFilter) {product {id}}
}

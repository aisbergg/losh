// Code generated by codegen, DO NOT EDIT.

package dgraph

import (
	"context"

	"losh/internal/core/product/models"
	"losh/internal/infra/dgraph/dgclient"
	"losh/internal/lib/net/request"
)

// make sure the struct implements the interface
var _ LicenseRepository = (*DgraphRepository)(nil)

// LicenseRepository is an interface for getting and saving `License` objects to a repository.
type LicenseRepository interface {
	GetLicense(ctx context.Context, id, xid *string) (*models.License, error)
	GetLicenses(ctx context.Context, filter *dgclient.LicenseFilter, order *dgclient.LicenseOrder, first *int64, offset *int64) ([]*models.License, int64, error)
	GetAllLicenses(ctx context.Context) ([]*models.License, int64, error)
	CreateLicense(ctx context.Context, input *models.License) error
	CreateLicenses(ctx context.Context, input []*models.License) error
	UpdateLicense(ctx context.Context, input *models.License) error
	DeleteLicense(ctx context.Context, id, xid *string) error
	DeleteAllLicenses(ctx context.Context) error
}

var (
	errGetLicenseStr    = "failed to get license(s)"
	errSaveLicenseStr   = "failed to save license(s)"
	errDeleteLicenseStr = "failed to delete license(s)"
)

// GetLicense returns a `License` object by its ID.
func (dr *DgraphRepository) GetLicense(ctx context.Context, id, xid *string) (*models.License, error) {
	var rspData interface{}
	if id != nil {
		dr.log.Debugw("get License", "id", *id)
		rsp, err := dr.client.GetLicenseByID(ctx, *id)
		if err != nil {
			return nil, WrapRepoError(err, errGetLicenseStr).Add("licenseId", id)
		}
		rspData = rsp.GetLicense
	} else if xid != nil {
		dr.log.Debugw("get License", "xid", *xid)
		rsp, err := dr.client.GetLicenseByXid(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetLicenseStr).Add("licenseXid", xid)
		}
		rspData = rsp.GetLicense
	} else {
		panic("must specify id or xid")
	}

	if rspData == nil {
		return nil, nil
	}
	ret := &models.License{}
	if err := dr.copier.CopyTo(rspData, ret); err != nil {
		panic(err)
	}
	return ret, nil
}

// GetLicenseID returns the ID of an existing `License` object.
func (dr *DgraphRepository) GetLicenseID(ctx context.Context, xid *string) (*string, error) {
	if xid != nil {
		dr.log.Debugw("get License", "xid", *xid)
		rsp, err := dr.client.GetLicenseID(ctx, *xid)
		if err != nil {
			return nil, WrapRepoError(err, errGetLicenseStr).Add("licenseXid", xid)
		}
		if rsp.GetLicense == nil {
			return nil, nil
		}
		return &rsp.GetLicense.ID, nil
	}

	panic("must specify xid")
}

// GetLicenses returns a list of `License` objects matching the filter criteria.
func (dr *DgraphRepository) GetLicenses(ctx context.Context, filter *dgclient.LicenseFilter, order *dgclient.LicenseOrder, first *int64, offset *int64) ([]*models.License, int64, error) {
	dr.log.Debugw("get Licenses")
	rsp, err := dr.client.GetLicenses(ctx, filter, order, first, offset)
	if err != nil {
		return nil, 0, WrapRepoError(err, errGetLicenseStr)
	}
	ret := make([]*models.License, 0, len(rsp.QueryLicense))
	if err = dr.copier.CopyTo(rsp.QueryLicense, &ret); err != nil {
		panic(err)
	}
	return ret, *rsp.AggregateLicense.Count, nil
}

// GetAllLicenses returns a list of all `License` objects.
func (dr *DgraphRepository) GetAllLicenses(ctx context.Context) ([]*models.License, int64, error) {
	return dr.GetLicenses(ctx, nil, nil, nil, nil)
}

// GetLicenseWithCustomQuery returns a `License` object by its ID.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetLicenseWithCustomQuery(ctx context.Context, operationName, query string, id, xid *string) (*models.License, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"id":  id,
			"xid": xid,
		},
	}
	rsp := struct {
		License *models.License "json:\"getLicense\" graphql:\"getLicense\""
	}{}
	dr.log.Debugw("get License with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetLicenseStr)
	}
	return rsp.License, nil
}

// GetLicensesWithCustomQuery returns a list of `License` objects matching the filter criteria.
// The given query controls the amount of information to be returned.
func (dr *DgraphRepository) GetLicensesWithCustomQuery(ctx context.Context, operationName, query string, filter *dgclient.LicenseFilter, order *dgclient.LicenseOrder, first *int64, offset *int64) ([]*models.License, error) {
	req := request.GraphQLRequest{
		Ctx:           ctx,
		OperationName: operationName,
		Query:         query,
		Variables: map[string]interface{}{
			"filter": filter,
			"order":  order,
			"first":  first,
			"offset": offset,
		},
	}
	rsp := struct {
		Licenses []*models.License "json:\"queryLicense\" graphql:\"queryLicense\""
	}{}
	dr.log.Debugw("get Licenses with custom query")
	if err := dr.requester.Do(req, &rsp); err != nil {
		return nil, WrapRepoError(err, errGetLicenseStr)
	}
	return rsp.Licenses, nil
}

// GetAllLicensesWithCustomQuery returns a list of all `License` objects.
func (dr *DgraphRepository) GetAllLicensesWithCustomQuery(ctx context.Context, operationName, query string) ([]*models.License, error) {
	return dr.GetLicensesWithCustomQuery(ctx, operationName, query, nil, nil, nil, nil)
}

// CreateLicense creates a new `License` object.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateLicense(ctx context.Context, input *models.License) error {
	dr.log.Debugw("create License", []interface{}{"xid", *input.Xid}...)
	inputData := dgclient.AddLicenseInput{}
	dr.copyORMStruct(input, &inputData)
	rsp, err := dr.client.CreateLicenses(ctx, []*dgclient.AddLicenseInput{&inputData})
	if err != nil {
		return WrapRepoError(err, "failed to create license").
			Add("licenseId", input.ID).Add("licenseXid", input.Xid)
	}
	// save ID from response
	input.ID = &rsp.AddLicense.License[0].ID
	return nil
}

// CreateLicenses creates new `License` objects.
// After successful creation the ID field of the input will be populated with
// the ID assigned by the DB.
func (dr *DgraphRepository) CreateLicenses(ctx context.Context, input []*models.License) error {
	inputData := make([]*dgclient.AddLicenseInput, 0, len(input))
	for _, v := range input {
		iv := &dgclient.AddLicenseInput{}
		dr.copyORMStruct(v, iv)
		inputData = append(inputData, iv)
	}

	dr.log.Debugw("create Licenses")
	rsp, err := dr.client.CreateLicenses(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to create licenses")
	}

	// save ID from response
	for i, v := range input {
		v.ID = &rsp.AddLicense.License[i].ID
	}

	return nil
}

// UpdateLicense updates an existing `License` object.
func (dr *DgraphRepository) UpdateLicense(ctx context.Context, input *models.License) error {
	dr.log.Debugw("update License", []interface{}{"id", *input.ID, "xid", *input.Xid}...)
	if *input.ID == "" {
		return WrapRepoError(nil, "missing ID").Add("licenseXid", input.Xid)
	}
	patch := &dgclient.LicensePatch{}
	dr.copyORMStruct(input, patch)
	patch.Xid = nil
	inputData := dgclient.UpdateLicenseInput{
		Filter: dgclient.LicenseFilter{
			ID: []string{*input.ID},
		},
		Set: patch,
	}
	_, err := dr.client.UpdateLicenses(ctx, inputData)
	if err != nil {
		return WrapRepoError(err, "failed to update license").
			Add("licenseId", *input.ID).Add("licenseXid", input.Xid)
	}
	return nil
}

// DeleteLicense deletes a `License` object.
func (dr *DgraphRepository) DeleteLicense(ctx context.Context, id, xid *string) error {
	delFilter := dgclient.LicenseFilter{}
	if id != nil && xid != nil {
		return NewRepoError("must specify either id or xid")
	}
	if id != nil {
		delFilter.ID = []string{*id}
	}
	if xid != nil {
		delFilter.Xid = &dgclient.StringHashFilterStringRegExpFilterStringTermFilter{Eq: xid}
	}

	dr.log.Debugw("delete License")
	if _, err := dr.client.DeleteLicenses(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteLicenseStr).
			Add("licenseId", id).Add("licenseXid", xid)
	}
	return nil
}

// DeleteAllLicenses deletes all `License` objects.
func (dr *DgraphRepository) DeleteAllLicenses(ctx context.Context) error {
	delFilter := dgclient.LicenseFilter{}
	dr.log.Debugw("delete all License")
	if _, err := dr.client.DeleteLicenses(ctx, delFilter); err != nil {
		return WrapRepoError(err, errDeleteLicenseStr)
	}
	return nil
}
